
TUAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009834  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  08009948  08009948  00019948  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e18  08009e18  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08009e18  08009e18  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009e18  08009e18  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e18  08009e18  00019e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e1c  08009e1c  00019e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009e20  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  200001e8  0800a008  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  0800a008  00020424  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY
 13 .debug_info   000090f5  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dcf  00000000  00000000  00029349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000968  00000000  00000000  0002b118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000726  00000000  00000000  0002ba80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000185c6  00000000  00000000  0002c1a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c683  00000000  00000000  0004476c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088feb  00000000  00000000  00050def  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003dec  00000000  00000000  000d9ddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000ddbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800992c 	.word	0x0800992c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800992c 	.word	0x0800992c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_fmul>:
 8000b68:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b70:	bf1e      	ittt	ne
 8000b72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b76:	ea92 0f0c 	teqne	r2, ip
 8000b7a:	ea93 0f0c 	teqne	r3, ip
 8000b7e:	d06f      	beq.n	8000c60 <__aeabi_fmul+0xf8>
 8000b80:	441a      	add	r2, r3
 8000b82:	ea80 0c01 	eor.w	ip, r0, r1
 8000b86:	0240      	lsls	r0, r0, #9
 8000b88:	bf18      	it	ne
 8000b8a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b8e:	d01e      	beq.n	8000bce <__aeabi_fmul+0x66>
 8000b90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b94:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b98:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b9c:	fba0 3101 	umull	r3, r1, r0, r1
 8000ba0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ba4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ba8:	bf3e      	ittt	cc
 8000baa:	0049      	lslcc	r1, r1, #1
 8000bac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bb0:	005b      	lslcc	r3, r3, #1
 8000bb2:	ea40 0001 	orr.w	r0, r0, r1
 8000bb6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bba:	2afd      	cmp	r2, #253	; 0xfd
 8000bbc:	d81d      	bhi.n	8000bfa <__aeabi_fmul+0x92>
 8000bbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bc6:	bf08      	it	eq
 8000bc8:	f020 0001 	biceq.w	r0, r0, #1
 8000bcc:	4770      	bx	lr
 8000bce:	f090 0f00 	teq	r0, #0
 8000bd2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bd6:	bf08      	it	eq
 8000bd8:	0249      	lsleq	r1, r1, #9
 8000bda:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bde:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000be2:	3a7f      	subs	r2, #127	; 0x7f
 8000be4:	bfc2      	ittt	gt
 8000be6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bee:	4770      	bxgt	lr
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	3a01      	subs	r2, #1
 8000bfa:	dc5d      	bgt.n	8000cb8 <__aeabi_fmul+0x150>
 8000bfc:	f112 0f19 	cmn.w	r2, #25
 8000c00:	bfdc      	itt	le
 8000c02:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c06:	4770      	bxle	lr
 8000c08:	f1c2 0200 	rsb	r2, r2, #0
 8000c0c:	0041      	lsls	r1, r0, #1
 8000c0e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c12:	f1c2 0220 	rsb	r2, r2, #32
 8000c16:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c1a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c1e:	f140 0000 	adc.w	r0, r0, #0
 8000c22:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c26:	bf08      	it	eq
 8000c28:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c2c:	4770      	bx	lr
 8000c2e:	f092 0f00 	teq	r2, #0
 8000c32:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c36:	bf02      	ittt	eq
 8000c38:	0040      	lsleq	r0, r0, #1
 8000c3a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c3e:	3a01      	subeq	r2, #1
 8000c40:	d0f9      	beq.n	8000c36 <__aeabi_fmul+0xce>
 8000c42:	ea40 000c 	orr.w	r0, r0, ip
 8000c46:	f093 0f00 	teq	r3, #0
 8000c4a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c4e:	bf02      	ittt	eq
 8000c50:	0049      	lsleq	r1, r1, #1
 8000c52:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c56:	3b01      	subeq	r3, #1
 8000c58:	d0f9      	beq.n	8000c4e <__aeabi_fmul+0xe6>
 8000c5a:	ea41 010c 	orr.w	r1, r1, ip
 8000c5e:	e78f      	b.n	8000b80 <__aeabi_fmul+0x18>
 8000c60:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c64:	ea92 0f0c 	teq	r2, ip
 8000c68:	bf18      	it	ne
 8000c6a:	ea93 0f0c 	teqne	r3, ip
 8000c6e:	d00a      	beq.n	8000c86 <__aeabi_fmul+0x11e>
 8000c70:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c74:	bf18      	it	ne
 8000c76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c7a:	d1d8      	bne.n	8000c2e <__aeabi_fmul+0xc6>
 8000c7c:	ea80 0001 	eor.w	r0, r0, r1
 8000c80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c84:	4770      	bx	lr
 8000c86:	f090 0f00 	teq	r0, #0
 8000c8a:	bf17      	itett	ne
 8000c8c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c90:	4608      	moveq	r0, r1
 8000c92:	f091 0f00 	teqne	r1, #0
 8000c96:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c9a:	d014      	beq.n	8000cc6 <__aeabi_fmul+0x15e>
 8000c9c:	ea92 0f0c 	teq	r2, ip
 8000ca0:	d101      	bne.n	8000ca6 <__aeabi_fmul+0x13e>
 8000ca2:	0242      	lsls	r2, r0, #9
 8000ca4:	d10f      	bne.n	8000cc6 <__aeabi_fmul+0x15e>
 8000ca6:	ea93 0f0c 	teq	r3, ip
 8000caa:	d103      	bne.n	8000cb4 <__aeabi_fmul+0x14c>
 8000cac:	024b      	lsls	r3, r1, #9
 8000cae:	bf18      	it	ne
 8000cb0:	4608      	movne	r0, r1
 8000cb2:	d108      	bne.n	8000cc6 <__aeabi_fmul+0x15e>
 8000cb4:	ea80 0001 	eor.w	r0, r0, r1
 8000cb8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_fdiv>:
 8000cd0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cd8:	bf1e      	ittt	ne
 8000cda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cde:	ea92 0f0c 	teqne	r2, ip
 8000ce2:	ea93 0f0c 	teqne	r3, ip
 8000ce6:	d069      	beq.n	8000dbc <__aeabi_fdiv+0xec>
 8000ce8:	eba2 0203 	sub.w	r2, r2, r3
 8000cec:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf0:	0249      	lsls	r1, r1, #9
 8000cf2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cf6:	d037      	beq.n	8000d68 <__aeabi_fdiv+0x98>
 8000cf8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cfc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d00:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d04:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	bf38      	it	cc
 8000d0c:	005b      	lslcc	r3, r3, #1
 8000d0e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d12:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d16:	428b      	cmp	r3, r1
 8000d18:	bf24      	itt	cs
 8000d1a:	1a5b      	subcs	r3, r3, r1
 8000d1c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d20:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d24:	bf24      	itt	cs
 8000d26:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d2a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d2e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d32:	bf24      	itt	cs
 8000d34:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d3c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d40:	bf24      	itt	cs
 8000d42:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d46:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	bf18      	it	ne
 8000d4e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d52:	d1e0      	bne.n	8000d16 <__aeabi_fdiv+0x46>
 8000d54:	2afd      	cmp	r2, #253	; 0xfd
 8000d56:	f63f af50 	bhi.w	8000bfa <__aeabi_fmul+0x92>
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d60:	bf08      	it	eq
 8000d62:	f020 0001 	biceq.w	r0, r0, #1
 8000d66:	4770      	bx	lr
 8000d68:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d6c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d70:	327f      	adds	r2, #127	; 0x7f
 8000d72:	bfc2      	ittt	gt
 8000d74:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d78:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7c:	4770      	bxgt	lr
 8000d7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d82:	f04f 0300 	mov.w	r3, #0
 8000d86:	3a01      	subs	r2, #1
 8000d88:	e737      	b.n	8000bfa <__aeabi_fmul+0x92>
 8000d8a:	f092 0f00 	teq	r2, #0
 8000d8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d92:	bf02      	ittt	eq
 8000d94:	0040      	lsleq	r0, r0, #1
 8000d96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d9a:	3a01      	subeq	r2, #1
 8000d9c:	d0f9      	beq.n	8000d92 <__aeabi_fdiv+0xc2>
 8000d9e:	ea40 000c 	orr.w	r0, r0, ip
 8000da2:	f093 0f00 	teq	r3, #0
 8000da6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000daa:	bf02      	ittt	eq
 8000dac:	0049      	lsleq	r1, r1, #1
 8000dae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000db2:	3b01      	subeq	r3, #1
 8000db4:	d0f9      	beq.n	8000daa <__aeabi_fdiv+0xda>
 8000db6:	ea41 010c 	orr.w	r1, r1, ip
 8000dba:	e795      	b.n	8000ce8 <__aeabi_fdiv+0x18>
 8000dbc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dc0:	ea92 0f0c 	teq	r2, ip
 8000dc4:	d108      	bne.n	8000dd8 <__aeabi_fdiv+0x108>
 8000dc6:	0242      	lsls	r2, r0, #9
 8000dc8:	f47f af7d 	bne.w	8000cc6 <__aeabi_fmul+0x15e>
 8000dcc:	ea93 0f0c 	teq	r3, ip
 8000dd0:	f47f af70 	bne.w	8000cb4 <__aeabi_fmul+0x14c>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	e776      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000dd8:	ea93 0f0c 	teq	r3, ip
 8000ddc:	d104      	bne.n	8000de8 <__aeabi_fdiv+0x118>
 8000dde:	024b      	lsls	r3, r1, #9
 8000de0:	f43f af4c 	beq.w	8000c7c <__aeabi_fmul+0x114>
 8000de4:	4608      	mov	r0, r1
 8000de6:	e76e      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000de8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dec:	bf18      	it	ne
 8000dee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df2:	d1ca      	bne.n	8000d8a <__aeabi_fdiv+0xba>
 8000df4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000df8:	f47f af5c 	bne.w	8000cb4 <__aeabi_fmul+0x14c>
 8000dfc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e00:	f47f af3c 	bne.w	8000c7c <__aeabi_fmul+0x114>
 8000e04:	e75f      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000e06:	bf00      	nop

08000e08 <__gesf2>:
 8000e08:	f04f 3cff 	mov.w	ip, #4294967295
 8000e0c:	e006      	b.n	8000e1c <__cmpsf2+0x4>
 8000e0e:	bf00      	nop

08000e10 <__lesf2>:
 8000e10:	f04f 0c01 	mov.w	ip, #1
 8000e14:	e002      	b.n	8000e1c <__cmpsf2+0x4>
 8000e16:	bf00      	nop

08000e18 <__cmpsf2>:
 8000e18:	f04f 0c01 	mov.w	ip, #1
 8000e1c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e2c:	bf18      	it	ne
 8000e2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e32:	d011      	beq.n	8000e58 <__cmpsf2+0x40>
 8000e34:	b001      	add	sp, #4
 8000e36:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e3a:	bf18      	it	ne
 8000e3c:	ea90 0f01 	teqne	r0, r1
 8000e40:	bf58      	it	pl
 8000e42:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e46:	bf88      	it	hi
 8000e48:	17c8      	asrhi	r0, r1, #31
 8000e4a:	bf38      	it	cc
 8000e4c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e50:	bf18      	it	ne
 8000e52:	f040 0001 	orrne.w	r0, r0, #1
 8000e56:	4770      	bx	lr
 8000e58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e5c:	d102      	bne.n	8000e64 <__cmpsf2+0x4c>
 8000e5e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e62:	d105      	bne.n	8000e70 <__cmpsf2+0x58>
 8000e64:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e68:	d1e4      	bne.n	8000e34 <__cmpsf2+0x1c>
 8000e6a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e6e:	d0e1      	beq.n	8000e34 <__cmpsf2+0x1c>
 8000e70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <__aeabi_cfrcmple>:
 8000e78:	4684      	mov	ip, r0
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	4661      	mov	r1, ip
 8000e7e:	e7ff      	b.n	8000e80 <__aeabi_cfcmpeq>

08000e80 <__aeabi_cfcmpeq>:
 8000e80:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e82:	f7ff ffc9 	bl	8000e18 <__cmpsf2>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	bf48      	it	mi
 8000e8a:	f110 0f00 	cmnmi.w	r0, #0
 8000e8e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e90 <__aeabi_fcmpeq>:
 8000e90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e94:	f7ff fff4 	bl	8000e80 <__aeabi_cfcmpeq>
 8000e98:	bf0c      	ite	eq
 8000e9a:	2001      	moveq	r0, #1
 8000e9c:	2000      	movne	r0, #0
 8000e9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_fcmplt>:
 8000ea4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea8:	f7ff ffea 	bl	8000e80 <__aeabi_cfcmpeq>
 8000eac:	bf34      	ite	cc
 8000eae:	2001      	movcc	r0, #1
 8000eb0:	2000      	movcs	r0, #0
 8000eb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_fcmple>:
 8000eb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ebc:	f7ff ffe0 	bl	8000e80 <__aeabi_cfcmpeq>
 8000ec0:	bf94      	ite	ls
 8000ec2:	2001      	movls	r0, #1
 8000ec4:	2000      	movhi	r0, #0
 8000ec6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eca:	bf00      	nop

08000ecc <__aeabi_fcmpge>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff ffd2 	bl	8000e78 <__aeabi_cfrcmple>
 8000ed4:	bf94      	ite	ls
 8000ed6:	2001      	movls	r0, #1
 8000ed8:	2000      	movhi	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_fcmpgt>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff ffc8 	bl	8000e78 <__aeabi_cfrcmple>
 8000ee8:	bf34      	ite	cc
 8000eea:	2001      	movcc	r0, #1
 8000eec:	2000      	movcs	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_d2lz>:
 8000ef4:	b538      	push	{r3, r4, r5, lr}
 8000ef6:	4605      	mov	r5, r0
 8000ef8:	460c      	mov	r4, r1
 8000efa:	2200      	movs	r2, #0
 8000efc:	2300      	movs	r3, #0
 8000efe:	4628      	mov	r0, r5
 8000f00:	4621      	mov	r1, r4
 8000f02:	f7ff fd5b 	bl	80009bc <__aeabi_dcmplt>
 8000f06:	b928      	cbnz	r0, 8000f14 <__aeabi_d2lz+0x20>
 8000f08:	4628      	mov	r0, r5
 8000f0a:	4621      	mov	r1, r4
 8000f0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f10:	f000 b80a 	b.w	8000f28 <__aeabi_d2ulz>
 8000f14:	4628      	mov	r0, r5
 8000f16:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000f1a:	f000 f805 	bl	8000f28 <__aeabi_d2ulz>
 8000f1e:	4240      	negs	r0, r0
 8000f20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f24:	bd38      	pop	{r3, r4, r5, pc}
 8000f26:	bf00      	nop

08000f28 <__aeabi_d2ulz>:
 8000f28:	b5d0      	push	{r4, r6, r7, lr}
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <__aeabi_d2ulz+0x34>)
 8000f2e:	4606      	mov	r6, r0
 8000f30:	460f      	mov	r7, r1
 8000f32:	f7ff fad1 	bl	80004d8 <__aeabi_dmul>
 8000f36:	f7ff fda7 	bl	8000a88 <__aeabi_d2uiz>
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	f7ff fa52 	bl	80003e4 <__aeabi_ui2d>
 8000f40:	2200      	movs	r2, #0
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <__aeabi_d2ulz+0x38>)
 8000f44:	f7ff fac8 	bl	80004d8 <__aeabi_dmul>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4630      	mov	r0, r6
 8000f4e:	4639      	mov	r1, r7
 8000f50:	f7ff f90a 	bl	8000168 <__aeabi_dsub>
 8000f54:	f7ff fd98 	bl	8000a88 <__aeabi_d2uiz>
 8000f58:	4621      	mov	r1, r4
 8000f5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000f5c:	3df00000 	.word	0x3df00000
 8000f60:	41f00000 	.word	0x41f00000

08000f64 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af02      	add	r7, sp, #8
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	f023 030f 	bic.w	r3, r3, #15
 8000f74:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	011b      	lsls	r3, r3, #4
 8000f7a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	f043 030c 	orr.w	r3, r3, #12
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	f043 0308 	orr.w	r3, r3, #8
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000f90:	7bbb      	ldrb	r3, [r7, #14]
 8000f92:	f043 030c 	orr.w	r3, r3, #12
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000f9a:	7bbb      	ldrb	r3, [r7, #14]
 8000f9c:	f043 0308 	orr.w	r3, r3, #8
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000fa4:	f107 0208 	add.w	r2, r7, #8
 8000fa8:	2364      	movs	r3, #100	; 0x64
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2304      	movs	r3, #4
 8000fae:	214e      	movs	r1, #78	; 0x4e
 8000fb0:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <lcd_send_cmd+0x5c>)
 8000fb2:	f001 ff57 	bl	8002e64 <HAL_I2C_Master_Transmit>
}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000264 	.word	0x20000264

08000fc4 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af02      	add	r7, sp, #8
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	f023 030f 	bic.w	r3, r3, #15
 8000fd4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	011b      	lsls	r3, r3, #4
 8000fda:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	f043 030d 	orr.w	r3, r3, #13
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	f043 0309 	orr.w	r3, r3, #9
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000ff0:	7bbb      	ldrb	r3, [r7, #14]
 8000ff2:	f043 030d 	orr.w	r3, r3, #13
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000ffa:	7bbb      	ldrb	r3, [r7, #14]
 8000ffc:	f043 0309 	orr.w	r3, r3, #9
 8001000:	b2db      	uxtb	r3, r3
 8001002:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001004:	f107 0208 	add.w	r2, r7, #8
 8001008:	2364      	movs	r3, #100	; 0x64
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	2304      	movs	r3, #4
 800100e:	214e      	movs	r1, #78	; 0x4e
 8001010:	4803      	ldr	r0, [pc, #12]	; (8001020 <lcd_send_data+0x5c>)
 8001012:	f001 ff27 	bl	8002e64 <HAL_I2C_Master_Transmit>
}
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000264 	.word	0x20000264

08001024 <lcd_init>:

void lcd_init (void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8001028:	2033      	movs	r0, #51	; 0x33
 800102a:	f7ff ff9b 	bl	8000f64 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 800102e:	2032      	movs	r0, #50	; 0x32
 8001030:	f7ff ff98 	bl	8000f64 <lcd_send_cmd>
	HAL_Delay(50);
 8001034:	2032      	movs	r0, #50	; 0x32
 8001036:	f000 fd4d 	bl	8001ad4 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 800103a:	2028      	movs	r0, #40	; 0x28
 800103c:	f7ff ff92 	bl	8000f64 <lcd_send_cmd>
	HAL_Delay(50);
 8001040:	2032      	movs	r0, #50	; 0x32
 8001042:	f000 fd47 	bl	8001ad4 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8001046:	2001      	movs	r0, #1
 8001048:	f7ff ff8c 	bl	8000f64 <lcd_send_cmd>
	HAL_Delay(50);
 800104c:	2032      	movs	r0, #50	; 0x32
 800104e:	f000 fd41 	bl	8001ad4 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8001052:	2006      	movs	r0, #6
 8001054:	f7ff ff86 	bl	8000f64 <lcd_send_cmd>
	HAL_Delay(50);
 8001058:	2032      	movs	r0, #50	; 0x32
 800105a:	f000 fd3b 	bl	8001ad4 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 800105e:	200c      	movs	r0, #12
 8001060:	f7ff ff80 	bl	8000f64 <lcd_send_cmd>
	HAL_Delay(50);
 8001064:	2032      	movs	r0, #50	; 0x32
 8001066:	f000 fd35 	bl	8001ad4 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 800106a:	2002      	movs	r0, #2
 800106c:	f7ff ff7a 	bl	8000f64 <lcd_send_cmd>
	HAL_Delay(50);
 8001070:	2032      	movs	r0, #50	; 0x32
 8001072:	f000 fd2f 	bl	8001ad4 <HAL_Delay>
	lcd_send_cmd (0x80);
 8001076:	2080      	movs	r0, #128	; 0x80
 8001078:	f7ff ff74 	bl	8000f64 <lcd_send_cmd>
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}

08001080 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001088:	e006      	b.n	8001098 <lcd_send_string+0x18>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	1c5a      	adds	r2, r3, #1
 800108e:	607a      	str	r2, [r7, #4]
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ff96 	bl	8000fc4 <lcd_send_data>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1f4      	bne.n	800108a <lcd_send_string+0xa>
}
 80010a0:	bf00      	nop
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <lcd_clear_display>:

void lcd_clear_display (void)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 80010ae:	2001      	movs	r0, #1
 80010b0:	f7ff ff58 	bl	8000f64 <lcd_send_cmd>
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 0)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d104      	bne.n	80010d2 <lcd_goto_XY+0x1a>
	{
		pos_Addr = 0x80 + col; // First row
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	3b80      	subs	r3, #128	; 0x80
 80010ce:	73fb      	strb	r3, [r7, #15]
 80010d0:	e006      	b.n	80010e0 <lcd_goto_XY+0x28>
	}
	else if(row == 1)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d103      	bne.n	80010e0 <lcd_goto_XY+0x28>
	{
		pos_Addr = 0xC0 + col; // Second row
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	3b40      	subs	r3, #64	; 0x40
 80010de:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff ff3e 	bl	8000f64 <lcd_send_cmd>
}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f6:	f000 fc8b 	bl	8001a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010fa:	f000 f935 	bl	8001368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010fe:	f000 fa2d 	bl	800155c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001102:	f000 f981 	bl	8001408 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001106:	f000 f9fb 	bl	8001500 <MX_I2C1_Init>
  MX_ADC2_Init();
 800110a:	f000 f9bb 	bl	8001484 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  uint16_t value;
  lcd_init();
 800110e:	f7ff ff89 	bl	8001024 <lcd_init>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001112:	4881      	ldr	r0, [pc, #516]	; (8001318 <main+0x228>)
 8001114:	f001 fa00 	bl	8002518 <HAL_ADCEx_Calibration_Start>


	  //lcd_send_string(" C");
	  //HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,GPIO_PIN_SET);

	  HAL_ADC_Start(&hadc1);
 8001118:	487f      	ldr	r0, [pc, #508]	; (8001318 <main+0x228>)
 800111a:	f000 fdd7 	bl	8001ccc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,1000);
 800111e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001122:	487d      	ldr	r0, [pc, #500]	; (8001318 <main+0x228>)
 8001124:	f000 fe80 	bl	8001e28 <HAL_ADC_PollForConversion>
	  value = HAL_ADC_GetValue(&hadc1);
 8001128:	487b      	ldr	r0, [pc, #492]	; (8001318 <main+0x228>)
 800112a:	f000 ff83 	bl	8002034 <HAL_ADC_GetValue>
 800112e:	4603      	mov	r3, r0
 8001130:	81fb      	strh	r3, [r7, #14]
	  HAL_ADC_Start(&hadc2);
 8001132:	487a      	ldr	r0, [pc, #488]	; (800131c <main+0x22c>)
 8001134:	f000 fdca 	bl	8001ccc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, 1000);
 8001138:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800113c:	4877      	ldr	r0, [pc, #476]	; (800131c <main+0x22c>)
 800113e:	f000 fe73 	bl	8001e28 <HAL_ADC_PollForConversion>
	  value2 = HAL_ADC_GetValue(&hadc2);
 8001142:	4876      	ldr	r0, [pc, #472]	; (800131c <main+0x22c>)
 8001144:	f000 ff76 	bl	8002034 <HAL_ADC_GetValue>
 8001148:	4603      	mov	r3, r0
 800114a:	b29a      	uxth	r2, r3
 800114c:	4b74      	ldr	r3, [pc, #464]	; (8001320 <main+0x230>)
 800114e:	801a      	strh	r2, [r3, #0]
	  v2 = (value2/4096.0)*3.3;
 8001150:	4b73      	ldr	r3, [pc, #460]	; (8001320 <main+0x230>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff f955 	bl	8000404 <__aeabi_i2d>
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	4b71      	ldr	r3, [pc, #452]	; (8001324 <main+0x234>)
 8001160:	f7ff fae4 	bl	800072c <__aeabi_ddiv>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4610      	mov	r0, r2
 800116a:	4619      	mov	r1, r3
 800116c:	a366      	add	r3, pc, #408	; (adr r3, 8001308 <main+0x218>)
 800116e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001172:	f7ff f9b1 	bl	80004d8 <__aeabi_dmul>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4610      	mov	r0, r2
 800117c:	4619      	mov	r1, r3
 800117e:	f7ff fca3 	bl	8000ac8 <__aeabi_d2f>
 8001182:	4603      	mov	r3, r0
 8001184:	4a68      	ldr	r2, [pc, #416]	; (8001328 <main+0x238>)
 8001186:	6013      	str	r3, [r2, #0]
	  v=(value/4096.0)*3.3;
 8001188:	89fb      	ldrh	r3, [r7, #14]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f93a 	bl	8000404 <__aeabi_i2d>
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	4b63      	ldr	r3, [pc, #396]	; (8001324 <main+0x234>)
 8001196:	f7ff fac9 	bl	800072c <__aeabi_ddiv>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	a359      	add	r3, pc, #356	; (adr r3, 8001308 <main+0x218>)
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	f7ff f996 	bl	80004d8 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	f7ff fc88 	bl	8000ac8 <__aeabi_d2f>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4a5c      	ldr	r2, [pc, #368]	; (800132c <main+0x23c>)
 80011bc:	6013      	str	r3, [r2, #0]
	  i = 5.0/10000;
 80011be:	4b5c      	ldr	r3, [pc, #368]	; (8001330 <main+0x240>)
 80011c0:	4a5c      	ldr	r2, [pc, #368]	; (8001334 <main+0x244>)
 80011c2:	601a      	str	r2, [r3, #0]
	  r = v/i;
 80011c4:	4b59      	ldr	r3, [pc, #356]	; (800132c <main+0x23c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a59      	ldr	r2, [pc, #356]	; (8001330 <main+0x240>)
 80011ca:	6812      	ldr	r2, [r2, #0]
 80011cc:	4611      	mov	r1, r2
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fd7e 	bl	8000cd0 <__aeabi_fdiv>
 80011d4:	4603      	mov	r3, r0
 80011d6:	461a      	mov	r2, r3
 80011d8:	4b57      	ldr	r3, [pc, #348]	; (8001338 <main+0x248>)
 80011da:	601a      	str	r2, [r3, #0]
	  E = pow(10,log(10000/r)/0.9)*10;
 80011dc:	4b56      	ldr	r3, [pc, #344]	; (8001338 <main+0x248>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4619      	mov	r1, r3
 80011e2:	4856      	ldr	r0, [pc, #344]	; (800133c <main+0x24c>)
 80011e4:	f7ff fd74 	bl	8000cd0 <__aeabi_fdiv>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff f91c 	bl	8000428 <__aeabi_f2d>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4610      	mov	r0, r2
 80011f6:	4619      	mov	r1, r3
 80011f8:	f007 faa8 	bl	800874c <log>
 80011fc:	a344      	add	r3, pc, #272	; (adr r3, 8001310 <main+0x220>)
 80011fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001202:	f7ff fa93 	bl	800072c <__aeabi_ddiv>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	f04f 0000 	mov.w	r0, #0
 800120e:	494c      	ldr	r1, [pc, #304]	; (8001340 <main+0x250>)
 8001210:	f007 face 	bl	80087b0 <pow>
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	4b49      	ldr	r3, [pc, #292]	; (8001340 <main+0x250>)
 800121a:	f7ff f95d 	bl	80004d8 <__aeabi_dmul>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	f7ff fc4f 	bl	8000ac8 <__aeabi_d2f>
 800122a:	4603      	mov	r3, r0
 800122c:	4a45      	ldr	r2, [pc, #276]	; (8001344 <main+0x254>)
 800122e:	6013      	str	r3, [r2, #0]
	  lcd_goto_XY(0,0);
 8001230:	2100      	movs	r1, #0
 8001232:	2000      	movs	r0, #0
 8001234:	f7ff ff40 	bl	80010b8 <lcd_goto_XY>
	  char buffer[11];
	  sprintf(buffer,"%.2f",E);
 8001238:	4b42      	ldr	r3, [pc, #264]	; (8001344 <main+0x254>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff f8f3 	bl	8000428 <__aeabi_f2d>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4638      	mov	r0, r7
 8001248:	493f      	ldr	r1, [pc, #252]	; (8001348 <main+0x258>)
 800124a:	f003 fdfb 	bl	8004e44 <siprintf>
	  lcd_send_string("Do sang: ");
 800124e:	483f      	ldr	r0, [pc, #252]	; (800134c <main+0x25c>)
 8001250:	f7ff ff16 	bl	8001080 <lcd_send_string>
	  lcd_goto_XY(0,9);
 8001254:	2109      	movs	r1, #9
 8001256:	2000      	movs	r0, #0
 8001258:	f7ff ff2e 	bl	80010b8 <lcd_goto_XY>
	  lcd_send_string(buffer);
 800125c:	463b      	mov	r3, r7
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ff0e 	bl	8001080 <lcd_send_string>
	  lcd_goto_XY(1,0);
 8001264:	2100      	movs	r1, #0
 8001266:	2001      	movs	r0, #1
 8001268:	f7ff ff26 	bl	80010b8 <lcd_goto_XY>
	  lcd_send_string("Mode: ");
 800126c:	4838      	ldr	r0, [pc, #224]	; (8001350 <main+0x260>)
 800126e:	f7ff ff07 	bl	8001080 <lcd_send_string>
	  if(E<40)
 8001272:	4b34      	ldr	r3, [pc, #208]	; (8001344 <main+0x254>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4937      	ldr	r1, [pc, #220]	; (8001354 <main+0x264>)
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fe13 	bl	8000ea4 <__aeabi_fcmplt>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d00d      	beq.n	80012a0 <main+0x1b0>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET );
 8001284:	2201      	movs	r2, #1
 8001286:	f44f 7180 	mov.w	r1, #256	; 0x100
 800128a:	4833      	ldr	r0, [pc, #204]	; (8001358 <main+0x268>)
 800128c:	f001 fc8e 	bl	8002bac <HAL_GPIO_WritePin>
		  lcd_goto_XY(1,7);
 8001290:	2107      	movs	r1, #7
 8001292:	2001      	movs	r0, #1
 8001294:	f7ff ff10 	bl	80010b8 <lcd_goto_XY>
		  lcd_send_string("ON ");
 8001298:	4830      	ldr	r0, [pc, #192]	; (800135c <main+0x26c>)
 800129a:	f7ff fef1 	bl	8001080 <lcd_send_string>
 800129e:	e00c      	b.n	80012ba <main+0x1ca>
	  }
	  else {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012a6:	482c      	ldr	r0, [pc, #176]	; (8001358 <main+0x268>)
 80012a8:	f001 fc80 	bl	8002bac <HAL_GPIO_WritePin>
		  lcd_goto_XY(1,7);
 80012ac:	2107      	movs	r1, #7
 80012ae:	2001      	movs	r0, #1
 80012b0:	f7ff ff02 	bl	80010b8 <lcd_goto_XY>
		  lcd_send_string("OFF");
 80012b4:	482a      	ldr	r0, [pc, #168]	; (8001360 <main+0x270>)
 80012b6:	f7ff fee3 	bl	8001080 <lcd_send_string>
	  }
	  if(v2<1)
 80012ba:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <main+0x238>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fdee 	bl	8000ea4 <__aeabi_fcmplt>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00f      	beq.n	80012ee <main+0x1fe>
	  {
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_SET);
 80012ce:	2201      	movs	r2, #1
 80012d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d4:	4820      	ldr	r0, [pc, #128]	; (8001358 <main+0x268>)
 80012d6:	f001 fc69 	bl	8002bac <HAL_GPIO_WritePin>
		  lcd_clear_display();
 80012da:	f7ff fee6 	bl	80010aa <lcd_clear_display>
		  lcd_goto_XY(0,0);
 80012de:	2100      	movs	r1, #0
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff fee9 	bl	80010b8 <lcd_goto_XY>
		  lcd_send_string(" FIRE ALARM!");
 80012e6:	481f      	ldr	r0, [pc, #124]	; (8001364 <main+0x274>)
 80012e8:	f7ff feca 	bl	8001080 <lcd_send_string>
 80012ec:	e005      	b.n	80012fa <main+0x20a>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012f4:	4818      	ldr	r0, [pc, #96]	; (8001358 <main+0x268>)
 80012f6:	f001 fc59 	bl	8002bac <HAL_GPIO_WritePin>
	  }
	  HAL_Delay(500);
 80012fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012fe:	f000 fbe9 	bl	8001ad4 <HAL_Delay>
  {
 8001302:	e709      	b.n	8001118 <main+0x28>
 8001304:	f3af 8000 	nop.w
 8001308:	66666666 	.word	0x66666666
 800130c:	400a6666 	.word	0x400a6666
 8001310:	cccccccd 	.word	0xcccccccd
 8001314:	3feccccc 	.word	0x3feccccc
 8001318:	20000204 	.word	0x20000204
 800131c:	20000234 	.word	0x20000234
 8001320:	200002cc 	.word	0x200002cc
 8001324:	40b00000 	.word	0x40b00000
 8001328:	200002c8 	.word	0x200002c8
 800132c:	200002bc 	.word	0x200002bc
 8001330:	200002b8 	.word	0x200002b8
 8001334:	3a03126f 	.word	0x3a03126f
 8001338:	200002c0 	.word	0x200002c0
 800133c:	461c4000 	.word	0x461c4000
 8001340:	40240000 	.word	0x40240000
 8001344:	200002c4 	.word	0x200002c4
 8001348:	08009948 	.word	0x08009948
 800134c:	08009950 	.word	0x08009950
 8001350:	0800995c 	.word	0x0800995c
 8001354:	42200000 	.word	0x42200000
 8001358:	40010c00 	.word	0x40010c00
 800135c:	08009964 	.word	0x08009964
 8001360:	08009968 	.word	0x08009968
 8001364:	0800996c 	.word	0x0800996c

08001368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b094      	sub	sp, #80	; 0x50
 800136c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001372:	2228      	movs	r2, #40	; 0x28
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f003 fdc7 	bl	8004f0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001398:	2302      	movs	r3, #2
 800139a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800139c:	2301      	movs	r3, #1
 800139e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013a0:	2310      	movs	r3, #16
 80013a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ac:	4618      	mov	r0, r3
 80013ae:	f002 f8b1 	bl	8003514 <HAL_RCC_OscConfig>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <SystemClock_Config+0x54>
  {
    Error_Handler();
 80013b8:	f000 f91c 	bl	80015f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013bc:	230f      	movs	r3, #15
 80013be:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013cc:	2300      	movs	r3, #0
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f002 fb1e 	bl	8003a18 <HAL_RCC_ClockConfig>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80013e2:	f000 f907 	bl	80015f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013e6:	2302      	movs	r3, #2
 80013e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	4618      	mov	r0, r3
 80013f2:	f002 fc9f 	bl	8003d34 <HAL_RCCEx_PeriphCLKConfig>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013fc:	f000 f8fa 	bl	80015f4 <Error_Handler>
  }
}
 8001400:	bf00      	nop
 8001402:	3750      	adds	r7, #80	; 0x50
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001418:	4b18      	ldr	r3, [pc, #96]	; (800147c <MX_ADC1_Init+0x74>)
 800141a:	4a19      	ldr	r2, [pc, #100]	; (8001480 <MX_ADC1_Init+0x78>)
 800141c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800141e:	4b17      	ldr	r3, [pc, #92]	; (800147c <MX_ADC1_Init+0x74>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001424:	4b15      	ldr	r3, [pc, #84]	; (800147c <MX_ADC1_Init+0x74>)
 8001426:	2200      	movs	r2, #0
 8001428:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800142a:	4b14      	ldr	r3, [pc, #80]	; (800147c <MX_ADC1_Init+0x74>)
 800142c:	2200      	movs	r2, #0
 800142e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <MX_ADC1_Init+0x74>)
 8001432:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001436:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001438:	4b10      	ldr	r3, [pc, #64]	; (800147c <MX_ADC1_Init+0x74>)
 800143a:	2200      	movs	r2, #0
 800143c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800143e:	4b0f      	ldr	r3, [pc, #60]	; (800147c <MX_ADC1_Init+0x74>)
 8001440:	2201      	movs	r2, #1
 8001442:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001444:	480d      	ldr	r0, [pc, #52]	; (800147c <MX_ADC1_Init+0x74>)
 8001446:	f000 fb69 	bl	8001b1c <HAL_ADC_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001450:	f000 f8d0 	bl	80015f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001454:	2303      	movs	r3, #3
 8001456:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001458:	2301      	movs	r3, #1
 800145a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	4619      	mov	r1, r3
 8001464:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_ADC1_Init+0x74>)
 8001466:	f000 fec3 	bl	80021f0 <HAL_ADC_ConfigChannel>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001470:	f000 f8c0 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001474:	bf00      	nop
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000204 	.word	0x20000204
 8001480:	40012400 	.word	0x40012400

08001484 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001494:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <MX_ADC2_Init+0x74>)
 8001496:	4a19      	ldr	r2, [pc, #100]	; (80014fc <MX_ADC2_Init+0x78>)
 8001498:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800149a:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <MX_ADC2_Init+0x74>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80014a0:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <MX_ADC2_Init+0x74>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80014a6:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <MX_ADC2_Init+0x74>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <MX_ADC2_Init+0x74>)
 80014ae:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80014b2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014b4:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <MX_ADC2_Init+0x74>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80014ba:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <MX_ADC2_Init+0x74>)
 80014bc:	2201      	movs	r2, #1
 80014be:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80014c0:	480d      	ldr	r0, [pc, #52]	; (80014f8 <MX_ADC2_Init+0x74>)
 80014c2:	f000 fb2b 	bl	8001b1c <HAL_ADC_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80014cc:	f000 f892 	bl	80015f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80014d0:	2304      	movs	r3, #4
 80014d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014d4:	2301      	movs	r3, #1
 80014d6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014d8:	2300      	movs	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	4619      	mov	r1, r3
 80014e0:	4805      	ldr	r0, [pc, #20]	; (80014f8 <MX_ADC2_Init+0x74>)
 80014e2:	f000 fe85 	bl	80021f0 <HAL_ADC_ConfigChannel>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80014ec:	f000 f882 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80014f0:	bf00      	nop
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000234 	.word	0x20000234
 80014fc:	40012800 	.word	0x40012800

08001500 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <MX_I2C1_Init+0x50>)
 8001506:	4a13      	ldr	r2, [pc, #76]	; (8001554 <MX_I2C1_Init+0x54>)
 8001508:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800150a:	4b11      	ldr	r3, [pc, #68]	; (8001550 <MX_I2C1_Init+0x50>)
 800150c:	4a12      	ldr	r2, [pc, #72]	; (8001558 <MX_I2C1_Init+0x58>)
 800150e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001510:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <MX_I2C1_Init+0x50>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001516:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <MX_I2C1_Init+0x50>)
 8001518:	2200      	movs	r2, #0
 800151a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <MX_I2C1_Init+0x50>)
 800151e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001522:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <MX_I2C1_Init+0x50>)
 8001526:	2200      	movs	r2, #0
 8001528:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <MX_I2C1_Init+0x50>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <MX_I2C1_Init+0x50>)
 8001532:	2200      	movs	r2, #0
 8001534:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <MX_I2C1_Init+0x50>)
 8001538:	2200      	movs	r2, #0
 800153a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800153c:	4804      	ldr	r0, [pc, #16]	; (8001550 <MX_I2C1_Init+0x50>)
 800153e:	f001 fb4d 	bl	8002bdc <HAL_I2C_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001548:	f000 f854 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000264 	.word	0x20000264
 8001554:	40005400 	.word	0x40005400
 8001558:	000186a0 	.word	0x000186a0

0800155c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001562:	f107 0310 	add.w	r3, r7, #16
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001570:	4b1e      	ldr	r3, [pc, #120]	; (80015ec <MX_GPIO_Init+0x90>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	4a1d      	ldr	r2, [pc, #116]	; (80015ec <MX_GPIO_Init+0x90>)
 8001576:	f043 0320 	orr.w	r3, r3, #32
 800157a:	6193      	str	r3, [r2, #24]
 800157c:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <MX_GPIO_Init+0x90>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	f003 0320 	and.w	r3, r3, #32
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001588:	4b18      	ldr	r3, [pc, #96]	; (80015ec <MX_GPIO_Init+0x90>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	4a17      	ldr	r2, [pc, #92]	; (80015ec <MX_GPIO_Init+0x90>)
 800158e:	f043 0304 	orr.w	r3, r3, #4
 8001592:	6193      	str	r3, [r2, #24]
 8001594:	4b15      	ldr	r3, [pc, #84]	; (80015ec <MX_GPIO_Init+0x90>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <MX_GPIO_Init+0x90>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4a11      	ldr	r2, [pc, #68]	; (80015ec <MX_GPIO_Init+0x90>)
 80015a6:	f043 0308 	orr.w	r3, r3, #8
 80015aa:	6193      	str	r3, [r2, #24]
 80015ac:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <MX_GPIO_Init+0x90>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f003 0308 	and.w	r3, r3, #8
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80015b8:	2200      	movs	r2, #0
 80015ba:	f44f 7140 	mov.w	r1, #768	; 0x300
 80015be:	480c      	ldr	r0, [pc, #48]	; (80015f0 <MX_GPIO_Init+0x94>)
 80015c0:	f001 faf4 	bl	8002bac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2302      	movs	r3, #2
 80015d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d6:	f107 0310 	add.w	r3, r7, #16
 80015da:	4619      	mov	r1, r3
 80015dc:	4804      	ldr	r0, [pc, #16]	; (80015f0 <MX_GPIO_Init+0x94>)
 80015de:	f001 f961 	bl	80028a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015e2:	bf00      	nop
 80015e4:	3720      	adds	r7, #32
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40010c00 	.word	0x40010c00

080015f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f8:	b672      	cpsid	i
}
 80015fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015fc:	e7fe      	b.n	80015fc <Error_Handler+0x8>
	...

08001600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <HAL_MspInit+0x5c>)
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	4a14      	ldr	r2, [pc, #80]	; (800165c <HAL_MspInit+0x5c>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6193      	str	r3, [r2, #24]
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_MspInit+0x5c>)
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161e:	4b0f      	ldr	r3, [pc, #60]	; (800165c <HAL_MspInit+0x5c>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	4a0e      	ldr	r2, [pc, #56]	; (800165c <HAL_MspInit+0x5c>)
 8001624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001628:	61d3      	str	r3, [r2, #28]
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <HAL_MspInit+0x5c>)
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001636:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <HAL_MspInit+0x60>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	4a04      	ldr	r2, [pc, #16]	; (8001660 <HAL_MspInit+0x60>)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001652:	bf00      	nop
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	40021000 	.word	0x40021000
 8001660:	40010000 	.word	0x40010000

08001664 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08a      	sub	sp, #40	; 0x28
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 0318 	add.w	r3, r7, #24
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a30      	ldr	r2, [pc, #192]	; (8001740 <HAL_ADC_MspInit+0xdc>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d12a      	bne.n	80016da <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001684:	4b2f      	ldr	r3, [pc, #188]	; (8001744 <HAL_ADC_MspInit+0xe0>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	4a2e      	ldr	r2, [pc, #184]	; (8001744 <HAL_ADC_MspInit+0xe0>)
 800168a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800168e:	6193      	str	r3, [r2, #24]
 8001690:	4b2c      	ldr	r3, [pc, #176]	; (8001744 <HAL_ADC_MspInit+0xe0>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169c:	4b29      	ldr	r3, [pc, #164]	; (8001744 <HAL_ADC_MspInit+0xe0>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	4a28      	ldr	r2, [pc, #160]	; (8001744 <HAL_ADC_MspInit+0xe0>)
 80016a2:	f043 0304 	orr.w	r3, r3, #4
 80016a6:	6193      	str	r3, [r2, #24]
 80016a8:	4b26      	ldr	r3, [pc, #152]	; (8001744 <HAL_ADC_MspInit+0xe0>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016b4:	2308      	movs	r3, #8
 80016b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016b8:	2303      	movs	r3, #3
 80016ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016bc:	f107 0318 	add.w	r3, r7, #24
 80016c0:	4619      	mov	r1, r3
 80016c2:	4821      	ldr	r0, [pc, #132]	; (8001748 <HAL_ADC_MspInit+0xe4>)
 80016c4:	f001 f8ee 	bl	80028a4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80016c8:	2200      	movs	r2, #0
 80016ca:	2100      	movs	r1, #0
 80016cc:	2012      	movs	r0, #18
 80016ce:	f001 f8b2 	bl	8002836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80016d2:	2012      	movs	r0, #18
 80016d4:	f001 f8cb 	bl	800286e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80016d8:	e02e      	b.n	8001738 <HAL_ADC_MspInit+0xd4>
  else if(hadc->Instance==ADC2)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a1b      	ldr	r2, [pc, #108]	; (800174c <HAL_ADC_MspInit+0xe8>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d129      	bne.n	8001738 <HAL_ADC_MspInit+0xd4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80016e4:	4b17      	ldr	r3, [pc, #92]	; (8001744 <HAL_ADC_MspInit+0xe0>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	4a16      	ldr	r2, [pc, #88]	; (8001744 <HAL_ADC_MspInit+0xe0>)
 80016ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ee:	6193      	str	r3, [r2, #24]
 80016f0:	4b14      	ldr	r3, [pc, #80]	; (8001744 <HAL_ADC_MspInit+0xe0>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <HAL_ADC_MspInit+0xe0>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	4a10      	ldr	r2, [pc, #64]	; (8001744 <HAL_ADC_MspInit+0xe0>)
 8001702:	f043 0304 	orr.w	r3, r3, #4
 8001706:	6193      	str	r3, [r2, #24]
 8001708:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <HAL_ADC_MspInit+0xe0>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001714:	2310      	movs	r3, #16
 8001716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001718:	2303      	movs	r3, #3
 800171a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171c:	f107 0318 	add.w	r3, r7, #24
 8001720:	4619      	mov	r1, r3
 8001722:	4809      	ldr	r0, [pc, #36]	; (8001748 <HAL_ADC_MspInit+0xe4>)
 8001724:	f001 f8be 	bl	80028a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001728:	2200      	movs	r2, #0
 800172a:	2100      	movs	r1, #0
 800172c:	2012      	movs	r0, #18
 800172e:	f001 f882 	bl	8002836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001732:	2012      	movs	r0, #18
 8001734:	f001 f89b 	bl	800286e <HAL_NVIC_EnableIRQ>
}
 8001738:	bf00      	nop
 800173a:	3728      	adds	r7, #40	; 0x28
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40012400 	.word	0x40012400
 8001744:	40021000 	.word	0x40021000
 8001748:	40010800 	.word	0x40010800
 800174c:	40012800 	.word	0x40012800

08001750 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 0310 	add.w	r3, r7, #16
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a15      	ldr	r2, [pc, #84]	; (80017c0 <HAL_I2C_MspInit+0x70>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d123      	bne.n	80017b8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001770:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <HAL_I2C_MspInit+0x74>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	4a13      	ldr	r2, [pc, #76]	; (80017c4 <HAL_I2C_MspInit+0x74>)
 8001776:	f043 0308 	orr.w	r3, r3, #8
 800177a:	6193      	str	r3, [r2, #24]
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <HAL_I2C_MspInit+0x74>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f003 0308 	and.w	r3, r3, #8
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001788:	23c0      	movs	r3, #192	; 0xc0
 800178a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800178c:	2312      	movs	r3, #18
 800178e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001790:	2303      	movs	r3, #3
 8001792:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001794:	f107 0310 	add.w	r3, r7, #16
 8001798:	4619      	mov	r1, r3
 800179a:	480b      	ldr	r0, [pc, #44]	; (80017c8 <HAL_I2C_MspInit+0x78>)
 800179c:	f001 f882 	bl	80028a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <HAL_I2C_MspInit+0x74>)
 80017a2:	69db      	ldr	r3, [r3, #28]
 80017a4:	4a07      	ldr	r2, [pc, #28]	; (80017c4 <HAL_I2C_MspInit+0x74>)
 80017a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017aa:	61d3      	str	r3, [r2, #28]
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <HAL_I2C_MspInit+0x74>)
 80017ae:	69db      	ldr	r3, [r3, #28]
 80017b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017b8:	bf00      	nop
 80017ba:	3720      	adds	r7, #32
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40005400 	.word	0x40005400
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40010c00 	.word	0x40010c00

080017cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <NMI_Handler+0x4>

080017d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d6:	e7fe      	b.n	80017d6 <HardFault_Handler+0x4>

080017d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <MemManage_Handler+0x4>

080017de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e2:	e7fe      	b.n	80017e2 <BusFault_Handler+0x4>

080017e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <UsageFault_Handler+0x4>

080017ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr

080017f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr

08001802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr

0800180e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001812:	f000 f943 	bl	8001a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001820:	4803      	ldr	r0, [pc, #12]	; (8001830 <ADC1_2_IRQHandler+0x14>)
 8001822:	f000 fc13 	bl	800204c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001826:	4803      	ldr	r0, [pc, #12]	; (8001834 <ADC1_2_IRQHandler+0x18>)
 8001828:	f000 fc10 	bl	800204c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000204 	.word	0x20000204
 8001834:	20000234 	.word	0x20000234

08001838 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return 1;
 800183c:	2301      	movs	r3, #1
}
 800183e:	4618      	mov	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr

08001846 <_kill>:

int _kill(int pid, int sig)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
 800184e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001850:	f003 fbae 	bl	8004fb0 <__errno>
 8001854:	4603      	mov	r3, r0
 8001856:	2216      	movs	r2, #22
 8001858:	601a      	str	r2, [r3, #0]
  return -1;
 800185a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <_exit>:

void _exit (int status)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800186e:	f04f 31ff 	mov.w	r1, #4294967295
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff ffe7 	bl	8001846 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001878:	e7fe      	b.n	8001878 <_exit+0x12>

0800187a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af00      	add	r7, sp, #0
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	e00a      	b.n	80018a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800188c:	f3af 8000 	nop.w
 8001890:	4601      	mov	r1, r0
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	1c5a      	adds	r2, r3, #1
 8001896:	60ba      	str	r2, [r7, #8]
 8001898:	b2ca      	uxtb	r2, r1
 800189a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	3301      	adds	r3, #1
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	dbf0      	blt.n	800188c <_read+0x12>
  }

  return len;
 80018aa:	687b      	ldr	r3, [r7, #4]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	e009      	b.n	80018da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	60ba      	str	r2, [r7, #8]
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	3301      	adds	r3, #1
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	429a      	cmp	r2, r3
 80018e0:	dbf1      	blt.n	80018c6 <_write+0x12>
  }
  return len;
 80018e2:	687b      	ldr	r3, [r7, #4]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <_close>:

int _close(int file)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr

08001902 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001912:	605a      	str	r2, [r3, #4]
  return 0;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr

08001920 <_isatty>:

int _isatty(int file)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001928:	2301      	movs	r3, #1
}
 800192a:	4618      	mov	r0, r3
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr

08001934 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr

0800194c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001954:	4a14      	ldr	r2, [pc, #80]	; (80019a8 <_sbrk+0x5c>)
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <_sbrk+0x60>)
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001960:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <_sbrk+0x64>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d102      	bne.n	800196e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001968:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <_sbrk+0x64>)
 800196a:	4a12      	ldr	r2, [pc, #72]	; (80019b4 <_sbrk+0x68>)
 800196c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <_sbrk+0x64>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4413      	add	r3, r2
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	429a      	cmp	r2, r3
 800197a:	d207      	bcs.n	800198c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800197c:	f003 fb18 	bl	8004fb0 <__errno>
 8001980:	4603      	mov	r3, r0
 8001982:	220c      	movs	r2, #12
 8001984:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001986:	f04f 33ff 	mov.w	r3, #4294967295
 800198a:	e009      	b.n	80019a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800198c:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <_sbrk+0x64>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001992:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <_sbrk+0x64>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	4a05      	ldr	r2, [pc, #20]	; (80019b0 <_sbrk+0x64>)
 800199c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800199e:	68fb      	ldr	r3, [r7, #12]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20005000 	.word	0x20005000
 80019ac:	00000400 	.word	0x00000400
 80019b0:	200002d0 	.word	0x200002d0
 80019b4:	20000428 	.word	0x20000428

080019b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019c4:	f7ff fff8 	bl	80019b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019c8:	480b      	ldr	r0, [pc, #44]	; (80019f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019ca:	490c      	ldr	r1, [pc, #48]	; (80019fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019cc:	4a0c      	ldr	r2, [pc, #48]	; (8001a00 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d0:	e002      	b.n	80019d8 <LoopCopyDataInit>

080019d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d6:	3304      	adds	r3, #4

080019d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019dc:	d3f9      	bcc.n	80019d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019de:	4a09      	ldr	r2, [pc, #36]	; (8001a04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019e0:	4c09      	ldr	r4, [pc, #36]	; (8001a08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e4:	e001      	b.n	80019ea <LoopFillZerobss>

080019e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e8:	3204      	adds	r2, #4

080019ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ec:	d3fb      	bcc.n	80019e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ee:	f003 fae5 	bl	8004fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019f2:	f7ff fb7d 	bl	80010f0 <main>
  bx lr
 80019f6:	4770      	bx	lr
  ldr r0, =_sdata
 80019f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019fc:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001a00:	08009e20 	.word	0x08009e20
  ldr r2, =_sbss
 8001a04:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001a08:	20000424 	.word	0x20000424

08001a0c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a0c:	e7fe      	b.n	8001a0c <CAN1_RX1_IRQHandler>
	...

08001a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <HAL_Init+0x28>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a07      	ldr	r2, [pc, #28]	; (8001a38 <HAL_Init+0x28>)
 8001a1a:	f043 0310 	orr.w	r3, r3, #16
 8001a1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a20:	2003      	movs	r0, #3
 8001a22:	f000 fefd 	bl	8002820 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a26:	200f      	movs	r0, #15
 8001a28:	f000 f808 	bl	8001a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a2c:	f7ff fde8 	bl	8001600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40022000 	.word	0x40022000

08001a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a44:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_InitTick+0x54>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <HAL_InitTick+0x58>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 ff15 	bl	800288a <HAL_SYSTICK_Config>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e00e      	b.n	8001a88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b0f      	cmp	r3, #15
 8001a6e:	d80a      	bhi.n	8001a86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a70:	2200      	movs	r2, #0
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	f04f 30ff 	mov.w	r0, #4294967295
 8001a78:	f000 fedd 	bl	8002836 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a7c:	4a06      	ldr	r2, [pc, #24]	; (8001a98 <HAL_InitTick+0x5c>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	e000      	b.n	8001a88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000000 	.word	0x20000000
 8001a94:	20000008 	.word	0x20000008
 8001a98:	20000004 	.word	0x20000004

08001a9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_IncTick+0x1c>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b05      	ldr	r3, [pc, #20]	; (8001abc <HAL_IncTick+0x20>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4413      	add	r3, r2
 8001aac:	4a03      	ldr	r2, [pc, #12]	; (8001abc <HAL_IncTick+0x20>)
 8001aae:	6013      	str	r3, [r2, #0]
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr
 8001ab8:	20000008 	.word	0x20000008
 8001abc:	200002d4 	.word	0x200002d4

08001ac0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac4:	4b02      	ldr	r3, [pc, #8]	; (8001ad0 <HAL_GetTick+0x10>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	200002d4 	.word	0x200002d4

08001ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001adc:	f7ff fff0 	bl	8001ac0 <HAL_GetTick>
 8001ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aec:	d005      	beq.n	8001afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aee:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <HAL_Delay+0x44>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	461a      	mov	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4413      	add	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001afa:	bf00      	nop
 8001afc:	f7ff ffe0 	bl	8001ac0 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d8f7      	bhi.n	8001afc <HAL_Delay+0x28>
  {
  }
}
 8001b0c:	bf00      	nop
 8001b0e:	bf00      	nop
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000008 	.word	0x20000008

08001b1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b24:	2300      	movs	r3, #0
 8001b26:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e0be      	b.n	8001cbc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d109      	bne.n	8001b60 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff fd82 	bl	8001664 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 fc97 	bl	8002494 <ADC_ConversionStop_Disable>
 8001b66:	4603      	mov	r3, r0
 8001b68:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6e:	f003 0310 	and.w	r3, r3, #16
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f040 8099 	bne.w	8001caa <HAL_ADC_Init+0x18e>
 8001b78:	7dfb      	ldrb	r3, [r7, #23]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f040 8095 	bne.w	8001caa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b84:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b88:	f023 0302 	bic.w	r3, r3, #2
 8001b8c:	f043 0202 	orr.w	r2, r3, #2
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b9c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	7b1b      	ldrb	r3, [r3, #12]
 8001ba2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ba4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bb4:	d003      	beq.n	8001bbe <HAL_ADC_Init+0xa2>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d102      	bne.n	8001bc4 <HAL_ADC_Init+0xa8>
 8001bbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bc2:	e000      	b.n	8001bc6 <HAL_ADC_Init+0xaa>
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	7d1b      	ldrb	r3, [r3, #20]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d119      	bne.n	8001c08 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	7b1b      	ldrb	r3, [r3, #12]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d109      	bne.n	8001bf0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	035a      	lsls	r2, r3, #13
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	e00b      	b.n	8001c08 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf4:	f043 0220 	orr.w	r2, r3, #32
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c00:	f043 0201 	orr.w	r2, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	4b28      	ldr	r3, [pc, #160]	; (8001cc4 <HAL_ADC_Init+0x1a8>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	6812      	ldr	r2, [r2, #0]
 8001c2a:	68b9      	ldr	r1, [r7, #8]
 8001c2c:	430b      	orrs	r3, r1
 8001c2e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c38:	d003      	beq.n	8001c42 <HAL_ADC_Init+0x126>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d104      	bne.n	8001c4c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	051b      	lsls	r3, r3, #20
 8001c4a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c52:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	4b18      	ldr	r3, [pc, #96]	; (8001cc8 <HAL_ADC_Init+0x1ac>)
 8001c68:	4013      	ands	r3, r2
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d10b      	bne.n	8001c88 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7a:	f023 0303 	bic.w	r3, r3, #3
 8001c7e:	f043 0201 	orr.w	r2, r3, #1
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c86:	e018      	b.n	8001cba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8c:	f023 0312 	bic.w	r3, r3, #18
 8001c90:	f043 0210 	orr.w	r2, r3, #16
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9c:	f043 0201 	orr.w	r2, r3, #1
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ca8:	e007      	b.n	8001cba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cae:	f043 0210 	orr.w	r2, r3, #16
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	ffe1f7fd 	.word	0xffe1f7fd
 8001cc8:	ff1f0efe 	.word	0xff1f0efe

08001ccc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d101      	bne.n	8001ce6 <HAL_ADC_Start+0x1a>
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	e098      	b.n	8001e18 <HAL_ADC_Start+0x14c>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 fb76 	bl	80023e0 <ADC_Enable>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f040 8087 	bne.w	8001e0e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d08:	f023 0301 	bic.w	r3, r3, #1
 8001d0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a41      	ldr	r2, [pc, #260]	; (8001e20 <HAL_ADC_Start+0x154>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d105      	bne.n	8001d2a <HAL_ADC_Start+0x5e>
 8001d1e:	4b41      	ldr	r3, [pc, #260]	; (8001e24 <HAL_ADC_Start+0x158>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d115      	bne.n	8001d56 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d026      	beq.n	8001d92 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d4c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d54:	e01d      	b.n	8001d92 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a2f      	ldr	r2, [pc, #188]	; (8001e24 <HAL_ADC_Start+0x158>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d004      	beq.n	8001d76 <HAL_ADC_Start+0xaa>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a2b      	ldr	r2, [pc, #172]	; (8001e20 <HAL_ADC_Start+0x154>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d10d      	bne.n	8001d92 <HAL_ADC_Start+0xc6>
 8001d76:	4b2b      	ldr	r3, [pc, #172]	; (8001e24 <HAL_ADC_Start+0x158>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d007      	beq.n	8001d92 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d8a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d006      	beq.n	8001dac <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da2:	f023 0206 	bic.w	r2, r3, #6
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001daa:	e002      	b.n	8001db2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f06f 0202 	mvn.w	r2, #2
 8001dc2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001dce:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001dd2:	d113      	bne.n	8001dfc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001dd8:	4a11      	ldr	r2, [pc, #68]	; (8001e20 <HAL_ADC_Start+0x154>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d105      	bne.n	8001dea <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <HAL_ADC_Start+0x158>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d108      	bne.n	8001dfc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001df8:	609a      	str	r2, [r3, #8]
 8001dfa:	e00c      	b.n	8001e16 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689a      	ldr	r2, [r3, #8]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	e003      	b.n	8001e16 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40012800 	.word	0x40012800
 8001e24:	40012400 	.word	0x40012400

08001e28 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e28:	b590      	push	{r4, r7, lr}
 8001e2a:	b087      	sub	sp, #28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001e3e:	f7ff fe3f 	bl	8001ac0 <HAL_GetTick>
 8001e42:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00b      	beq.n	8001e6a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e56:	f043 0220 	orr.w	r2, r3, #32
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e0d3      	b.n	8002012 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d131      	bne.n	8001edc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d12a      	bne.n	8001edc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e86:	e021      	b.n	8001ecc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e8e:	d01d      	beq.n	8001ecc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d007      	beq.n	8001ea6 <HAL_ADC_PollForConversion+0x7e>
 8001e96:	f7ff fe13 	bl	8001ac0 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d212      	bcs.n	8001ecc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10b      	bne.n	8001ecc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb8:	f043 0204 	orr.w	r2, r3, #4
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e0a2      	b.n	8002012 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0d6      	beq.n	8001e88 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001eda:	e070      	b.n	8001fbe <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001edc:	4b4f      	ldr	r3, [pc, #316]	; (800201c <HAL_ADC_PollForConversion+0x1f4>)
 8001ede:	681c      	ldr	r4, [r3, #0]
 8001ee0:	2002      	movs	r0, #2
 8001ee2:	f001 ffdd 	bl	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6919      	ldr	r1, [r3, #16]
 8001ef2:	4b4b      	ldr	r3, [pc, #300]	; (8002020 <HAL_ADC_PollForConversion+0x1f8>)
 8001ef4:	400b      	ands	r3, r1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d118      	bne.n	8001f2c <HAL_ADC_PollForConversion+0x104>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68d9      	ldr	r1, [r3, #12]
 8001f00:	4b48      	ldr	r3, [pc, #288]	; (8002024 <HAL_ADC_PollForConversion+0x1fc>)
 8001f02:	400b      	ands	r3, r1
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d111      	bne.n	8001f2c <HAL_ADC_PollForConversion+0x104>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6919      	ldr	r1, [r3, #16]
 8001f0e:	4b46      	ldr	r3, [pc, #280]	; (8002028 <HAL_ADC_PollForConversion+0x200>)
 8001f10:	400b      	ands	r3, r1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d108      	bne.n	8001f28 <HAL_ADC_PollForConversion+0x100>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68d9      	ldr	r1, [r3, #12]
 8001f1c:	4b43      	ldr	r3, [pc, #268]	; (800202c <HAL_ADC_PollForConversion+0x204>)
 8001f1e:	400b      	ands	r3, r1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_ADC_PollForConversion+0x100>
 8001f24:	2314      	movs	r3, #20
 8001f26:	e020      	b.n	8001f6a <HAL_ADC_PollForConversion+0x142>
 8001f28:	2329      	movs	r3, #41	; 0x29
 8001f2a:	e01e      	b.n	8001f6a <HAL_ADC_PollForConversion+0x142>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6919      	ldr	r1, [r3, #16]
 8001f32:	4b3d      	ldr	r3, [pc, #244]	; (8002028 <HAL_ADC_PollForConversion+0x200>)
 8001f34:	400b      	ands	r3, r1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d106      	bne.n	8001f48 <HAL_ADC_PollForConversion+0x120>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68d9      	ldr	r1, [r3, #12]
 8001f40:	4b3a      	ldr	r3, [pc, #232]	; (800202c <HAL_ADC_PollForConversion+0x204>)
 8001f42:	400b      	ands	r3, r1
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00d      	beq.n	8001f64 <HAL_ADC_PollForConversion+0x13c>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6919      	ldr	r1, [r3, #16]
 8001f4e:	4b38      	ldr	r3, [pc, #224]	; (8002030 <HAL_ADC_PollForConversion+0x208>)
 8001f50:	400b      	ands	r3, r1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d108      	bne.n	8001f68 <HAL_ADC_PollForConversion+0x140>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68d9      	ldr	r1, [r3, #12]
 8001f5c:	4b34      	ldr	r3, [pc, #208]	; (8002030 <HAL_ADC_PollForConversion+0x208>)
 8001f5e:	400b      	ands	r3, r1
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <HAL_ADC_PollForConversion+0x140>
 8001f64:	2354      	movs	r3, #84	; 0x54
 8001f66:	e000      	b.n	8001f6a <HAL_ADC_PollForConversion+0x142>
 8001f68:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001f6a:	fb02 f303 	mul.w	r3, r2, r3
 8001f6e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001f70:	e021      	b.n	8001fb6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f78:	d01a      	beq.n	8001fb0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d007      	beq.n	8001f90 <HAL_ADC_PollForConversion+0x168>
 8001f80:	f7ff fd9e 	bl	8001ac0 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d20f      	bcs.n	8001fb0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d90b      	bls.n	8001fb0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9c:	f043 0204 	orr.w	r2, r3, #4
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e030      	b.n	8002012 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d8d9      	bhi.n	8001f72 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f06f 0212 	mvn.w	r2, #18
 8001fc6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fcc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001fde:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001fe2:	d115      	bne.n	8002010 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d111      	bne.n	8002010 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d105      	bne.n	8002010 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002008:	f043 0201 	orr.w	r2, r3, #1
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	371c      	adds	r7, #28
 8002016:	46bd      	mov	sp, r7
 8002018:	bd90      	pop	{r4, r7, pc}
 800201a:	bf00      	nop
 800201c:	20000000 	.word	0x20000000
 8002020:	24924924 	.word	0x24924924
 8002024:	00924924 	.word	0x00924924
 8002028:	12492492 	.word	0x12492492
 800202c:	00492492 	.word	0x00492492
 8002030:	00249249 	.word	0x00249249

08002034 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002042:	4618      	mov	r0, r3
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	f003 0320 	and.w	r3, r3, #32
 800206a:	2b00      	cmp	r3, #0
 800206c:	d03e      	beq.n	80020ec <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d039      	beq.n	80020ec <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207c:	f003 0310 	and.w	r3, r3, #16
 8002080:	2b00      	cmp	r3, #0
 8002082:	d105      	bne.n	8002090 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002088:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800209a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800209e:	d11d      	bne.n	80020dc <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d119      	bne.n	80020dc <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0220 	bic.w	r2, r2, #32
 80020b6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d105      	bne.n	80020dc <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d4:	f043 0201 	orr.w	r2, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f874 	bl	80021ca <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f06f 0212 	mvn.w	r2, #18
 80020ea:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d04d      	beq.n	8002192 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d048      	beq.n	8002192 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002104:	f003 0310 	and.w	r3, r3, #16
 8002108:	2b00      	cmp	r3, #0
 800210a:	d105      	bne.n	8002118 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002110:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002122:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002126:	d012      	beq.n	800214e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002132:	2b00      	cmp	r3, #0
 8002134:	d125      	bne.n	8002182 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002140:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002144:	d11d      	bne.n	8002182 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800214a:	2b00      	cmp	r3, #0
 800214c:	d119      	bne.n	8002182 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800215c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002162:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002172:	2b00      	cmp	r3, #0
 8002174:	d105      	bne.n	8002182 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217a:	f043 0201 	orr.w	r2, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 fa76 	bl	8002674 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f06f 020c 	mvn.w	r2, #12
 8002190:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002198:	2b00      	cmp	r3, #0
 800219a:	d012      	beq.n	80021c2 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00d      	beq.n	80021c2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f812 	bl	80021dc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f06f 0201 	mvn.w	r2, #1
 80021c0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80021c2:	bf00      	nop
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr

080021dc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr
	...

080021f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021fa:	2300      	movs	r3, #0
 80021fc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x20>
 800220c:	2302      	movs	r3, #2
 800220e:	e0dc      	b.n	80023ca <HAL_ADC_ConfigChannel+0x1da>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b06      	cmp	r3, #6
 800221e:	d81c      	bhi.n	800225a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	3b05      	subs	r3, #5
 8002232:	221f      	movs	r2, #31
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	4019      	ands	r1, r3
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	3b05      	subs	r3, #5
 800224c:	fa00 f203 	lsl.w	r2, r0, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	635a      	str	r2, [r3, #52]	; 0x34
 8002258:	e03c      	b.n	80022d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b0c      	cmp	r3, #12
 8002260:	d81c      	bhi.n	800229c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	3b23      	subs	r3, #35	; 0x23
 8002274:	221f      	movs	r2, #31
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	4019      	ands	r1, r3
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	6818      	ldr	r0, [r3, #0]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	3b23      	subs	r3, #35	; 0x23
 800228e:	fa00 f203 	lsl.w	r2, r0, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	631a      	str	r2, [r3, #48]	; 0x30
 800229a:	e01b      	b.n	80022d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	3b41      	subs	r3, #65	; 0x41
 80022ae:	221f      	movs	r2, #31
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	4019      	ands	r1, r3
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	6818      	ldr	r0, [r3, #0]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	3b41      	subs	r3, #65	; 0x41
 80022c8:	fa00 f203 	lsl.w	r2, r0, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b09      	cmp	r3, #9
 80022da:	d91c      	bls.n	8002316 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68d9      	ldr	r1, [r3, #12]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	4613      	mov	r3, r2
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	4413      	add	r3, r2
 80022ec:	3b1e      	subs	r3, #30
 80022ee:	2207      	movs	r2, #7
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	4019      	ands	r1, r3
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	6898      	ldr	r0, [r3, #8]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4613      	mov	r3, r2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	4413      	add	r3, r2
 8002306:	3b1e      	subs	r3, #30
 8002308:	fa00 f203 	lsl.w	r2, r0, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	60da      	str	r2, [r3, #12]
 8002314:	e019      	b.n	800234a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6919      	ldr	r1, [r3, #16]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	4613      	mov	r3, r2
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	4413      	add	r3, r2
 8002326:	2207      	movs	r2, #7
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	4019      	ands	r1, r3
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	6898      	ldr	r0, [r3, #8]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	4613      	mov	r3, r2
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	4413      	add	r3, r2
 800233e:	fa00 f203 	lsl.w	r2, r0, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2b10      	cmp	r3, #16
 8002350:	d003      	beq.n	800235a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002356:	2b11      	cmp	r3, #17
 8002358:	d132      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a1d      	ldr	r2, [pc, #116]	; (80023d4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d125      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d126      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002380:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b10      	cmp	r3, #16
 8002388:	d11a      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800238a:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <HAL_ADC_ConfigChannel+0x1e8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a13      	ldr	r2, [pc, #76]	; (80023dc <HAL_ADC_ConfigChannel+0x1ec>)
 8002390:	fba2 2303 	umull	r2, r3, r2, r3
 8002394:	0c9a      	lsrs	r2, r3, #18
 8002396:	4613      	mov	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023a0:	e002      	b.n	80023a8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	3b01      	subs	r3, #1
 80023a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f9      	bne.n	80023a2 <HAL_ADC_ConfigChannel+0x1b2>
 80023ae:	e007      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b4:	f043 0220 	orr.w	r2, r3, #32
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr
 80023d4:	40012400 	.word	0x40012400
 80023d8:	20000000 	.word	0x20000000
 80023dc:	431bde83 	.word	0x431bde83

080023e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d040      	beq.n	8002480 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f042 0201 	orr.w	r2, r2, #1
 800240c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800240e:	4b1f      	ldr	r3, [pc, #124]	; (800248c <ADC_Enable+0xac>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a1f      	ldr	r2, [pc, #124]	; (8002490 <ADC_Enable+0xb0>)
 8002414:	fba2 2303 	umull	r2, r3, r2, r3
 8002418:	0c9b      	lsrs	r3, r3, #18
 800241a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800241c:	e002      	b.n	8002424 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	3b01      	subs	r3, #1
 8002422:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f9      	bne.n	800241e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800242a:	f7ff fb49 	bl	8001ac0 <HAL_GetTick>
 800242e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002430:	e01f      	b.n	8002472 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002432:	f7ff fb45 	bl	8001ac0 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d918      	bls.n	8002472 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b01      	cmp	r3, #1
 800244c:	d011      	beq.n	8002472 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002452:	f043 0210 	orr.w	r2, r3, #16
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245e:	f043 0201 	orr.w	r2, r3, #1
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e007      	b.n	8002482 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b01      	cmp	r3, #1
 800247e:	d1d8      	bne.n	8002432 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000000 	.word	0x20000000
 8002490:	431bde83 	.word	0x431bde83

08002494 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d12e      	bne.n	800250c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0201 	bic.w	r2, r2, #1
 80024bc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024be:	f7ff faff 	bl	8001ac0 <HAL_GetTick>
 80024c2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024c4:	e01b      	b.n	80024fe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024c6:	f7ff fafb 	bl	8001ac0 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d914      	bls.n	80024fe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d10d      	bne.n	80024fe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e6:	f043 0210 	orr.w	r2, r3, #16
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f2:	f043 0201 	orr.w	r2, r3, #1
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e007      	b.n	800250e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b01      	cmp	r3, #1
 800250a:	d0dc      	beq.n	80024c6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002518:	b590      	push	{r4, r7, lr}
 800251a:	b087      	sub	sp, #28
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800252e:	2b01      	cmp	r3, #1
 8002530:	d101      	bne.n	8002536 <HAL_ADCEx_Calibration_Start+0x1e>
 8002532:	2302      	movs	r3, #2
 8002534:	e097      	b.n	8002666 <HAL_ADCEx_Calibration_Start+0x14e>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff ffa8 	bl	8002494 <ADC_ConversionStop_Disable>
 8002544:	4603      	mov	r3, r0
 8002546:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff ff49 	bl	80023e0 <ADC_Enable>
 800254e:	4603      	mov	r3, r0
 8002550:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002552:	7dfb      	ldrb	r3, [r7, #23]
 8002554:	2b00      	cmp	r3, #0
 8002556:	f040 8081 	bne.w	800265c <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002562:	f023 0302 	bic.w	r3, r3, #2
 8002566:	f043 0202 	orr.w	r2, r3, #2
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800256e:	4b40      	ldr	r3, [pc, #256]	; (8002670 <HAL_ADCEx_Calibration_Start+0x158>)
 8002570:	681c      	ldr	r4, [r3, #0]
 8002572:	2002      	movs	r0, #2
 8002574:	f001 fc94 	bl	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002578:	4603      	mov	r3, r0
 800257a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800257e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002580:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002582:	e002      	b.n	800258a <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	3b01      	subs	r3, #1
 8002588:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1f9      	bne.n	8002584 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0208 	orr.w	r2, r2, #8
 800259e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80025a0:	f7ff fa8e 	bl	8001ac0 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80025a6:	e01b      	b.n	80025e0 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80025a8:	f7ff fa8a 	bl	8001ac0 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b0a      	cmp	r3, #10
 80025b4:	d914      	bls.n	80025e0 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00d      	beq.n	80025e0 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c8:	f023 0312 	bic.w	r3, r3, #18
 80025cc:	f043 0210 	orr.w	r2, r3, #16
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e042      	b.n	8002666 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1dc      	bne.n	80025a8 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f042 0204 	orr.w	r2, r2, #4
 80025fc:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80025fe:	f7ff fa5f 	bl	8001ac0 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002604:	e01b      	b.n	800263e <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002606:	f7ff fa5b 	bl	8001ac0 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b0a      	cmp	r3, #10
 8002612:	d914      	bls.n	800263e <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00d      	beq.n	800263e <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002626:	f023 0312 	bic.w	r3, r3, #18
 800262a:	f043 0210 	orr.w	r2, r3, #16
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e013      	b.n	8002666 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1dc      	bne.n	8002606 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002650:	f023 0303 	bic.w	r3, r3, #3
 8002654:	f043 0201 	orr.w	r2, r3, #1
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002664:	7dfb      	ldrb	r3, [r7, #23]
}
 8002666:	4618      	mov	r0, r3
 8002668:	371c      	adds	r7, #28
 800266a:	46bd      	mov	sp, r7
 800266c:	bd90      	pop	{r4, r7, pc}
 800266e:	bf00      	nop
 8002670:	20000000 	.word	0x20000000

08002674 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr
	...

08002688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002698:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <__NVIC_SetPriorityGrouping+0x44>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026a4:	4013      	ands	r3, r2
 80026a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ba:	4a04      	ldr	r2, [pc, #16]	; (80026cc <__NVIC_SetPriorityGrouping+0x44>)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	60d3      	str	r3, [r2, #12]
}
 80026c0:	bf00      	nop
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	e000ed00 	.word	0xe000ed00

080026d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026d4:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <__NVIC_GetPriorityGrouping+0x18>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	0a1b      	lsrs	r3, r3, #8
 80026da:	f003 0307 	and.w	r3, r3, #7
}
 80026de:	4618      	mov	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	e000ed00 	.word	0xe000ed00

080026ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	db0b      	blt.n	8002716 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	f003 021f 	and.w	r2, r3, #31
 8002704:	4906      	ldr	r1, [pc, #24]	; (8002720 <__NVIC_EnableIRQ+0x34>)
 8002706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	2001      	movs	r0, #1
 800270e:	fa00 f202 	lsl.w	r2, r0, r2
 8002712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr
 8002720:	e000e100 	.word	0xe000e100

08002724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	6039      	str	r1, [r7, #0]
 800272e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002734:	2b00      	cmp	r3, #0
 8002736:	db0a      	blt.n	800274e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	b2da      	uxtb	r2, r3
 800273c:	490c      	ldr	r1, [pc, #48]	; (8002770 <__NVIC_SetPriority+0x4c>)
 800273e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002742:	0112      	lsls	r2, r2, #4
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	440b      	add	r3, r1
 8002748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800274c:	e00a      	b.n	8002764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	b2da      	uxtb	r2, r3
 8002752:	4908      	ldr	r1, [pc, #32]	; (8002774 <__NVIC_SetPriority+0x50>)
 8002754:	79fb      	ldrb	r3, [r7, #7]
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	3b04      	subs	r3, #4
 800275c:	0112      	lsls	r2, r2, #4
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	440b      	add	r3, r1
 8002762:	761a      	strb	r2, [r3, #24]
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	e000e100 	.word	0xe000e100
 8002774:	e000ed00 	.word	0xe000ed00

08002778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002778:	b480      	push	{r7}
 800277a:	b089      	sub	sp, #36	; 0x24
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f1c3 0307 	rsb	r3, r3, #7
 8002792:	2b04      	cmp	r3, #4
 8002794:	bf28      	it	cs
 8002796:	2304      	movcs	r3, #4
 8002798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	3304      	adds	r3, #4
 800279e:	2b06      	cmp	r3, #6
 80027a0:	d902      	bls.n	80027a8 <NVIC_EncodePriority+0x30>
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	3b03      	subs	r3, #3
 80027a6:	e000      	b.n	80027aa <NVIC_EncodePriority+0x32>
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ac:	f04f 32ff 	mov.w	r2, #4294967295
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43da      	mvns	r2, r3
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	401a      	ands	r2, r3
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027c0:	f04f 31ff 	mov.w	r1, #4294967295
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ca:	43d9      	mvns	r1, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d0:	4313      	orrs	r3, r2
         );
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3724      	adds	r7, #36	; 0x24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027ec:	d301      	bcc.n	80027f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ee:	2301      	movs	r3, #1
 80027f0:	e00f      	b.n	8002812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027f2:	4a0a      	ldr	r2, [pc, #40]	; (800281c <SysTick_Config+0x40>)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027fa:	210f      	movs	r1, #15
 80027fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002800:	f7ff ff90 	bl	8002724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002804:	4b05      	ldr	r3, [pc, #20]	; (800281c <SysTick_Config+0x40>)
 8002806:	2200      	movs	r2, #0
 8002808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800280a:	4b04      	ldr	r3, [pc, #16]	; (800281c <SysTick_Config+0x40>)
 800280c:	2207      	movs	r2, #7
 800280e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	e000e010 	.word	0xe000e010

08002820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff ff2d 	bl	8002688 <__NVIC_SetPriorityGrouping>
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002836:	b580      	push	{r7, lr}
 8002838:	b086      	sub	sp, #24
 800283a:	af00      	add	r7, sp, #0
 800283c:	4603      	mov	r3, r0
 800283e:	60b9      	str	r1, [r7, #8]
 8002840:	607a      	str	r2, [r7, #4]
 8002842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002848:	f7ff ff42 	bl	80026d0 <__NVIC_GetPriorityGrouping>
 800284c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	68b9      	ldr	r1, [r7, #8]
 8002852:	6978      	ldr	r0, [r7, #20]
 8002854:	f7ff ff90 	bl	8002778 <NVIC_EncodePriority>
 8002858:	4602      	mov	r2, r0
 800285a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800285e:	4611      	mov	r1, r2
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff5f 	bl	8002724 <__NVIC_SetPriority>
}
 8002866:	bf00      	nop
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	4603      	mov	r3, r0
 8002876:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff ff35 	bl	80026ec <__NVIC_EnableIRQ>
}
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff ffa2 	bl	80027dc <SysTick_Config>
 8002898:	4603      	mov	r3, r0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
	...

080028a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b08b      	sub	sp, #44	; 0x2c
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028ae:	2300      	movs	r3, #0
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028b2:	2300      	movs	r3, #0
 80028b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028b6:	e169      	b.n	8002b8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028b8:	2201      	movs	r2, #1
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	69fa      	ldr	r2, [r7, #28]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	f040 8158 	bne.w	8002b86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	4a9a      	ldr	r2, [pc, #616]	; (8002b44 <HAL_GPIO_Init+0x2a0>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d05e      	beq.n	800299e <HAL_GPIO_Init+0xfa>
 80028e0:	4a98      	ldr	r2, [pc, #608]	; (8002b44 <HAL_GPIO_Init+0x2a0>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d875      	bhi.n	80029d2 <HAL_GPIO_Init+0x12e>
 80028e6:	4a98      	ldr	r2, [pc, #608]	; (8002b48 <HAL_GPIO_Init+0x2a4>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d058      	beq.n	800299e <HAL_GPIO_Init+0xfa>
 80028ec:	4a96      	ldr	r2, [pc, #600]	; (8002b48 <HAL_GPIO_Init+0x2a4>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d86f      	bhi.n	80029d2 <HAL_GPIO_Init+0x12e>
 80028f2:	4a96      	ldr	r2, [pc, #600]	; (8002b4c <HAL_GPIO_Init+0x2a8>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d052      	beq.n	800299e <HAL_GPIO_Init+0xfa>
 80028f8:	4a94      	ldr	r2, [pc, #592]	; (8002b4c <HAL_GPIO_Init+0x2a8>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d869      	bhi.n	80029d2 <HAL_GPIO_Init+0x12e>
 80028fe:	4a94      	ldr	r2, [pc, #592]	; (8002b50 <HAL_GPIO_Init+0x2ac>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d04c      	beq.n	800299e <HAL_GPIO_Init+0xfa>
 8002904:	4a92      	ldr	r2, [pc, #584]	; (8002b50 <HAL_GPIO_Init+0x2ac>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d863      	bhi.n	80029d2 <HAL_GPIO_Init+0x12e>
 800290a:	4a92      	ldr	r2, [pc, #584]	; (8002b54 <HAL_GPIO_Init+0x2b0>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d046      	beq.n	800299e <HAL_GPIO_Init+0xfa>
 8002910:	4a90      	ldr	r2, [pc, #576]	; (8002b54 <HAL_GPIO_Init+0x2b0>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d85d      	bhi.n	80029d2 <HAL_GPIO_Init+0x12e>
 8002916:	2b12      	cmp	r3, #18
 8002918:	d82a      	bhi.n	8002970 <HAL_GPIO_Init+0xcc>
 800291a:	2b12      	cmp	r3, #18
 800291c:	d859      	bhi.n	80029d2 <HAL_GPIO_Init+0x12e>
 800291e:	a201      	add	r2, pc, #4	; (adr r2, 8002924 <HAL_GPIO_Init+0x80>)
 8002920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002924:	0800299f 	.word	0x0800299f
 8002928:	08002979 	.word	0x08002979
 800292c:	0800298b 	.word	0x0800298b
 8002930:	080029cd 	.word	0x080029cd
 8002934:	080029d3 	.word	0x080029d3
 8002938:	080029d3 	.word	0x080029d3
 800293c:	080029d3 	.word	0x080029d3
 8002940:	080029d3 	.word	0x080029d3
 8002944:	080029d3 	.word	0x080029d3
 8002948:	080029d3 	.word	0x080029d3
 800294c:	080029d3 	.word	0x080029d3
 8002950:	080029d3 	.word	0x080029d3
 8002954:	080029d3 	.word	0x080029d3
 8002958:	080029d3 	.word	0x080029d3
 800295c:	080029d3 	.word	0x080029d3
 8002960:	080029d3 	.word	0x080029d3
 8002964:	080029d3 	.word	0x080029d3
 8002968:	08002981 	.word	0x08002981
 800296c:	08002995 	.word	0x08002995
 8002970:	4a79      	ldr	r2, [pc, #484]	; (8002b58 <HAL_GPIO_Init+0x2b4>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d013      	beq.n	800299e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002976:	e02c      	b.n	80029d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	623b      	str	r3, [r7, #32]
          break;
 800297e:	e029      	b.n	80029d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	3304      	adds	r3, #4
 8002986:	623b      	str	r3, [r7, #32]
          break;
 8002988:	e024      	b.n	80029d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	3308      	adds	r3, #8
 8002990:	623b      	str	r3, [r7, #32]
          break;
 8002992:	e01f      	b.n	80029d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	330c      	adds	r3, #12
 800299a:	623b      	str	r3, [r7, #32]
          break;
 800299c:	e01a      	b.n	80029d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d102      	bne.n	80029ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029a6:	2304      	movs	r3, #4
 80029a8:	623b      	str	r3, [r7, #32]
          break;
 80029aa:	e013      	b.n	80029d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d105      	bne.n	80029c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029b4:	2308      	movs	r3, #8
 80029b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69fa      	ldr	r2, [r7, #28]
 80029bc:	611a      	str	r2, [r3, #16]
          break;
 80029be:	e009      	b.n	80029d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029c0:	2308      	movs	r3, #8
 80029c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69fa      	ldr	r2, [r7, #28]
 80029c8:	615a      	str	r2, [r3, #20]
          break;
 80029ca:	e003      	b.n	80029d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029cc:	2300      	movs	r3, #0
 80029ce:	623b      	str	r3, [r7, #32]
          break;
 80029d0:	e000      	b.n	80029d4 <HAL_GPIO_Init+0x130>
          break;
 80029d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	2bff      	cmp	r3, #255	; 0xff
 80029d8:	d801      	bhi.n	80029de <HAL_GPIO_Init+0x13a>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	e001      	b.n	80029e2 <HAL_GPIO_Init+0x13e>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3304      	adds	r3, #4
 80029e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	2bff      	cmp	r3, #255	; 0xff
 80029e8:	d802      	bhi.n	80029f0 <HAL_GPIO_Init+0x14c>
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	e002      	b.n	80029f6 <HAL_GPIO_Init+0x152>
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	3b08      	subs	r3, #8
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	210f      	movs	r1, #15
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	fa01 f303 	lsl.w	r3, r1, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	401a      	ands	r2, r3
 8002a08:	6a39      	ldr	r1, [r7, #32]
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a10:	431a      	orrs	r2, r3
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 80b1 	beq.w	8002b86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a24:	4b4d      	ldr	r3, [pc, #308]	; (8002b5c <HAL_GPIO_Init+0x2b8>)
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	4a4c      	ldr	r2, [pc, #304]	; (8002b5c <HAL_GPIO_Init+0x2b8>)
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	6193      	str	r3, [r2, #24]
 8002a30:	4b4a      	ldr	r3, [pc, #296]	; (8002b5c <HAL_GPIO_Init+0x2b8>)
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a3c:	4a48      	ldr	r2, [pc, #288]	; (8002b60 <HAL_GPIO_Init+0x2bc>)
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	089b      	lsrs	r3, r3, #2
 8002a42:	3302      	adds	r3, #2
 8002a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	220f      	movs	r2, #15
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a40      	ldr	r2, [pc, #256]	; (8002b64 <HAL_GPIO_Init+0x2c0>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d013      	beq.n	8002a90 <HAL_GPIO_Init+0x1ec>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a3f      	ldr	r2, [pc, #252]	; (8002b68 <HAL_GPIO_Init+0x2c4>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d00d      	beq.n	8002a8c <HAL_GPIO_Init+0x1e8>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a3e      	ldr	r2, [pc, #248]	; (8002b6c <HAL_GPIO_Init+0x2c8>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d007      	beq.n	8002a88 <HAL_GPIO_Init+0x1e4>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a3d      	ldr	r2, [pc, #244]	; (8002b70 <HAL_GPIO_Init+0x2cc>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d101      	bne.n	8002a84 <HAL_GPIO_Init+0x1e0>
 8002a80:	2303      	movs	r3, #3
 8002a82:	e006      	b.n	8002a92 <HAL_GPIO_Init+0x1ee>
 8002a84:	2304      	movs	r3, #4
 8002a86:	e004      	b.n	8002a92 <HAL_GPIO_Init+0x1ee>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e002      	b.n	8002a92 <HAL_GPIO_Init+0x1ee>
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e000      	b.n	8002a92 <HAL_GPIO_Init+0x1ee>
 8002a90:	2300      	movs	r3, #0
 8002a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a94:	f002 0203 	and.w	r2, r2, #3
 8002a98:	0092      	lsls	r2, r2, #2
 8002a9a:	4093      	lsls	r3, r2
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002aa2:	492f      	ldr	r1, [pc, #188]	; (8002b60 <HAL_GPIO_Init+0x2bc>)
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	089b      	lsrs	r3, r3, #2
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d006      	beq.n	8002aca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002abc:	4b2d      	ldr	r3, [pc, #180]	; (8002b74 <HAL_GPIO_Init+0x2d0>)
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	492c      	ldr	r1, [pc, #176]	; (8002b74 <HAL_GPIO_Init+0x2d0>)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	608b      	str	r3, [r1, #8]
 8002ac8:	e006      	b.n	8002ad8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002aca:	4b2a      	ldr	r3, [pc, #168]	; (8002b74 <HAL_GPIO_Init+0x2d0>)
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	4928      	ldr	r1, [pc, #160]	; (8002b74 <HAL_GPIO_Init+0x2d0>)
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d006      	beq.n	8002af2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ae4:	4b23      	ldr	r3, [pc, #140]	; (8002b74 <HAL_GPIO_Init+0x2d0>)
 8002ae6:	68da      	ldr	r2, [r3, #12]
 8002ae8:	4922      	ldr	r1, [pc, #136]	; (8002b74 <HAL_GPIO_Init+0x2d0>)
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	60cb      	str	r3, [r1, #12]
 8002af0:	e006      	b.n	8002b00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002af2:	4b20      	ldr	r3, [pc, #128]	; (8002b74 <HAL_GPIO_Init+0x2d0>)
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	43db      	mvns	r3, r3
 8002afa:	491e      	ldr	r1, [pc, #120]	; (8002b74 <HAL_GPIO_Init+0x2d0>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d006      	beq.n	8002b1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b0c:	4b19      	ldr	r3, [pc, #100]	; (8002b74 <HAL_GPIO_Init+0x2d0>)
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	4918      	ldr	r1, [pc, #96]	; (8002b74 <HAL_GPIO_Init+0x2d0>)
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	604b      	str	r3, [r1, #4]
 8002b18:	e006      	b.n	8002b28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b1a:	4b16      	ldr	r3, [pc, #88]	; (8002b74 <HAL_GPIO_Init+0x2d0>)
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	43db      	mvns	r3, r3
 8002b22:	4914      	ldr	r1, [pc, #80]	; (8002b74 <HAL_GPIO_Init+0x2d0>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d021      	beq.n	8002b78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b34:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <HAL_GPIO_Init+0x2d0>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	490e      	ldr	r1, [pc, #56]	; (8002b74 <HAL_GPIO_Init+0x2d0>)
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	600b      	str	r3, [r1, #0]
 8002b40:	e021      	b.n	8002b86 <HAL_GPIO_Init+0x2e2>
 8002b42:	bf00      	nop
 8002b44:	10320000 	.word	0x10320000
 8002b48:	10310000 	.word	0x10310000
 8002b4c:	10220000 	.word	0x10220000
 8002b50:	10210000 	.word	0x10210000
 8002b54:	10120000 	.word	0x10120000
 8002b58:	10110000 	.word	0x10110000
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	40010000 	.word	0x40010000
 8002b64:	40010800 	.word	0x40010800
 8002b68:	40010c00 	.word	0x40010c00
 8002b6c:	40011000 	.word	0x40011000
 8002b70:	40011400 	.word	0x40011400
 8002b74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b78:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <HAL_GPIO_Init+0x304>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	4909      	ldr	r1, [pc, #36]	; (8002ba8 <HAL_GPIO_Init+0x304>)
 8002b82:	4013      	ands	r3, r2
 8002b84:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	3301      	adds	r3, #1
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	fa22 f303 	lsr.w	r3, r2, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f47f ae8e 	bne.w	80028b8 <HAL_GPIO_Init+0x14>
  }
}
 8002b9c:	bf00      	nop
 8002b9e:	bf00      	nop
 8002ba0:	372c      	adds	r7, #44	; 0x2c
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr
 8002ba8:	40010400 	.word	0x40010400

08002bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	807b      	strh	r3, [r7, #2]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bbc:	787b      	ldrb	r3, [r7, #1]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bc2:	887a      	ldrh	r2, [r7, #2]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002bc8:	e003      	b.n	8002bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bca:	887b      	ldrh	r3, [r7, #2]
 8002bcc:	041a      	lsls	r2, r3, #16
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	611a      	str	r2, [r3, #16]
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr

08002bdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e12b      	b.n	8002e46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d106      	bne.n	8002c08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7fe fda4 	bl	8001750 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2224      	movs	r2, #36	; 0x24
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0201 	bic.w	r2, r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c40:	f001 f832 	bl	8003ca8 <HAL_RCC_GetPCLK1Freq>
 8002c44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	4a81      	ldr	r2, [pc, #516]	; (8002e50 <HAL_I2C_Init+0x274>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d807      	bhi.n	8002c60 <HAL_I2C_Init+0x84>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4a80      	ldr	r2, [pc, #512]	; (8002e54 <HAL_I2C_Init+0x278>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	bf94      	ite	ls
 8002c58:	2301      	movls	r3, #1
 8002c5a:	2300      	movhi	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	e006      	b.n	8002c6e <HAL_I2C_Init+0x92>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4a7d      	ldr	r2, [pc, #500]	; (8002e58 <HAL_I2C_Init+0x27c>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	bf94      	ite	ls
 8002c68:	2301      	movls	r3, #1
 8002c6a:	2300      	movhi	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e0e7      	b.n	8002e46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	4a78      	ldr	r2, [pc, #480]	; (8002e5c <HAL_I2C_Init+0x280>)
 8002c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7e:	0c9b      	lsrs	r3, r3, #18
 8002c80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	4a6a      	ldr	r2, [pc, #424]	; (8002e50 <HAL_I2C_Init+0x274>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d802      	bhi.n	8002cb0 <HAL_I2C_Init+0xd4>
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	3301      	adds	r3, #1
 8002cae:	e009      	b.n	8002cc4 <HAL_I2C_Init+0xe8>
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cb6:	fb02 f303 	mul.w	r3, r2, r3
 8002cba:	4a69      	ldr	r2, [pc, #420]	; (8002e60 <HAL_I2C_Init+0x284>)
 8002cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc0:	099b      	lsrs	r3, r3, #6
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6812      	ldr	r2, [r2, #0]
 8002cc8:	430b      	orrs	r3, r1
 8002cca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cd6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	495c      	ldr	r1, [pc, #368]	; (8002e50 <HAL_I2C_Init+0x274>)
 8002ce0:	428b      	cmp	r3, r1
 8002ce2:	d819      	bhi.n	8002d18 <HAL_I2C_Init+0x13c>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	1e59      	subs	r1, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cf2:	1c59      	adds	r1, r3, #1
 8002cf4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002cf8:	400b      	ands	r3, r1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00a      	beq.n	8002d14 <HAL_I2C_Init+0x138>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	1e59      	subs	r1, r3, #1
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d12:	e051      	b.n	8002db8 <HAL_I2C_Init+0x1dc>
 8002d14:	2304      	movs	r3, #4
 8002d16:	e04f      	b.n	8002db8 <HAL_I2C_Init+0x1dc>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d111      	bne.n	8002d44 <HAL_I2C_Init+0x168>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	1e58      	subs	r0, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6859      	ldr	r1, [r3, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	440b      	add	r3, r1
 8002d2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d32:	3301      	adds	r3, #1
 8002d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	bf0c      	ite	eq
 8002d3c:	2301      	moveq	r3, #1
 8002d3e:	2300      	movne	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	e012      	b.n	8002d6a <HAL_I2C_Init+0x18e>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	1e58      	subs	r0, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6859      	ldr	r1, [r3, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	0099      	lsls	r1, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	bf0c      	ite	eq
 8002d64:	2301      	moveq	r3, #1
 8002d66:	2300      	movne	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <HAL_I2C_Init+0x196>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e022      	b.n	8002db8 <HAL_I2C_Init+0x1dc>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10e      	bne.n	8002d98 <HAL_I2C_Init+0x1bc>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	1e58      	subs	r0, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6859      	ldr	r1, [r3, #4]
 8002d82:	460b      	mov	r3, r1
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	440b      	add	r3, r1
 8002d88:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d96:	e00f      	b.n	8002db8 <HAL_I2C_Init+0x1dc>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	1e58      	subs	r0, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6859      	ldr	r1, [r3, #4]
 8002da0:	460b      	mov	r3, r1
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	0099      	lsls	r1, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dae:	3301      	adds	r3, #1
 8002db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	6809      	ldr	r1, [r1, #0]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69da      	ldr	r2, [r3, #28]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002de6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6911      	ldr	r1, [r2, #16]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	68d2      	ldr	r2, [r2, #12]
 8002df2:	4311      	orrs	r1, r2
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6812      	ldr	r2, [r2, #0]
 8002df8:	430b      	orrs	r3, r1
 8002dfa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695a      	ldr	r2, [r3, #20]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	000186a0 	.word	0x000186a0
 8002e54:	001e847f 	.word	0x001e847f
 8002e58:	003d08ff 	.word	0x003d08ff
 8002e5c:	431bde83 	.word	0x431bde83
 8002e60:	10624dd3 	.word	0x10624dd3

08002e64 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b088      	sub	sp, #32
 8002e68:	af02      	add	r7, sp, #8
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	607a      	str	r2, [r7, #4]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	460b      	mov	r3, r1
 8002e72:	817b      	strh	r3, [r7, #10]
 8002e74:	4613      	mov	r3, r2
 8002e76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e78:	f7fe fe22 	bl	8001ac0 <HAL_GetTick>
 8002e7c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b20      	cmp	r3, #32
 8002e88:	f040 80e0 	bne.w	800304c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	2319      	movs	r3, #25
 8002e92:	2201      	movs	r2, #1
 8002e94:	4970      	ldr	r1, [pc, #448]	; (8003058 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 f964 	bl	8003164 <I2C_WaitOnFlagUntilTimeout>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	e0d3      	b.n	800304e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_I2C_Master_Transmit+0x50>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e0cc      	b.n	800304e <HAL_I2C_Master_Transmit+0x1ea>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d007      	beq.n	8002eda <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f042 0201 	orr.w	r2, r2, #1
 8002ed8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ee8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2221      	movs	r2, #33	; 0x21
 8002eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2210      	movs	r2, #16
 8002ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	893a      	ldrh	r2, [r7, #8]
 8002f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	4a50      	ldr	r2, [pc, #320]	; (800305c <HAL_I2C_Master_Transmit+0x1f8>)
 8002f1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f1c:	8979      	ldrh	r1, [r7, #10]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	6a3a      	ldr	r2, [r7, #32]
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 f89c 	bl	8003060 <I2C_MasterRequestWrite>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e08d      	b.n	800304e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f32:	2300      	movs	r3, #0
 8002f34:	613b      	str	r3, [r7, #16]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f48:	e066      	b.n	8003018 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	6a39      	ldr	r1, [r7, #32]
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 fa22 	bl	8003398 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00d      	beq.n	8002f76 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d107      	bne.n	8002f72 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e06b      	b.n	800304e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7a:	781a      	ldrb	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d11b      	bne.n	8002fec <HAL_I2C_Master_Transmit+0x188>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d017      	beq.n	8002fec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	781a      	ldrb	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	6a39      	ldr	r1, [r7, #32]
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 fa19 	bl	8003428 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00d      	beq.n	8003018 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	2b04      	cmp	r3, #4
 8003002:	d107      	bne.n	8003014 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003012:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e01a      	b.n	800304e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301c:	2b00      	cmp	r3, #0
 800301e:	d194      	bne.n	8002f4a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800302e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2220      	movs	r2, #32
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	e000      	b.n	800304e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800304c:	2302      	movs	r3, #2
  }
}
 800304e:	4618      	mov	r0, r3
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	00100002 	.word	0x00100002
 800305c:	ffff0000 	.word	0xffff0000

08003060 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b088      	sub	sp, #32
 8003064:	af02      	add	r7, sp, #8
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	607a      	str	r2, [r7, #4]
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	460b      	mov	r3, r1
 800306e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003074:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	2b08      	cmp	r3, #8
 800307a:	d006      	beq.n	800308a <I2C_MasterRequestWrite+0x2a>
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d003      	beq.n	800308a <I2C_MasterRequestWrite+0x2a>
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003088:	d108      	bne.n	800309c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	e00b      	b.n	80030b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a0:	2b12      	cmp	r3, #18
 80030a2:	d107      	bne.n	80030b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 f84f 	bl	8003164 <I2C_WaitOnFlagUntilTimeout>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00d      	beq.n	80030e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030da:	d103      	bne.n	80030e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e035      	b.n	8003154 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030f0:	d108      	bne.n	8003104 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030f2:	897b      	ldrh	r3, [r7, #10]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	461a      	mov	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003100:	611a      	str	r2, [r3, #16]
 8003102:	e01b      	b.n	800313c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003104:	897b      	ldrh	r3, [r7, #10]
 8003106:	11db      	asrs	r3, r3, #7
 8003108:	b2db      	uxtb	r3, r3
 800310a:	f003 0306 	and.w	r3, r3, #6
 800310e:	b2db      	uxtb	r3, r3
 8003110:	f063 030f 	orn	r3, r3, #15
 8003114:	b2da      	uxtb	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	490e      	ldr	r1, [pc, #56]	; (800315c <I2C_MasterRequestWrite+0xfc>)
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 f898 	bl	8003258 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e010      	b.n	8003154 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003132:	897b      	ldrh	r3, [r7, #10]
 8003134:	b2da      	uxtb	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	4907      	ldr	r1, [pc, #28]	; (8003160 <I2C_MasterRequestWrite+0x100>)
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 f888 	bl	8003258 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e000      	b.n	8003154 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	00010008 	.word	0x00010008
 8003160:	00010002 	.word	0x00010002

08003164 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	603b      	str	r3, [r7, #0]
 8003170:	4613      	mov	r3, r2
 8003172:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003174:	e048      	b.n	8003208 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317c:	d044      	beq.n	8003208 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317e:	f7fe fc9f 	bl	8001ac0 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d302      	bcc.n	8003194 <I2C_WaitOnFlagUntilTimeout+0x30>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d139      	bne.n	8003208 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	0c1b      	lsrs	r3, r3, #16
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b01      	cmp	r3, #1
 800319c:	d10d      	bne.n	80031ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	43da      	mvns	r2, r3
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	4013      	ands	r3, r2
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	bf0c      	ite	eq
 80031b0:	2301      	moveq	r3, #1
 80031b2:	2300      	movne	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	461a      	mov	r2, r3
 80031b8:	e00c      	b.n	80031d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	43da      	mvns	r2, r3
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	4013      	ands	r3, r2
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	bf0c      	ite	eq
 80031cc:	2301      	moveq	r3, #1
 80031ce:	2300      	movne	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	461a      	mov	r2, r3
 80031d4:	79fb      	ldrb	r3, [r7, #7]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d116      	bne.n	8003208 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	f043 0220 	orr.w	r2, r3, #32
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e023      	b.n	8003250 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	0c1b      	lsrs	r3, r3, #16
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b01      	cmp	r3, #1
 8003210:	d10d      	bne.n	800322e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	43da      	mvns	r2, r3
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	4013      	ands	r3, r2
 800321e:	b29b      	uxth	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	bf0c      	ite	eq
 8003224:	2301      	moveq	r3, #1
 8003226:	2300      	movne	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	461a      	mov	r2, r3
 800322c:	e00c      	b.n	8003248 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	43da      	mvns	r2, r3
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	4013      	ands	r3, r2
 800323a:	b29b      	uxth	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	bf0c      	ite	eq
 8003240:	2301      	moveq	r3, #1
 8003242:	2300      	movne	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	461a      	mov	r2, r3
 8003248:	79fb      	ldrb	r3, [r7, #7]
 800324a:	429a      	cmp	r2, r3
 800324c:	d093      	beq.n	8003176 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
 8003264:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003266:	e071      	b.n	800334c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003276:	d123      	bne.n	80032c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003286:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003290:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	f043 0204 	orr.w	r2, r3, #4
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e067      	b.n	8003390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c6:	d041      	beq.n	800334c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c8:	f7fe fbfa 	bl	8001ac0 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d302      	bcc.n	80032de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d136      	bne.n	800334c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	0c1b      	lsrs	r3, r3, #16
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d10c      	bne.n	8003302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	43da      	mvns	r2, r3
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	4013      	ands	r3, r2
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	bf14      	ite	ne
 80032fa:	2301      	movne	r3, #1
 80032fc:	2300      	moveq	r3, #0
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	e00b      	b.n	800331a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	43da      	mvns	r2, r3
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	4013      	ands	r3, r2
 800330e:	b29b      	uxth	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	bf14      	ite	ne
 8003314:	2301      	movne	r3, #1
 8003316:	2300      	moveq	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d016      	beq.n	800334c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	f043 0220 	orr.w	r2, r3, #32
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e021      	b.n	8003390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	0c1b      	lsrs	r3, r3, #16
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b01      	cmp	r3, #1
 8003354:	d10c      	bne.n	8003370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	43da      	mvns	r2, r3
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	4013      	ands	r3, r2
 8003362:	b29b      	uxth	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	bf14      	ite	ne
 8003368:	2301      	movne	r3, #1
 800336a:	2300      	moveq	r3, #0
 800336c:	b2db      	uxtb	r3, r3
 800336e:	e00b      	b.n	8003388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	43da      	mvns	r2, r3
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	4013      	ands	r3, r2
 800337c:	b29b      	uxth	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	bf14      	ite	ne
 8003382:	2301      	movne	r3, #1
 8003384:	2300      	moveq	r3, #0
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	f47f af6d 	bne.w	8003268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033a4:	e034      	b.n	8003410 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 f886 	bl	80034b8 <I2C_IsAcknowledgeFailed>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e034      	b.n	8003420 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033bc:	d028      	beq.n	8003410 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033be:	f7fe fb7f 	bl	8001ac0 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d302      	bcc.n	80033d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d11d      	bne.n	8003410 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033de:	2b80      	cmp	r3, #128	; 0x80
 80033e0:	d016      	beq.n	8003410 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	f043 0220 	orr.w	r2, r3, #32
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e007      	b.n	8003420 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341a:	2b80      	cmp	r3, #128	; 0x80
 800341c:	d1c3      	bne.n	80033a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003434:	e034      	b.n	80034a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 f83e 	bl	80034b8 <I2C_IsAcknowledgeFailed>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e034      	b.n	80034b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344c:	d028      	beq.n	80034a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800344e:	f7fe fb37 	bl	8001ac0 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	429a      	cmp	r2, r3
 800345c:	d302      	bcc.n	8003464 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d11d      	bne.n	80034a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	f003 0304 	and.w	r3, r3, #4
 800346e:	2b04      	cmp	r3, #4
 8003470:	d016      	beq.n	80034a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2220      	movs	r2, #32
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348c:	f043 0220 	orr.w	r2, r3, #32
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e007      	b.n	80034b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d1c3      	bne.n	8003436 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ce:	d11b      	bne.n	8003508 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	f043 0204 	orr.w	r2, r3, #4
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e000      	b.n	800350a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	bc80      	pop	{r7}
 8003512:	4770      	bx	lr

08003514 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e272      	b.n	8003a0c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 8087 	beq.w	8003642 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003534:	4b92      	ldr	r3, [pc, #584]	; (8003780 <HAL_RCC_OscConfig+0x26c>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f003 030c 	and.w	r3, r3, #12
 800353c:	2b04      	cmp	r3, #4
 800353e:	d00c      	beq.n	800355a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003540:	4b8f      	ldr	r3, [pc, #572]	; (8003780 <HAL_RCC_OscConfig+0x26c>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f003 030c 	and.w	r3, r3, #12
 8003548:	2b08      	cmp	r3, #8
 800354a:	d112      	bne.n	8003572 <HAL_RCC_OscConfig+0x5e>
 800354c:	4b8c      	ldr	r3, [pc, #560]	; (8003780 <HAL_RCC_OscConfig+0x26c>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003558:	d10b      	bne.n	8003572 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800355a:	4b89      	ldr	r3, [pc, #548]	; (8003780 <HAL_RCC_OscConfig+0x26c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d06c      	beq.n	8003640 <HAL_RCC_OscConfig+0x12c>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d168      	bne.n	8003640 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e24c      	b.n	8003a0c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800357a:	d106      	bne.n	800358a <HAL_RCC_OscConfig+0x76>
 800357c:	4b80      	ldr	r3, [pc, #512]	; (8003780 <HAL_RCC_OscConfig+0x26c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a7f      	ldr	r2, [pc, #508]	; (8003780 <HAL_RCC_OscConfig+0x26c>)
 8003582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	e02e      	b.n	80035e8 <HAL_RCC_OscConfig+0xd4>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10c      	bne.n	80035ac <HAL_RCC_OscConfig+0x98>
 8003592:	4b7b      	ldr	r3, [pc, #492]	; (8003780 <HAL_RCC_OscConfig+0x26c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a7a      	ldr	r2, [pc, #488]	; (8003780 <HAL_RCC_OscConfig+0x26c>)
 8003598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	4b78      	ldr	r3, [pc, #480]	; (8003780 <HAL_RCC_OscConfig+0x26c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a77      	ldr	r2, [pc, #476]	; (8003780 <HAL_RCC_OscConfig+0x26c>)
 80035a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	e01d      	b.n	80035e8 <HAL_RCC_OscConfig+0xd4>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035b4:	d10c      	bne.n	80035d0 <HAL_RCC_OscConfig+0xbc>
 80035b6:	4b72      	ldr	r3, [pc, #456]	; (8003780 <HAL_RCC_OscConfig+0x26c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a71      	ldr	r2, [pc, #452]	; (8003780 <HAL_RCC_OscConfig+0x26c>)
 80035bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	4b6f      	ldr	r3, [pc, #444]	; (8003780 <HAL_RCC_OscConfig+0x26c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a6e      	ldr	r2, [pc, #440]	; (8003780 <HAL_RCC_OscConfig+0x26c>)
 80035c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	e00b      	b.n	80035e8 <HAL_RCC_OscConfig+0xd4>
 80035d0:	4b6b      	ldr	r3, [pc, #428]	; (8003780 <HAL_RCC_OscConfig+0x26c>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a6a      	ldr	r2, [pc, #424]	; (8003780 <HAL_RCC_OscConfig+0x26c>)
 80035d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035da:	6013      	str	r3, [r2, #0]
 80035dc:	4b68      	ldr	r3, [pc, #416]	; (8003780 <HAL_RCC_OscConfig+0x26c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a67      	ldr	r2, [pc, #412]	; (8003780 <HAL_RCC_OscConfig+0x26c>)
 80035e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d013      	beq.n	8003618 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f0:	f7fe fa66 	bl	8001ac0 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f8:	f7fe fa62 	bl	8001ac0 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b64      	cmp	r3, #100	; 0x64
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e200      	b.n	8003a0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360a:	4b5d      	ldr	r3, [pc, #372]	; (8003780 <HAL_RCC_OscConfig+0x26c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0f0      	beq.n	80035f8 <HAL_RCC_OscConfig+0xe4>
 8003616:	e014      	b.n	8003642 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003618:	f7fe fa52 	bl	8001ac0 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003620:	f7fe fa4e 	bl	8001ac0 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b64      	cmp	r3, #100	; 0x64
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e1ec      	b.n	8003a0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003632:	4b53      	ldr	r3, [pc, #332]	; (8003780 <HAL_RCC_OscConfig+0x26c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1f0      	bne.n	8003620 <HAL_RCC_OscConfig+0x10c>
 800363e:	e000      	b.n	8003642 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d063      	beq.n	8003716 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800364e:	4b4c      	ldr	r3, [pc, #304]	; (8003780 <HAL_RCC_OscConfig+0x26c>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f003 030c 	and.w	r3, r3, #12
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00b      	beq.n	8003672 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800365a:	4b49      	ldr	r3, [pc, #292]	; (8003780 <HAL_RCC_OscConfig+0x26c>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f003 030c 	and.w	r3, r3, #12
 8003662:	2b08      	cmp	r3, #8
 8003664:	d11c      	bne.n	80036a0 <HAL_RCC_OscConfig+0x18c>
 8003666:	4b46      	ldr	r3, [pc, #280]	; (8003780 <HAL_RCC_OscConfig+0x26c>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d116      	bne.n	80036a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003672:	4b43      	ldr	r3, [pc, #268]	; (8003780 <HAL_RCC_OscConfig+0x26c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d005      	beq.n	800368a <HAL_RCC_OscConfig+0x176>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d001      	beq.n	800368a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e1c0      	b.n	8003a0c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800368a:	4b3d      	ldr	r3, [pc, #244]	; (8003780 <HAL_RCC_OscConfig+0x26c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	4939      	ldr	r1, [pc, #228]	; (8003780 <HAL_RCC_OscConfig+0x26c>)
 800369a:	4313      	orrs	r3, r2
 800369c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800369e:	e03a      	b.n	8003716 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d020      	beq.n	80036ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036a8:	4b36      	ldr	r3, [pc, #216]	; (8003784 <HAL_RCC_OscConfig+0x270>)
 80036aa:	2201      	movs	r2, #1
 80036ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ae:	f7fe fa07 	bl	8001ac0 <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b6:	f7fe fa03 	bl	8001ac0 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e1a1      	b.n	8003a0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c8:	4b2d      	ldr	r3, [pc, #180]	; (8003780 <HAL_RCC_OscConfig+0x26c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0f0      	beq.n	80036b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d4:	4b2a      	ldr	r3, [pc, #168]	; (8003780 <HAL_RCC_OscConfig+0x26c>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	4927      	ldr	r1, [pc, #156]	; (8003780 <HAL_RCC_OscConfig+0x26c>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	600b      	str	r3, [r1, #0]
 80036e8:	e015      	b.n	8003716 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ea:	4b26      	ldr	r3, [pc, #152]	; (8003784 <HAL_RCC_OscConfig+0x270>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f0:	f7fe f9e6 	bl	8001ac0 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036f8:	f7fe f9e2 	bl	8001ac0 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e180      	b.n	8003a0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800370a:	4b1d      	ldr	r3, [pc, #116]	; (8003780 <HAL_RCC_OscConfig+0x26c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1f0      	bne.n	80036f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b00      	cmp	r3, #0
 8003720:	d03a      	beq.n	8003798 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d019      	beq.n	800375e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800372a:	4b17      	ldr	r3, [pc, #92]	; (8003788 <HAL_RCC_OscConfig+0x274>)
 800372c:	2201      	movs	r2, #1
 800372e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003730:	f7fe f9c6 	bl	8001ac0 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003738:	f7fe f9c2 	bl	8001ac0 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e160      	b.n	8003a0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800374a:	4b0d      	ldr	r3, [pc, #52]	; (8003780 <HAL_RCC_OscConfig+0x26c>)
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0f0      	beq.n	8003738 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003756:	2001      	movs	r0, #1
 8003758:	f000 face 	bl	8003cf8 <RCC_Delay>
 800375c:	e01c      	b.n	8003798 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800375e:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <HAL_RCC_OscConfig+0x274>)
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003764:	f7fe f9ac 	bl	8001ac0 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800376a:	e00f      	b.n	800378c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800376c:	f7fe f9a8 	bl	8001ac0 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d908      	bls.n	800378c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e146      	b.n	8003a0c <HAL_RCC_OscConfig+0x4f8>
 800377e:	bf00      	nop
 8003780:	40021000 	.word	0x40021000
 8003784:	42420000 	.word	0x42420000
 8003788:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800378c:	4b92      	ldr	r3, [pc, #584]	; (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1e9      	bne.n	800376c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 80a6 	beq.w	80038f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037a6:	2300      	movs	r3, #0
 80037a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037aa:	4b8b      	ldr	r3, [pc, #556]	; (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10d      	bne.n	80037d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037b6:	4b88      	ldr	r3, [pc, #544]	; (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	4a87      	ldr	r2, [pc, #540]	; (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 80037bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c0:	61d3      	str	r3, [r2, #28]
 80037c2:	4b85      	ldr	r3, [pc, #532]	; (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ca:	60bb      	str	r3, [r7, #8]
 80037cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ce:	2301      	movs	r3, #1
 80037d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d2:	4b82      	ldr	r3, [pc, #520]	; (80039dc <HAL_RCC_OscConfig+0x4c8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d118      	bne.n	8003810 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037de:	4b7f      	ldr	r3, [pc, #508]	; (80039dc <HAL_RCC_OscConfig+0x4c8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a7e      	ldr	r2, [pc, #504]	; (80039dc <HAL_RCC_OscConfig+0x4c8>)
 80037e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ea:	f7fe f969 	bl	8001ac0 <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f0:	e008      	b.n	8003804 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f2:	f7fe f965 	bl	8001ac0 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b64      	cmp	r3, #100	; 0x64
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e103      	b.n	8003a0c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003804:	4b75      	ldr	r3, [pc, #468]	; (80039dc <HAL_RCC_OscConfig+0x4c8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0f0      	beq.n	80037f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d106      	bne.n	8003826 <HAL_RCC_OscConfig+0x312>
 8003818:	4b6f      	ldr	r3, [pc, #444]	; (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	4a6e      	ldr	r2, [pc, #440]	; (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 800381e:	f043 0301 	orr.w	r3, r3, #1
 8003822:	6213      	str	r3, [r2, #32]
 8003824:	e02d      	b.n	8003882 <HAL_RCC_OscConfig+0x36e>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10c      	bne.n	8003848 <HAL_RCC_OscConfig+0x334>
 800382e:	4b6a      	ldr	r3, [pc, #424]	; (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	4a69      	ldr	r2, [pc, #420]	; (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 8003834:	f023 0301 	bic.w	r3, r3, #1
 8003838:	6213      	str	r3, [r2, #32]
 800383a:	4b67      	ldr	r3, [pc, #412]	; (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	4a66      	ldr	r2, [pc, #408]	; (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 8003840:	f023 0304 	bic.w	r3, r3, #4
 8003844:	6213      	str	r3, [r2, #32]
 8003846:	e01c      	b.n	8003882 <HAL_RCC_OscConfig+0x36e>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	2b05      	cmp	r3, #5
 800384e:	d10c      	bne.n	800386a <HAL_RCC_OscConfig+0x356>
 8003850:	4b61      	ldr	r3, [pc, #388]	; (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	4a60      	ldr	r2, [pc, #384]	; (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 8003856:	f043 0304 	orr.w	r3, r3, #4
 800385a:	6213      	str	r3, [r2, #32]
 800385c:	4b5e      	ldr	r3, [pc, #376]	; (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	4a5d      	ldr	r2, [pc, #372]	; (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 8003862:	f043 0301 	orr.w	r3, r3, #1
 8003866:	6213      	str	r3, [r2, #32]
 8003868:	e00b      	b.n	8003882 <HAL_RCC_OscConfig+0x36e>
 800386a:	4b5b      	ldr	r3, [pc, #364]	; (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	4a5a      	ldr	r2, [pc, #360]	; (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 8003870:	f023 0301 	bic.w	r3, r3, #1
 8003874:	6213      	str	r3, [r2, #32]
 8003876:	4b58      	ldr	r3, [pc, #352]	; (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	4a57      	ldr	r2, [pc, #348]	; (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 800387c:	f023 0304 	bic.w	r3, r3, #4
 8003880:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d015      	beq.n	80038b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800388a:	f7fe f919 	bl	8001ac0 <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003890:	e00a      	b.n	80038a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003892:	f7fe f915 	bl	8001ac0 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e0b1      	b.n	8003a0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a8:	4b4b      	ldr	r3, [pc, #300]	; (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0ee      	beq.n	8003892 <HAL_RCC_OscConfig+0x37e>
 80038b4:	e014      	b.n	80038e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b6:	f7fe f903 	bl	8001ac0 <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038bc:	e00a      	b.n	80038d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038be:	f7fe f8ff 	bl	8001ac0 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e09b      	b.n	8003a0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d4:	4b40      	ldr	r3, [pc, #256]	; (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1ee      	bne.n	80038be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038e0:	7dfb      	ldrb	r3, [r7, #23]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d105      	bne.n	80038f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e6:	4b3c      	ldr	r3, [pc, #240]	; (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	4a3b      	ldr	r2, [pc, #236]	; (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 80038ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 8087 	beq.w	8003a0a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038fc:	4b36      	ldr	r3, [pc, #216]	; (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f003 030c 	and.w	r3, r3, #12
 8003904:	2b08      	cmp	r3, #8
 8003906:	d061      	beq.n	80039cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	2b02      	cmp	r3, #2
 800390e:	d146      	bne.n	800399e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003910:	4b33      	ldr	r3, [pc, #204]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 8003912:	2200      	movs	r2, #0
 8003914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003916:	f7fe f8d3 	bl	8001ac0 <HAL_GetTick>
 800391a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800391c:	e008      	b.n	8003930 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800391e:	f7fe f8cf 	bl	8001ac0 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e06d      	b.n	8003a0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003930:	4b29      	ldr	r3, [pc, #164]	; (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1f0      	bne.n	800391e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003944:	d108      	bne.n	8003958 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003946:	4b24      	ldr	r3, [pc, #144]	; (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	4921      	ldr	r1, [pc, #132]	; (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 8003954:	4313      	orrs	r3, r2
 8003956:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003958:	4b1f      	ldr	r3, [pc, #124]	; (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a19      	ldr	r1, [r3, #32]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	430b      	orrs	r3, r1
 800396a:	491b      	ldr	r1, [pc, #108]	; (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 800396c:	4313      	orrs	r3, r2
 800396e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003970:	4b1b      	ldr	r3, [pc, #108]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 8003972:	2201      	movs	r2, #1
 8003974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003976:	f7fe f8a3 	bl	8001ac0 <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800397c:	e008      	b.n	8003990 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800397e:	f7fe f89f 	bl	8001ac0 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d901      	bls.n	8003990 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e03d      	b.n	8003a0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003990:	4b11      	ldr	r3, [pc, #68]	; (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0f0      	beq.n	800397e <HAL_RCC_OscConfig+0x46a>
 800399c:	e035      	b.n	8003a0a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800399e:	4b10      	ldr	r3, [pc, #64]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a4:	f7fe f88c 	bl	8001ac0 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ac:	f7fe f888 	bl	8001ac0 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e026      	b.n	8003a0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039be:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1f0      	bne.n	80039ac <HAL_RCC_OscConfig+0x498>
 80039ca:	e01e      	b.n	8003a0a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d107      	bne.n	80039e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e019      	b.n	8003a0c <HAL_RCC_OscConfig+0x4f8>
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40007000 	.word	0x40007000
 80039e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039e4:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <HAL_RCC_OscConfig+0x500>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d106      	bne.n	8003a06 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d001      	beq.n	8003a0a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3718      	adds	r7, #24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40021000 	.word	0x40021000

08003a18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e0d0      	b.n	8003bce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a2c:	4b6a      	ldr	r3, [pc, #424]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d910      	bls.n	8003a5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3a:	4b67      	ldr	r3, [pc, #412]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f023 0207 	bic.w	r2, r3, #7
 8003a42:	4965      	ldr	r1, [pc, #404]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4a:	4b63      	ldr	r3, [pc, #396]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d001      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e0b8      	b.n	8003bce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d020      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a74:	4b59      	ldr	r3, [pc, #356]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	4a58      	ldr	r2, [pc, #352]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003a7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0308 	and.w	r3, r3, #8
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d005      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a8c:	4b53      	ldr	r3, [pc, #332]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	4a52      	ldr	r2, [pc, #328]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003a92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a98:	4b50      	ldr	r3, [pc, #320]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	494d      	ldr	r1, [pc, #308]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d040      	beq.n	8003b38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d107      	bne.n	8003ace <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003abe:	4b47      	ldr	r3, [pc, #284]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d115      	bne.n	8003af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e07f      	b.n	8003bce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d107      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad6:	4b41      	ldr	r3, [pc, #260]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d109      	bne.n	8003af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e073      	b.n	8003bce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae6:	4b3d      	ldr	r3, [pc, #244]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e06b      	b.n	8003bce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003af6:	4b39      	ldr	r3, [pc, #228]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f023 0203 	bic.w	r2, r3, #3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	4936      	ldr	r1, [pc, #216]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b08:	f7fd ffda 	bl	8001ac0 <HAL_GetTick>
 8003b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0e:	e00a      	b.n	8003b26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b10:	f7fd ffd6 	bl	8001ac0 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e053      	b.n	8003bce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b26:	4b2d      	ldr	r3, [pc, #180]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f003 020c 	and.w	r2, r3, #12
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d1eb      	bne.n	8003b10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b38:	4b27      	ldr	r3, [pc, #156]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d210      	bcs.n	8003b68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b46:	4b24      	ldr	r3, [pc, #144]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f023 0207 	bic.w	r2, r3, #7
 8003b4e:	4922      	ldr	r1, [pc, #136]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b56:	4b20      	ldr	r3, [pc, #128]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d001      	beq.n	8003b68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e032      	b.n	8003bce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d008      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b74:	4b19      	ldr	r3, [pc, #100]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	4916      	ldr	r1, [pc, #88]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d009      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b92:	4b12      	ldr	r3, [pc, #72]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	490e      	ldr	r1, [pc, #56]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ba6:	f000 f821 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 8003baa:	4602      	mov	r2, r0
 8003bac:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	091b      	lsrs	r3, r3, #4
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	490a      	ldr	r1, [pc, #40]	; (8003be0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb8:	5ccb      	ldrb	r3, [r1, r3]
 8003bba:	fa22 f303 	lsr.w	r3, r2, r3
 8003bbe:	4a09      	ldr	r2, [pc, #36]	; (8003be4 <HAL_RCC_ClockConfig+0x1cc>)
 8003bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bc2:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <HAL_RCC_ClockConfig+0x1d0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fd ff38 	bl	8001a3c <HAL_InitTick>

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40022000 	.word	0x40022000
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	0800997c 	.word	0x0800997c
 8003be4:	20000000 	.word	0x20000000
 8003be8:	20000004 	.word	0x20000004

08003bec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60fb      	str	r3, [r7, #12]
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60bb      	str	r3, [r7, #8]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	617b      	str	r3, [r7, #20]
 8003bfe:	2300      	movs	r3, #0
 8003c00:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c06:	4b1e      	ldr	r3, [pc, #120]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f003 030c 	and.w	r3, r3, #12
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d002      	beq.n	8003c1c <HAL_RCC_GetSysClockFreq+0x30>
 8003c16:	2b08      	cmp	r3, #8
 8003c18:	d003      	beq.n	8003c22 <HAL_RCC_GetSysClockFreq+0x36>
 8003c1a:	e027      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c1c:	4b19      	ldr	r3, [pc, #100]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c1e:	613b      	str	r3, [r7, #16]
      break;
 8003c20:	e027      	b.n	8003c72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	0c9b      	lsrs	r3, r3, #18
 8003c26:	f003 030f 	and.w	r3, r3, #15
 8003c2a:	4a17      	ldr	r2, [pc, #92]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c2c:	5cd3      	ldrb	r3, [r2, r3]
 8003c2e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d010      	beq.n	8003c5c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c3a:	4b11      	ldr	r3, [pc, #68]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	0c5b      	lsrs	r3, r3, #17
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	4a11      	ldr	r2, [pc, #68]	; (8003c8c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c46:	5cd3      	ldrb	r3, [r2, r3]
 8003c48:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a0d      	ldr	r2, [pc, #52]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c4e:	fb03 f202 	mul.w	r2, r3, r2
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	e004      	b.n	8003c66 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a0c      	ldr	r2, [pc, #48]	; (8003c90 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c60:	fb02 f303 	mul.w	r3, r2, r3
 8003c64:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	613b      	str	r3, [r7, #16]
      break;
 8003c6a:	e002      	b.n	8003c72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c6c:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c6e:	613b      	str	r3, [r7, #16]
      break;
 8003c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c72:	693b      	ldr	r3, [r7, #16]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	371c      	adds	r7, #28
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bc80      	pop	{r7}
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	40021000 	.word	0x40021000
 8003c84:	007a1200 	.word	0x007a1200
 8003c88:	08009994 	.word	0x08009994
 8003c8c:	080099a4 	.word	0x080099a4
 8003c90:	003d0900 	.word	0x003d0900

08003c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c98:	4b02      	ldr	r3, [pc, #8]	; (8003ca4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bc80      	pop	{r7}
 8003ca2:	4770      	bx	lr
 8003ca4:	20000000 	.word	0x20000000

08003ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cac:	f7ff fff2 	bl	8003c94 <HAL_RCC_GetHCLKFreq>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	0a1b      	lsrs	r3, r3, #8
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	4903      	ldr	r1, [pc, #12]	; (8003ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cbe:	5ccb      	ldrb	r3, [r1, r3]
 8003cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	0800998c 	.word	0x0800998c

08003cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cd4:	f7ff ffde 	bl	8003c94 <HAL_RCC_GetHCLKFreq>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	0adb      	lsrs	r3, r3, #11
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	4903      	ldr	r1, [pc, #12]	; (8003cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ce6:	5ccb      	ldrb	r3, [r1, r3]
 8003ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	0800998c 	.word	0x0800998c

08003cf8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d00:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <RCC_Delay+0x34>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a0a      	ldr	r2, [pc, #40]	; (8003d30 <RCC_Delay+0x38>)
 8003d06:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0a:	0a5b      	lsrs	r3, r3, #9
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	fb02 f303 	mul.w	r3, r2, r3
 8003d12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d14:	bf00      	nop
  }
  while (Delay --);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	1e5a      	subs	r2, r3, #1
 8003d1a:	60fa      	str	r2, [r7, #12]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1f9      	bne.n	8003d14 <RCC_Delay+0x1c>
}
 8003d20:	bf00      	nop
 8003d22:	bf00      	nop
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr
 8003d2c:	20000000 	.word	0x20000000
 8003d30:	10624dd3 	.word	0x10624dd3

08003d34 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	613b      	str	r3, [r7, #16]
 8003d40:	2300      	movs	r3, #0
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d07d      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003d50:	2300      	movs	r3, #0
 8003d52:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d54:	4b4f      	ldr	r3, [pc, #316]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10d      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d60:	4b4c      	ldr	r3, [pc, #304]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	4a4b      	ldr	r2, [pc, #300]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d6a:	61d3      	str	r3, [r2, #28]
 8003d6c:	4b49      	ldr	r3, [pc, #292]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d74:	60bb      	str	r3, [r7, #8]
 8003d76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7c:	4b46      	ldr	r3, [pc, #280]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d118      	bne.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d88:	4b43      	ldr	r3, [pc, #268]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a42      	ldr	r2, [pc, #264]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d94:	f7fd fe94 	bl	8001ac0 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d9a:	e008      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d9c:	f7fd fe90 	bl	8001ac0 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b64      	cmp	r3, #100	; 0x64
 8003da8:	d901      	bls.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e06d      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dae:	4b3a      	ldr	r3, [pc, #232]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0f0      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dba:	4b36      	ldr	r3, [pc, #216]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dc2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d02e      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d027      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dd8:	4b2e      	ldr	r3, [pc, #184]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003de0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003de2:	4b2e      	ldr	r3, [pc, #184]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003de4:	2201      	movs	r2, #1
 8003de6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003de8:	4b2c      	ldr	r3, [pc, #176]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003dee:	4a29      	ldr	r2, [pc, #164]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d014      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfe:	f7fd fe5f 	bl	8001ac0 <HAL_GetTick>
 8003e02:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e04:	e00a      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e06:	f7fd fe5b 	bl	8001ac0 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d901      	bls.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e036      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e1c:	4b1d      	ldr	r3, [pc, #116]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d0ee      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e28:	4b1a      	ldr	r3, [pc, #104]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	4917      	ldr	r1, [pc, #92]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e3a:	7dfb      	ldrb	r3, [r7, #23]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d105      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e40:	4b14      	ldr	r3, [pc, #80]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e42:	69db      	ldr	r3, [r3, #28]
 8003e44:	4a13      	ldr	r2, [pc, #76]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e4a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d008      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e58:	4b0e      	ldr	r3, [pc, #56]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	490b      	ldr	r1, [pc, #44]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0310 	and.w	r3, r3, #16
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d008      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e76:	4b07      	ldr	r3, [pc, #28]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	4904      	ldr	r1, [pc, #16]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	40021000 	.word	0x40021000
 8003e98:	40007000 	.word	0x40007000
 8003e9c:	42420440 	.word	0x42420440

08003ea0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b088      	sub	sp, #32
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	617b      	str	r3, [r7, #20]
 8003eac:	2300      	movs	r3, #0
 8003eae:	61fb      	str	r3, [r7, #28]
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	2300      	movs	r3, #0
 8003eba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b10      	cmp	r3, #16
 8003ec0:	d00a      	beq.n	8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b10      	cmp	r3, #16
 8003ec6:	f200 808a 	bhi.w	8003fde <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d045      	beq.n	8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d075      	beq.n	8003fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003ed6:	e082      	b.n	8003fde <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003ed8:	4b46      	ldr	r3, [pc, #280]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003ede:	4b45      	ldr	r3, [pc, #276]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d07b      	beq.n	8003fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	0c9b      	lsrs	r3, r3, #18
 8003eee:	f003 030f 	and.w	r3, r3, #15
 8003ef2:	4a41      	ldr	r2, [pc, #260]	; (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003ef4:	5cd3      	ldrb	r3, [r2, r3]
 8003ef6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d015      	beq.n	8003f2e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f02:	4b3c      	ldr	r3, [pc, #240]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	0c5b      	lsrs	r3, r3, #17
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	4a3b      	ldr	r2, [pc, #236]	; (8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003f0e:	5cd3      	ldrb	r3, [r2, r3]
 8003f10:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00d      	beq.n	8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003f1c:	4a38      	ldr	r2, [pc, #224]	; (8004000 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	fb02 f303 	mul.w	r3, r2, r3
 8003f2a:	61fb      	str	r3, [r7, #28]
 8003f2c:	e004      	b.n	8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	4a34      	ldr	r2, [pc, #208]	; (8004004 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003f32:	fb02 f303 	mul.w	r3, r2, r3
 8003f36:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003f38:	4b2e      	ldr	r3, [pc, #184]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f44:	d102      	bne.n	8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	61bb      	str	r3, [r7, #24]
      break;
 8003f4a:	e04a      	b.n	8003fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	4a2d      	ldr	r2, [pc, #180]	; (8004008 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003f52:	fba2 2303 	umull	r2, r3, r2, r3
 8003f56:	085b      	lsrs	r3, r3, #1
 8003f58:	61bb      	str	r3, [r7, #24]
      break;
 8003f5a:	e042      	b.n	8003fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003f5c:	4b25      	ldr	r3, [pc, #148]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f6c:	d108      	bne.n	8003f80 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003f78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f7c:	61bb      	str	r3, [r7, #24]
 8003f7e:	e01f      	b.n	8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f8a:	d109      	bne.n	8003fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003f8c:	4b19      	ldr	r3, [pc, #100]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003f98:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003f9c:	61bb      	str	r3, [r7, #24]
 8003f9e:	e00f      	b.n	8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003faa:	d11c      	bne.n	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003fac:	4b11      	ldr	r3, [pc, #68]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d016      	beq.n	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003fb8:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003fbc:	61bb      	str	r3, [r7, #24]
      break;
 8003fbe:	e012      	b.n	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003fc0:	e011      	b.n	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003fc2:	f7ff fe85 	bl	8003cd0 <HAL_RCC_GetPCLK2Freq>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	4b0a      	ldr	r3, [pc, #40]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	0b9b      	lsrs	r3, r3, #14
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fda:	61bb      	str	r3, [r7, #24]
      break;
 8003fdc:	e004      	b.n	8003fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003fde:	bf00      	nop
 8003fe0:	e002      	b.n	8003fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003fe2:	bf00      	nop
 8003fe4:	e000      	b.n	8003fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003fe6:	bf00      	nop
    }
  }
  return (frequency);
 8003fe8:	69bb      	ldr	r3, [r7, #24]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3720      	adds	r7, #32
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	080099a8 	.word	0x080099a8
 8003ffc:	080099b8 	.word	0x080099b8
 8004000:	007a1200 	.word	0x007a1200
 8004004:	003d0900 	.word	0x003d0900
 8004008:	aaaaaaab 	.word	0xaaaaaaab

0800400c <__cvt>:
 800400c:	2b00      	cmp	r3, #0
 800400e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004012:	461f      	mov	r7, r3
 8004014:	bfbb      	ittet	lt
 8004016:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800401a:	461f      	movlt	r7, r3
 800401c:	2300      	movge	r3, #0
 800401e:	232d      	movlt	r3, #45	; 0x2d
 8004020:	b088      	sub	sp, #32
 8004022:	4614      	mov	r4, r2
 8004024:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004026:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004028:	7013      	strb	r3, [r2, #0]
 800402a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800402c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004030:	f023 0820 	bic.w	r8, r3, #32
 8004034:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004038:	d005      	beq.n	8004046 <__cvt+0x3a>
 800403a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800403e:	d100      	bne.n	8004042 <__cvt+0x36>
 8004040:	3501      	adds	r5, #1
 8004042:	2302      	movs	r3, #2
 8004044:	e000      	b.n	8004048 <__cvt+0x3c>
 8004046:	2303      	movs	r3, #3
 8004048:	aa07      	add	r2, sp, #28
 800404a:	9204      	str	r2, [sp, #16]
 800404c:	aa06      	add	r2, sp, #24
 800404e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004052:	e9cd 3500 	strd	r3, r5, [sp]
 8004056:	4622      	mov	r2, r4
 8004058:	463b      	mov	r3, r7
 800405a:	f001 f871 	bl	8005140 <_dtoa_r>
 800405e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004062:	4606      	mov	r6, r0
 8004064:	d102      	bne.n	800406c <__cvt+0x60>
 8004066:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004068:	07db      	lsls	r3, r3, #31
 800406a:	d522      	bpl.n	80040b2 <__cvt+0xa6>
 800406c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004070:	eb06 0905 	add.w	r9, r6, r5
 8004074:	d110      	bne.n	8004098 <__cvt+0x8c>
 8004076:	7833      	ldrb	r3, [r6, #0]
 8004078:	2b30      	cmp	r3, #48	; 0x30
 800407a:	d10a      	bne.n	8004092 <__cvt+0x86>
 800407c:	2200      	movs	r2, #0
 800407e:	2300      	movs	r3, #0
 8004080:	4620      	mov	r0, r4
 8004082:	4639      	mov	r1, r7
 8004084:	f7fc fc90 	bl	80009a8 <__aeabi_dcmpeq>
 8004088:	b918      	cbnz	r0, 8004092 <__cvt+0x86>
 800408a:	f1c5 0501 	rsb	r5, r5, #1
 800408e:	f8ca 5000 	str.w	r5, [sl]
 8004092:	f8da 3000 	ldr.w	r3, [sl]
 8004096:	4499      	add	r9, r3
 8004098:	2200      	movs	r2, #0
 800409a:	2300      	movs	r3, #0
 800409c:	4620      	mov	r0, r4
 800409e:	4639      	mov	r1, r7
 80040a0:	f7fc fc82 	bl	80009a8 <__aeabi_dcmpeq>
 80040a4:	b108      	cbz	r0, 80040aa <__cvt+0x9e>
 80040a6:	f8cd 901c 	str.w	r9, [sp, #28]
 80040aa:	2230      	movs	r2, #48	; 0x30
 80040ac:	9b07      	ldr	r3, [sp, #28]
 80040ae:	454b      	cmp	r3, r9
 80040b0:	d307      	bcc.n	80040c2 <__cvt+0xb6>
 80040b2:	4630      	mov	r0, r6
 80040b4:	9b07      	ldr	r3, [sp, #28]
 80040b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80040b8:	1b9b      	subs	r3, r3, r6
 80040ba:	6013      	str	r3, [r2, #0]
 80040bc:	b008      	add	sp, #32
 80040be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040c2:	1c59      	adds	r1, r3, #1
 80040c4:	9107      	str	r1, [sp, #28]
 80040c6:	701a      	strb	r2, [r3, #0]
 80040c8:	e7f0      	b.n	80040ac <__cvt+0xa0>

080040ca <__exponent>:
 80040ca:	4603      	mov	r3, r0
 80040cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040ce:	2900      	cmp	r1, #0
 80040d0:	f803 2b02 	strb.w	r2, [r3], #2
 80040d4:	bfb6      	itet	lt
 80040d6:	222d      	movlt	r2, #45	; 0x2d
 80040d8:	222b      	movge	r2, #43	; 0x2b
 80040da:	4249      	neglt	r1, r1
 80040dc:	2909      	cmp	r1, #9
 80040de:	7042      	strb	r2, [r0, #1]
 80040e0:	dd2a      	ble.n	8004138 <__exponent+0x6e>
 80040e2:	f10d 0207 	add.w	r2, sp, #7
 80040e6:	4617      	mov	r7, r2
 80040e8:	260a      	movs	r6, #10
 80040ea:	fb91 f5f6 	sdiv	r5, r1, r6
 80040ee:	4694      	mov	ip, r2
 80040f0:	fb06 1415 	mls	r4, r6, r5, r1
 80040f4:	3430      	adds	r4, #48	; 0x30
 80040f6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80040fa:	460c      	mov	r4, r1
 80040fc:	2c63      	cmp	r4, #99	; 0x63
 80040fe:	4629      	mov	r1, r5
 8004100:	f102 32ff 	add.w	r2, r2, #4294967295
 8004104:	dcf1      	bgt.n	80040ea <__exponent+0x20>
 8004106:	3130      	adds	r1, #48	; 0x30
 8004108:	f1ac 0402 	sub.w	r4, ip, #2
 800410c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004110:	4622      	mov	r2, r4
 8004112:	1c41      	adds	r1, r0, #1
 8004114:	42ba      	cmp	r2, r7
 8004116:	d30a      	bcc.n	800412e <__exponent+0x64>
 8004118:	f10d 0209 	add.w	r2, sp, #9
 800411c:	eba2 020c 	sub.w	r2, r2, ip
 8004120:	42bc      	cmp	r4, r7
 8004122:	bf88      	it	hi
 8004124:	2200      	movhi	r2, #0
 8004126:	4413      	add	r3, r2
 8004128:	1a18      	subs	r0, r3, r0
 800412a:	b003      	add	sp, #12
 800412c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800412e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004132:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004136:	e7ed      	b.n	8004114 <__exponent+0x4a>
 8004138:	2330      	movs	r3, #48	; 0x30
 800413a:	3130      	adds	r1, #48	; 0x30
 800413c:	7083      	strb	r3, [r0, #2]
 800413e:	70c1      	strb	r1, [r0, #3]
 8004140:	1d03      	adds	r3, r0, #4
 8004142:	e7f1      	b.n	8004128 <__exponent+0x5e>

08004144 <_printf_float>:
 8004144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004148:	b091      	sub	sp, #68	; 0x44
 800414a:	460c      	mov	r4, r1
 800414c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004150:	4616      	mov	r6, r2
 8004152:	461f      	mov	r7, r3
 8004154:	4605      	mov	r5, r0
 8004156:	f000 fee1 	bl	8004f1c <_localeconv_r>
 800415a:	6803      	ldr	r3, [r0, #0]
 800415c:	4618      	mov	r0, r3
 800415e:	9309      	str	r3, [sp, #36]	; 0x24
 8004160:	f7fb fff6 	bl	8000150 <strlen>
 8004164:	2300      	movs	r3, #0
 8004166:	930e      	str	r3, [sp, #56]	; 0x38
 8004168:	f8d8 3000 	ldr.w	r3, [r8]
 800416c:	900a      	str	r0, [sp, #40]	; 0x28
 800416e:	3307      	adds	r3, #7
 8004170:	f023 0307 	bic.w	r3, r3, #7
 8004174:	f103 0208 	add.w	r2, r3, #8
 8004178:	f894 9018 	ldrb.w	r9, [r4, #24]
 800417c:	f8d4 b000 	ldr.w	fp, [r4]
 8004180:	f8c8 2000 	str.w	r2, [r8]
 8004184:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004188:	4652      	mov	r2, sl
 800418a:	4643      	mov	r3, r8
 800418c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004190:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004194:	930b      	str	r3, [sp, #44]	; 0x2c
 8004196:	f04f 32ff 	mov.w	r2, #4294967295
 800419a:	4650      	mov	r0, sl
 800419c:	4b9c      	ldr	r3, [pc, #624]	; (8004410 <_printf_float+0x2cc>)
 800419e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80041a0:	f7fc fc34 	bl	8000a0c <__aeabi_dcmpun>
 80041a4:	bb70      	cbnz	r0, 8004204 <_printf_float+0xc0>
 80041a6:	f04f 32ff 	mov.w	r2, #4294967295
 80041aa:	4650      	mov	r0, sl
 80041ac:	4b98      	ldr	r3, [pc, #608]	; (8004410 <_printf_float+0x2cc>)
 80041ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80041b0:	f7fc fc0e 	bl	80009d0 <__aeabi_dcmple>
 80041b4:	bb30      	cbnz	r0, 8004204 <_printf_float+0xc0>
 80041b6:	2200      	movs	r2, #0
 80041b8:	2300      	movs	r3, #0
 80041ba:	4650      	mov	r0, sl
 80041bc:	4641      	mov	r1, r8
 80041be:	f7fc fbfd 	bl	80009bc <__aeabi_dcmplt>
 80041c2:	b110      	cbz	r0, 80041ca <_printf_float+0x86>
 80041c4:	232d      	movs	r3, #45	; 0x2d
 80041c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041ca:	4a92      	ldr	r2, [pc, #584]	; (8004414 <_printf_float+0x2d0>)
 80041cc:	4b92      	ldr	r3, [pc, #584]	; (8004418 <_printf_float+0x2d4>)
 80041ce:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80041d2:	bf94      	ite	ls
 80041d4:	4690      	movls	r8, r2
 80041d6:	4698      	movhi	r8, r3
 80041d8:	2303      	movs	r3, #3
 80041da:	f04f 0a00 	mov.w	sl, #0
 80041de:	6123      	str	r3, [r4, #16]
 80041e0:	f02b 0304 	bic.w	r3, fp, #4
 80041e4:	6023      	str	r3, [r4, #0]
 80041e6:	4633      	mov	r3, r6
 80041e8:	4621      	mov	r1, r4
 80041ea:	4628      	mov	r0, r5
 80041ec:	9700      	str	r7, [sp, #0]
 80041ee:	aa0f      	add	r2, sp, #60	; 0x3c
 80041f0:	f000 f9d6 	bl	80045a0 <_printf_common>
 80041f4:	3001      	adds	r0, #1
 80041f6:	f040 8090 	bne.w	800431a <_printf_float+0x1d6>
 80041fa:	f04f 30ff 	mov.w	r0, #4294967295
 80041fe:	b011      	add	sp, #68	; 0x44
 8004200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004204:	4652      	mov	r2, sl
 8004206:	4643      	mov	r3, r8
 8004208:	4650      	mov	r0, sl
 800420a:	4641      	mov	r1, r8
 800420c:	f7fc fbfe 	bl	8000a0c <__aeabi_dcmpun>
 8004210:	b148      	cbz	r0, 8004226 <_printf_float+0xe2>
 8004212:	f1b8 0f00 	cmp.w	r8, #0
 8004216:	bfb8      	it	lt
 8004218:	232d      	movlt	r3, #45	; 0x2d
 800421a:	4a80      	ldr	r2, [pc, #512]	; (800441c <_printf_float+0x2d8>)
 800421c:	bfb8      	it	lt
 800421e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004222:	4b7f      	ldr	r3, [pc, #508]	; (8004420 <_printf_float+0x2dc>)
 8004224:	e7d3      	b.n	80041ce <_printf_float+0x8a>
 8004226:	6863      	ldr	r3, [r4, #4]
 8004228:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800422c:	1c5a      	adds	r2, r3, #1
 800422e:	d142      	bne.n	80042b6 <_printf_float+0x172>
 8004230:	2306      	movs	r3, #6
 8004232:	6063      	str	r3, [r4, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	9206      	str	r2, [sp, #24]
 8004238:	aa0e      	add	r2, sp, #56	; 0x38
 800423a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800423e:	aa0d      	add	r2, sp, #52	; 0x34
 8004240:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004244:	9203      	str	r2, [sp, #12]
 8004246:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800424a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800424e:	6023      	str	r3, [r4, #0]
 8004250:	6863      	ldr	r3, [r4, #4]
 8004252:	4652      	mov	r2, sl
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	4628      	mov	r0, r5
 8004258:	4643      	mov	r3, r8
 800425a:	910b      	str	r1, [sp, #44]	; 0x2c
 800425c:	f7ff fed6 	bl	800400c <__cvt>
 8004260:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004262:	4680      	mov	r8, r0
 8004264:	2947      	cmp	r1, #71	; 0x47
 8004266:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004268:	d108      	bne.n	800427c <_printf_float+0x138>
 800426a:	1cc8      	adds	r0, r1, #3
 800426c:	db02      	blt.n	8004274 <_printf_float+0x130>
 800426e:	6863      	ldr	r3, [r4, #4]
 8004270:	4299      	cmp	r1, r3
 8004272:	dd40      	ble.n	80042f6 <_printf_float+0x1b2>
 8004274:	f1a9 0902 	sub.w	r9, r9, #2
 8004278:	fa5f f989 	uxtb.w	r9, r9
 800427c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004280:	d81f      	bhi.n	80042c2 <_printf_float+0x17e>
 8004282:	464a      	mov	r2, r9
 8004284:	3901      	subs	r1, #1
 8004286:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800428a:	910d      	str	r1, [sp, #52]	; 0x34
 800428c:	f7ff ff1d 	bl	80040ca <__exponent>
 8004290:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004292:	4682      	mov	sl, r0
 8004294:	1813      	adds	r3, r2, r0
 8004296:	2a01      	cmp	r2, #1
 8004298:	6123      	str	r3, [r4, #16]
 800429a:	dc02      	bgt.n	80042a2 <_printf_float+0x15e>
 800429c:	6822      	ldr	r2, [r4, #0]
 800429e:	07d2      	lsls	r2, r2, #31
 80042a0:	d501      	bpl.n	80042a6 <_printf_float+0x162>
 80042a2:	3301      	adds	r3, #1
 80042a4:	6123      	str	r3, [r4, #16]
 80042a6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d09b      	beq.n	80041e6 <_printf_float+0xa2>
 80042ae:	232d      	movs	r3, #45	; 0x2d
 80042b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042b4:	e797      	b.n	80041e6 <_printf_float+0xa2>
 80042b6:	2947      	cmp	r1, #71	; 0x47
 80042b8:	d1bc      	bne.n	8004234 <_printf_float+0xf0>
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1ba      	bne.n	8004234 <_printf_float+0xf0>
 80042be:	2301      	movs	r3, #1
 80042c0:	e7b7      	b.n	8004232 <_printf_float+0xee>
 80042c2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80042c6:	d118      	bne.n	80042fa <_printf_float+0x1b6>
 80042c8:	2900      	cmp	r1, #0
 80042ca:	6863      	ldr	r3, [r4, #4]
 80042cc:	dd0b      	ble.n	80042e6 <_printf_float+0x1a2>
 80042ce:	6121      	str	r1, [r4, #16]
 80042d0:	b913      	cbnz	r3, 80042d8 <_printf_float+0x194>
 80042d2:	6822      	ldr	r2, [r4, #0]
 80042d4:	07d0      	lsls	r0, r2, #31
 80042d6:	d502      	bpl.n	80042de <_printf_float+0x19a>
 80042d8:	3301      	adds	r3, #1
 80042da:	440b      	add	r3, r1
 80042dc:	6123      	str	r3, [r4, #16]
 80042de:	f04f 0a00 	mov.w	sl, #0
 80042e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80042e4:	e7df      	b.n	80042a6 <_printf_float+0x162>
 80042e6:	b913      	cbnz	r3, 80042ee <_printf_float+0x1aa>
 80042e8:	6822      	ldr	r2, [r4, #0]
 80042ea:	07d2      	lsls	r2, r2, #31
 80042ec:	d501      	bpl.n	80042f2 <_printf_float+0x1ae>
 80042ee:	3302      	adds	r3, #2
 80042f0:	e7f4      	b.n	80042dc <_printf_float+0x198>
 80042f2:	2301      	movs	r3, #1
 80042f4:	e7f2      	b.n	80042dc <_printf_float+0x198>
 80042f6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80042fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042fc:	4299      	cmp	r1, r3
 80042fe:	db05      	blt.n	800430c <_printf_float+0x1c8>
 8004300:	6823      	ldr	r3, [r4, #0]
 8004302:	6121      	str	r1, [r4, #16]
 8004304:	07d8      	lsls	r0, r3, #31
 8004306:	d5ea      	bpl.n	80042de <_printf_float+0x19a>
 8004308:	1c4b      	adds	r3, r1, #1
 800430a:	e7e7      	b.n	80042dc <_printf_float+0x198>
 800430c:	2900      	cmp	r1, #0
 800430e:	bfcc      	ite	gt
 8004310:	2201      	movgt	r2, #1
 8004312:	f1c1 0202 	rsble	r2, r1, #2
 8004316:	4413      	add	r3, r2
 8004318:	e7e0      	b.n	80042dc <_printf_float+0x198>
 800431a:	6823      	ldr	r3, [r4, #0]
 800431c:	055a      	lsls	r2, r3, #21
 800431e:	d407      	bmi.n	8004330 <_printf_float+0x1ec>
 8004320:	6923      	ldr	r3, [r4, #16]
 8004322:	4642      	mov	r2, r8
 8004324:	4631      	mov	r1, r6
 8004326:	4628      	mov	r0, r5
 8004328:	47b8      	blx	r7
 800432a:	3001      	adds	r0, #1
 800432c:	d12b      	bne.n	8004386 <_printf_float+0x242>
 800432e:	e764      	b.n	80041fa <_printf_float+0xb6>
 8004330:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004334:	f240 80dd 	bls.w	80044f2 <_printf_float+0x3ae>
 8004338:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800433c:	2200      	movs	r2, #0
 800433e:	2300      	movs	r3, #0
 8004340:	f7fc fb32 	bl	80009a8 <__aeabi_dcmpeq>
 8004344:	2800      	cmp	r0, #0
 8004346:	d033      	beq.n	80043b0 <_printf_float+0x26c>
 8004348:	2301      	movs	r3, #1
 800434a:	4631      	mov	r1, r6
 800434c:	4628      	mov	r0, r5
 800434e:	4a35      	ldr	r2, [pc, #212]	; (8004424 <_printf_float+0x2e0>)
 8004350:	47b8      	blx	r7
 8004352:	3001      	adds	r0, #1
 8004354:	f43f af51 	beq.w	80041fa <_printf_float+0xb6>
 8004358:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800435c:	429a      	cmp	r2, r3
 800435e:	db02      	blt.n	8004366 <_printf_float+0x222>
 8004360:	6823      	ldr	r3, [r4, #0]
 8004362:	07d8      	lsls	r0, r3, #31
 8004364:	d50f      	bpl.n	8004386 <_printf_float+0x242>
 8004366:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800436a:	4631      	mov	r1, r6
 800436c:	4628      	mov	r0, r5
 800436e:	47b8      	blx	r7
 8004370:	3001      	adds	r0, #1
 8004372:	f43f af42 	beq.w	80041fa <_printf_float+0xb6>
 8004376:	f04f 0800 	mov.w	r8, #0
 800437a:	f104 091a 	add.w	r9, r4, #26
 800437e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004380:	3b01      	subs	r3, #1
 8004382:	4543      	cmp	r3, r8
 8004384:	dc09      	bgt.n	800439a <_printf_float+0x256>
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	079b      	lsls	r3, r3, #30
 800438a:	f100 8104 	bmi.w	8004596 <_printf_float+0x452>
 800438e:	68e0      	ldr	r0, [r4, #12]
 8004390:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004392:	4298      	cmp	r0, r3
 8004394:	bfb8      	it	lt
 8004396:	4618      	movlt	r0, r3
 8004398:	e731      	b.n	80041fe <_printf_float+0xba>
 800439a:	2301      	movs	r3, #1
 800439c:	464a      	mov	r2, r9
 800439e:	4631      	mov	r1, r6
 80043a0:	4628      	mov	r0, r5
 80043a2:	47b8      	blx	r7
 80043a4:	3001      	adds	r0, #1
 80043a6:	f43f af28 	beq.w	80041fa <_printf_float+0xb6>
 80043aa:	f108 0801 	add.w	r8, r8, #1
 80043ae:	e7e6      	b.n	800437e <_printf_float+0x23a>
 80043b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	dc38      	bgt.n	8004428 <_printf_float+0x2e4>
 80043b6:	2301      	movs	r3, #1
 80043b8:	4631      	mov	r1, r6
 80043ba:	4628      	mov	r0, r5
 80043bc:	4a19      	ldr	r2, [pc, #100]	; (8004424 <_printf_float+0x2e0>)
 80043be:	47b8      	blx	r7
 80043c0:	3001      	adds	r0, #1
 80043c2:	f43f af1a 	beq.w	80041fa <_printf_float+0xb6>
 80043c6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80043ca:	4313      	orrs	r3, r2
 80043cc:	d102      	bne.n	80043d4 <_printf_float+0x290>
 80043ce:	6823      	ldr	r3, [r4, #0]
 80043d0:	07d9      	lsls	r1, r3, #31
 80043d2:	d5d8      	bpl.n	8004386 <_printf_float+0x242>
 80043d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043d8:	4631      	mov	r1, r6
 80043da:	4628      	mov	r0, r5
 80043dc:	47b8      	blx	r7
 80043de:	3001      	adds	r0, #1
 80043e0:	f43f af0b 	beq.w	80041fa <_printf_float+0xb6>
 80043e4:	f04f 0900 	mov.w	r9, #0
 80043e8:	f104 0a1a 	add.w	sl, r4, #26
 80043ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043ee:	425b      	negs	r3, r3
 80043f0:	454b      	cmp	r3, r9
 80043f2:	dc01      	bgt.n	80043f8 <_printf_float+0x2b4>
 80043f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043f6:	e794      	b.n	8004322 <_printf_float+0x1de>
 80043f8:	2301      	movs	r3, #1
 80043fa:	4652      	mov	r2, sl
 80043fc:	4631      	mov	r1, r6
 80043fe:	4628      	mov	r0, r5
 8004400:	47b8      	blx	r7
 8004402:	3001      	adds	r0, #1
 8004404:	f43f aef9 	beq.w	80041fa <_printf_float+0xb6>
 8004408:	f109 0901 	add.w	r9, r9, #1
 800440c:	e7ee      	b.n	80043ec <_printf_float+0x2a8>
 800440e:	bf00      	nop
 8004410:	7fefffff 	.word	0x7fefffff
 8004414:	080099ba 	.word	0x080099ba
 8004418:	080099be 	.word	0x080099be
 800441c:	080099c2 	.word	0x080099c2
 8004420:	080099c6 	.word	0x080099c6
 8004424:	080099ca 	.word	0x080099ca
 8004428:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800442a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800442c:	429a      	cmp	r2, r3
 800442e:	bfa8      	it	ge
 8004430:	461a      	movge	r2, r3
 8004432:	2a00      	cmp	r2, #0
 8004434:	4691      	mov	r9, r2
 8004436:	dc37      	bgt.n	80044a8 <_printf_float+0x364>
 8004438:	f04f 0b00 	mov.w	fp, #0
 800443c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004440:	f104 021a 	add.w	r2, r4, #26
 8004444:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004448:	ebaa 0309 	sub.w	r3, sl, r9
 800444c:	455b      	cmp	r3, fp
 800444e:	dc33      	bgt.n	80044b8 <_printf_float+0x374>
 8004450:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004454:	429a      	cmp	r2, r3
 8004456:	db3b      	blt.n	80044d0 <_printf_float+0x38c>
 8004458:	6823      	ldr	r3, [r4, #0]
 800445a:	07da      	lsls	r2, r3, #31
 800445c:	d438      	bmi.n	80044d0 <_printf_float+0x38c>
 800445e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004462:	eba2 0903 	sub.w	r9, r2, r3
 8004466:	eba2 020a 	sub.w	r2, r2, sl
 800446a:	4591      	cmp	r9, r2
 800446c:	bfa8      	it	ge
 800446e:	4691      	movge	r9, r2
 8004470:	f1b9 0f00 	cmp.w	r9, #0
 8004474:	dc34      	bgt.n	80044e0 <_printf_float+0x39c>
 8004476:	f04f 0800 	mov.w	r8, #0
 800447a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800447e:	f104 0a1a 	add.w	sl, r4, #26
 8004482:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004486:	1a9b      	subs	r3, r3, r2
 8004488:	eba3 0309 	sub.w	r3, r3, r9
 800448c:	4543      	cmp	r3, r8
 800448e:	f77f af7a 	ble.w	8004386 <_printf_float+0x242>
 8004492:	2301      	movs	r3, #1
 8004494:	4652      	mov	r2, sl
 8004496:	4631      	mov	r1, r6
 8004498:	4628      	mov	r0, r5
 800449a:	47b8      	blx	r7
 800449c:	3001      	adds	r0, #1
 800449e:	f43f aeac 	beq.w	80041fa <_printf_float+0xb6>
 80044a2:	f108 0801 	add.w	r8, r8, #1
 80044a6:	e7ec      	b.n	8004482 <_printf_float+0x33e>
 80044a8:	4613      	mov	r3, r2
 80044aa:	4631      	mov	r1, r6
 80044ac:	4642      	mov	r2, r8
 80044ae:	4628      	mov	r0, r5
 80044b0:	47b8      	blx	r7
 80044b2:	3001      	adds	r0, #1
 80044b4:	d1c0      	bne.n	8004438 <_printf_float+0x2f4>
 80044b6:	e6a0      	b.n	80041fa <_printf_float+0xb6>
 80044b8:	2301      	movs	r3, #1
 80044ba:	4631      	mov	r1, r6
 80044bc:	4628      	mov	r0, r5
 80044be:	920b      	str	r2, [sp, #44]	; 0x2c
 80044c0:	47b8      	blx	r7
 80044c2:	3001      	adds	r0, #1
 80044c4:	f43f ae99 	beq.w	80041fa <_printf_float+0xb6>
 80044c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80044ca:	f10b 0b01 	add.w	fp, fp, #1
 80044ce:	e7b9      	b.n	8004444 <_printf_float+0x300>
 80044d0:	4631      	mov	r1, r6
 80044d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044d6:	4628      	mov	r0, r5
 80044d8:	47b8      	blx	r7
 80044da:	3001      	adds	r0, #1
 80044dc:	d1bf      	bne.n	800445e <_printf_float+0x31a>
 80044de:	e68c      	b.n	80041fa <_printf_float+0xb6>
 80044e0:	464b      	mov	r3, r9
 80044e2:	4631      	mov	r1, r6
 80044e4:	4628      	mov	r0, r5
 80044e6:	eb08 020a 	add.w	r2, r8, sl
 80044ea:	47b8      	blx	r7
 80044ec:	3001      	adds	r0, #1
 80044ee:	d1c2      	bne.n	8004476 <_printf_float+0x332>
 80044f0:	e683      	b.n	80041fa <_printf_float+0xb6>
 80044f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044f4:	2a01      	cmp	r2, #1
 80044f6:	dc01      	bgt.n	80044fc <_printf_float+0x3b8>
 80044f8:	07db      	lsls	r3, r3, #31
 80044fa:	d539      	bpl.n	8004570 <_printf_float+0x42c>
 80044fc:	2301      	movs	r3, #1
 80044fe:	4642      	mov	r2, r8
 8004500:	4631      	mov	r1, r6
 8004502:	4628      	mov	r0, r5
 8004504:	47b8      	blx	r7
 8004506:	3001      	adds	r0, #1
 8004508:	f43f ae77 	beq.w	80041fa <_printf_float+0xb6>
 800450c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004510:	4631      	mov	r1, r6
 8004512:	4628      	mov	r0, r5
 8004514:	47b8      	blx	r7
 8004516:	3001      	adds	r0, #1
 8004518:	f43f ae6f 	beq.w	80041fa <_printf_float+0xb6>
 800451c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004520:	2200      	movs	r2, #0
 8004522:	2300      	movs	r3, #0
 8004524:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004528:	f7fc fa3e 	bl	80009a8 <__aeabi_dcmpeq>
 800452c:	b9d8      	cbnz	r0, 8004566 <_printf_float+0x422>
 800452e:	f109 33ff 	add.w	r3, r9, #4294967295
 8004532:	f108 0201 	add.w	r2, r8, #1
 8004536:	4631      	mov	r1, r6
 8004538:	4628      	mov	r0, r5
 800453a:	47b8      	blx	r7
 800453c:	3001      	adds	r0, #1
 800453e:	d10e      	bne.n	800455e <_printf_float+0x41a>
 8004540:	e65b      	b.n	80041fa <_printf_float+0xb6>
 8004542:	2301      	movs	r3, #1
 8004544:	464a      	mov	r2, r9
 8004546:	4631      	mov	r1, r6
 8004548:	4628      	mov	r0, r5
 800454a:	47b8      	blx	r7
 800454c:	3001      	adds	r0, #1
 800454e:	f43f ae54 	beq.w	80041fa <_printf_float+0xb6>
 8004552:	f108 0801 	add.w	r8, r8, #1
 8004556:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004558:	3b01      	subs	r3, #1
 800455a:	4543      	cmp	r3, r8
 800455c:	dcf1      	bgt.n	8004542 <_printf_float+0x3fe>
 800455e:	4653      	mov	r3, sl
 8004560:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004564:	e6de      	b.n	8004324 <_printf_float+0x1e0>
 8004566:	f04f 0800 	mov.w	r8, #0
 800456a:	f104 091a 	add.w	r9, r4, #26
 800456e:	e7f2      	b.n	8004556 <_printf_float+0x412>
 8004570:	2301      	movs	r3, #1
 8004572:	4642      	mov	r2, r8
 8004574:	e7df      	b.n	8004536 <_printf_float+0x3f2>
 8004576:	2301      	movs	r3, #1
 8004578:	464a      	mov	r2, r9
 800457a:	4631      	mov	r1, r6
 800457c:	4628      	mov	r0, r5
 800457e:	47b8      	blx	r7
 8004580:	3001      	adds	r0, #1
 8004582:	f43f ae3a 	beq.w	80041fa <_printf_float+0xb6>
 8004586:	f108 0801 	add.w	r8, r8, #1
 800458a:	68e3      	ldr	r3, [r4, #12]
 800458c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800458e:	1a5b      	subs	r3, r3, r1
 8004590:	4543      	cmp	r3, r8
 8004592:	dcf0      	bgt.n	8004576 <_printf_float+0x432>
 8004594:	e6fb      	b.n	800438e <_printf_float+0x24a>
 8004596:	f04f 0800 	mov.w	r8, #0
 800459a:	f104 0919 	add.w	r9, r4, #25
 800459e:	e7f4      	b.n	800458a <_printf_float+0x446>

080045a0 <_printf_common>:
 80045a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045a4:	4616      	mov	r6, r2
 80045a6:	4699      	mov	r9, r3
 80045a8:	688a      	ldr	r2, [r1, #8]
 80045aa:	690b      	ldr	r3, [r1, #16]
 80045ac:	4607      	mov	r7, r0
 80045ae:	4293      	cmp	r3, r2
 80045b0:	bfb8      	it	lt
 80045b2:	4613      	movlt	r3, r2
 80045b4:	6033      	str	r3, [r6, #0]
 80045b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045ba:	460c      	mov	r4, r1
 80045bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045c0:	b10a      	cbz	r2, 80045c6 <_printf_common+0x26>
 80045c2:	3301      	adds	r3, #1
 80045c4:	6033      	str	r3, [r6, #0]
 80045c6:	6823      	ldr	r3, [r4, #0]
 80045c8:	0699      	lsls	r1, r3, #26
 80045ca:	bf42      	ittt	mi
 80045cc:	6833      	ldrmi	r3, [r6, #0]
 80045ce:	3302      	addmi	r3, #2
 80045d0:	6033      	strmi	r3, [r6, #0]
 80045d2:	6825      	ldr	r5, [r4, #0]
 80045d4:	f015 0506 	ands.w	r5, r5, #6
 80045d8:	d106      	bne.n	80045e8 <_printf_common+0x48>
 80045da:	f104 0a19 	add.w	sl, r4, #25
 80045de:	68e3      	ldr	r3, [r4, #12]
 80045e0:	6832      	ldr	r2, [r6, #0]
 80045e2:	1a9b      	subs	r3, r3, r2
 80045e4:	42ab      	cmp	r3, r5
 80045e6:	dc2b      	bgt.n	8004640 <_printf_common+0xa0>
 80045e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045ec:	1e13      	subs	r3, r2, #0
 80045ee:	6822      	ldr	r2, [r4, #0]
 80045f0:	bf18      	it	ne
 80045f2:	2301      	movne	r3, #1
 80045f4:	0692      	lsls	r2, r2, #26
 80045f6:	d430      	bmi.n	800465a <_printf_common+0xba>
 80045f8:	4649      	mov	r1, r9
 80045fa:	4638      	mov	r0, r7
 80045fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004600:	47c0      	blx	r8
 8004602:	3001      	adds	r0, #1
 8004604:	d023      	beq.n	800464e <_printf_common+0xae>
 8004606:	6823      	ldr	r3, [r4, #0]
 8004608:	6922      	ldr	r2, [r4, #16]
 800460a:	f003 0306 	and.w	r3, r3, #6
 800460e:	2b04      	cmp	r3, #4
 8004610:	bf14      	ite	ne
 8004612:	2500      	movne	r5, #0
 8004614:	6833      	ldreq	r3, [r6, #0]
 8004616:	f04f 0600 	mov.w	r6, #0
 800461a:	bf08      	it	eq
 800461c:	68e5      	ldreq	r5, [r4, #12]
 800461e:	f104 041a 	add.w	r4, r4, #26
 8004622:	bf08      	it	eq
 8004624:	1aed      	subeq	r5, r5, r3
 8004626:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800462a:	bf08      	it	eq
 800462c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004630:	4293      	cmp	r3, r2
 8004632:	bfc4      	itt	gt
 8004634:	1a9b      	subgt	r3, r3, r2
 8004636:	18ed      	addgt	r5, r5, r3
 8004638:	42b5      	cmp	r5, r6
 800463a:	d11a      	bne.n	8004672 <_printf_common+0xd2>
 800463c:	2000      	movs	r0, #0
 800463e:	e008      	b.n	8004652 <_printf_common+0xb2>
 8004640:	2301      	movs	r3, #1
 8004642:	4652      	mov	r2, sl
 8004644:	4649      	mov	r1, r9
 8004646:	4638      	mov	r0, r7
 8004648:	47c0      	blx	r8
 800464a:	3001      	adds	r0, #1
 800464c:	d103      	bne.n	8004656 <_printf_common+0xb6>
 800464e:	f04f 30ff 	mov.w	r0, #4294967295
 8004652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004656:	3501      	adds	r5, #1
 8004658:	e7c1      	b.n	80045de <_printf_common+0x3e>
 800465a:	2030      	movs	r0, #48	; 0x30
 800465c:	18e1      	adds	r1, r4, r3
 800465e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004668:	4422      	add	r2, r4
 800466a:	3302      	adds	r3, #2
 800466c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004670:	e7c2      	b.n	80045f8 <_printf_common+0x58>
 8004672:	2301      	movs	r3, #1
 8004674:	4622      	mov	r2, r4
 8004676:	4649      	mov	r1, r9
 8004678:	4638      	mov	r0, r7
 800467a:	47c0      	blx	r8
 800467c:	3001      	adds	r0, #1
 800467e:	d0e6      	beq.n	800464e <_printf_common+0xae>
 8004680:	3601      	adds	r6, #1
 8004682:	e7d9      	b.n	8004638 <_printf_common+0x98>

08004684 <_printf_i>:
 8004684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004688:	7e0f      	ldrb	r7, [r1, #24]
 800468a:	4691      	mov	r9, r2
 800468c:	2f78      	cmp	r7, #120	; 0x78
 800468e:	4680      	mov	r8, r0
 8004690:	460c      	mov	r4, r1
 8004692:	469a      	mov	sl, r3
 8004694:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004696:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800469a:	d807      	bhi.n	80046ac <_printf_i+0x28>
 800469c:	2f62      	cmp	r7, #98	; 0x62
 800469e:	d80a      	bhi.n	80046b6 <_printf_i+0x32>
 80046a0:	2f00      	cmp	r7, #0
 80046a2:	f000 80d5 	beq.w	8004850 <_printf_i+0x1cc>
 80046a6:	2f58      	cmp	r7, #88	; 0x58
 80046a8:	f000 80c1 	beq.w	800482e <_printf_i+0x1aa>
 80046ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046b4:	e03a      	b.n	800472c <_printf_i+0xa8>
 80046b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046ba:	2b15      	cmp	r3, #21
 80046bc:	d8f6      	bhi.n	80046ac <_printf_i+0x28>
 80046be:	a101      	add	r1, pc, #4	; (adr r1, 80046c4 <_printf_i+0x40>)
 80046c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046c4:	0800471d 	.word	0x0800471d
 80046c8:	08004731 	.word	0x08004731
 80046cc:	080046ad 	.word	0x080046ad
 80046d0:	080046ad 	.word	0x080046ad
 80046d4:	080046ad 	.word	0x080046ad
 80046d8:	080046ad 	.word	0x080046ad
 80046dc:	08004731 	.word	0x08004731
 80046e0:	080046ad 	.word	0x080046ad
 80046e4:	080046ad 	.word	0x080046ad
 80046e8:	080046ad 	.word	0x080046ad
 80046ec:	080046ad 	.word	0x080046ad
 80046f0:	08004837 	.word	0x08004837
 80046f4:	0800475d 	.word	0x0800475d
 80046f8:	080047f1 	.word	0x080047f1
 80046fc:	080046ad 	.word	0x080046ad
 8004700:	080046ad 	.word	0x080046ad
 8004704:	08004859 	.word	0x08004859
 8004708:	080046ad 	.word	0x080046ad
 800470c:	0800475d 	.word	0x0800475d
 8004710:	080046ad 	.word	0x080046ad
 8004714:	080046ad 	.word	0x080046ad
 8004718:	080047f9 	.word	0x080047f9
 800471c:	682b      	ldr	r3, [r5, #0]
 800471e:	1d1a      	adds	r2, r3, #4
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	602a      	str	r2, [r5, #0]
 8004724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004728:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800472c:	2301      	movs	r3, #1
 800472e:	e0a0      	b.n	8004872 <_printf_i+0x1ee>
 8004730:	6820      	ldr	r0, [r4, #0]
 8004732:	682b      	ldr	r3, [r5, #0]
 8004734:	0607      	lsls	r7, r0, #24
 8004736:	f103 0104 	add.w	r1, r3, #4
 800473a:	6029      	str	r1, [r5, #0]
 800473c:	d501      	bpl.n	8004742 <_printf_i+0xbe>
 800473e:	681e      	ldr	r6, [r3, #0]
 8004740:	e003      	b.n	800474a <_printf_i+0xc6>
 8004742:	0646      	lsls	r6, r0, #25
 8004744:	d5fb      	bpl.n	800473e <_printf_i+0xba>
 8004746:	f9b3 6000 	ldrsh.w	r6, [r3]
 800474a:	2e00      	cmp	r6, #0
 800474c:	da03      	bge.n	8004756 <_printf_i+0xd2>
 800474e:	232d      	movs	r3, #45	; 0x2d
 8004750:	4276      	negs	r6, r6
 8004752:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004756:	230a      	movs	r3, #10
 8004758:	4859      	ldr	r0, [pc, #356]	; (80048c0 <_printf_i+0x23c>)
 800475a:	e012      	b.n	8004782 <_printf_i+0xfe>
 800475c:	682b      	ldr	r3, [r5, #0]
 800475e:	6820      	ldr	r0, [r4, #0]
 8004760:	1d19      	adds	r1, r3, #4
 8004762:	6029      	str	r1, [r5, #0]
 8004764:	0605      	lsls	r5, r0, #24
 8004766:	d501      	bpl.n	800476c <_printf_i+0xe8>
 8004768:	681e      	ldr	r6, [r3, #0]
 800476a:	e002      	b.n	8004772 <_printf_i+0xee>
 800476c:	0641      	lsls	r1, r0, #25
 800476e:	d5fb      	bpl.n	8004768 <_printf_i+0xe4>
 8004770:	881e      	ldrh	r6, [r3, #0]
 8004772:	2f6f      	cmp	r7, #111	; 0x6f
 8004774:	bf0c      	ite	eq
 8004776:	2308      	moveq	r3, #8
 8004778:	230a      	movne	r3, #10
 800477a:	4851      	ldr	r0, [pc, #324]	; (80048c0 <_printf_i+0x23c>)
 800477c:	2100      	movs	r1, #0
 800477e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004782:	6865      	ldr	r5, [r4, #4]
 8004784:	2d00      	cmp	r5, #0
 8004786:	bfa8      	it	ge
 8004788:	6821      	ldrge	r1, [r4, #0]
 800478a:	60a5      	str	r5, [r4, #8]
 800478c:	bfa4      	itt	ge
 800478e:	f021 0104 	bicge.w	r1, r1, #4
 8004792:	6021      	strge	r1, [r4, #0]
 8004794:	b90e      	cbnz	r6, 800479a <_printf_i+0x116>
 8004796:	2d00      	cmp	r5, #0
 8004798:	d04b      	beq.n	8004832 <_printf_i+0x1ae>
 800479a:	4615      	mov	r5, r2
 800479c:	fbb6 f1f3 	udiv	r1, r6, r3
 80047a0:	fb03 6711 	mls	r7, r3, r1, r6
 80047a4:	5dc7      	ldrb	r7, [r0, r7]
 80047a6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80047aa:	4637      	mov	r7, r6
 80047ac:	42bb      	cmp	r3, r7
 80047ae:	460e      	mov	r6, r1
 80047b0:	d9f4      	bls.n	800479c <_printf_i+0x118>
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d10b      	bne.n	80047ce <_printf_i+0x14a>
 80047b6:	6823      	ldr	r3, [r4, #0]
 80047b8:	07de      	lsls	r6, r3, #31
 80047ba:	d508      	bpl.n	80047ce <_printf_i+0x14a>
 80047bc:	6923      	ldr	r3, [r4, #16]
 80047be:	6861      	ldr	r1, [r4, #4]
 80047c0:	4299      	cmp	r1, r3
 80047c2:	bfde      	ittt	le
 80047c4:	2330      	movle	r3, #48	; 0x30
 80047c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80047ce:	1b52      	subs	r2, r2, r5
 80047d0:	6122      	str	r2, [r4, #16]
 80047d2:	464b      	mov	r3, r9
 80047d4:	4621      	mov	r1, r4
 80047d6:	4640      	mov	r0, r8
 80047d8:	f8cd a000 	str.w	sl, [sp]
 80047dc:	aa03      	add	r2, sp, #12
 80047de:	f7ff fedf 	bl	80045a0 <_printf_common>
 80047e2:	3001      	adds	r0, #1
 80047e4:	d14a      	bne.n	800487c <_printf_i+0x1f8>
 80047e6:	f04f 30ff 	mov.w	r0, #4294967295
 80047ea:	b004      	add	sp, #16
 80047ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	f043 0320 	orr.w	r3, r3, #32
 80047f6:	6023      	str	r3, [r4, #0]
 80047f8:	2778      	movs	r7, #120	; 0x78
 80047fa:	4832      	ldr	r0, [pc, #200]	; (80048c4 <_printf_i+0x240>)
 80047fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004800:	6823      	ldr	r3, [r4, #0]
 8004802:	6829      	ldr	r1, [r5, #0]
 8004804:	061f      	lsls	r7, r3, #24
 8004806:	f851 6b04 	ldr.w	r6, [r1], #4
 800480a:	d402      	bmi.n	8004812 <_printf_i+0x18e>
 800480c:	065f      	lsls	r7, r3, #25
 800480e:	bf48      	it	mi
 8004810:	b2b6      	uxthmi	r6, r6
 8004812:	07df      	lsls	r7, r3, #31
 8004814:	bf48      	it	mi
 8004816:	f043 0320 	orrmi.w	r3, r3, #32
 800481a:	6029      	str	r1, [r5, #0]
 800481c:	bf48      	it	mi
 800481e:	6023      	strmi	r3, [r4, #0]
 8004820:	b91e      	cbnz	r6, 800482a <_printf_i+0x1a6>
 8004822:	6823      	ldr	r3, [r4, #0]
 8004824:	f023 0320 	bic.w	r3, r3, #32
 8004828:	6023      	str	r3, [r4, #0]
 800482a:	2310      	movs	r3, #16
 800482c:	e7a6      	b.n	800477c <_printf_i+0xf8>
 800482e:	4824      	ldr	r0, [pc, #144]	; (80048c0 <_printf_i+0x23c>)
 8004830:	e7e4      	b.n	80047fc <_printf_i+0x178>
 8004832:	4615      	mov	r5, r2
 8004834:	e7bd      	b.n	80047b2 <_printf_i+0x12e>
 8004836:	682b      	ldr	r3, [r5, #0]
 8004838:	6826      	ldr	r6, [r4, #0]
 800483a:	1d18      	adds	r0, r3, #4
 800483c:	6961      	ldr	r1, [r4, #20]
 800483e:	6028      	str	r0, [r5, #0]
 8004840:	0635      	lsls	r5, r6, #24
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	d501      	bpl.n	800484a <_printf_i+0x1c6>
 8004846:	6019      	str	r1, [r3, #0]
 8004848:	e002      	b.n	8004850 <_printf_i+0x1cc>
 800484a:	0670      	lsls	r0, r6, #25
 800484c:	d5fb      	bpl.n	8004846 <_printf_i+0x1c2>
 800484e:	8019      	strh	r1, [r3, #0]
 8004850:	2300      	movs	r3, #0
 8004852:	4615      	mov	r5, r2
 8004854:	6123      	str	r3, [r4, #16]
 8004856:	e7bc      	b.n	80047d2 <_printf_i+0x14e>
 8004858:	682b      	ldr	r3, [r5, #0]
 800485a:	2100      	movs	r1, #0
 800485c:	1d1a      	adds	r2, r3, #4
 800485e:	602a      	str	r2, [r5, #0]
 8004860:	681d      	ldr	r5, [r3, #0]
 8004862:	6862      	ldr	r2, [r4, #4]
 8004864:	4628      	mov	r0, r5
 8004866:	f000 fbcf 	bl	8005008 <memchr>
 800486a:	b108      	cbz	r0, 8004870 <_printf_i+0x1ec>
 800486c:	1b40      	subs	r0, r0, r5
 800486e:	6060      	str	r0, [r4, #4]
 8004870:	6863      	ldr	r3, [r4, #4]
 8004872:	6123      	str	r3, [r4, #16]
 8004874:	2300      	movs	r3, #0
 8004876:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800487a:	e7aa      	b.n	80047d2 <_printf_i+0x14e>
 800487c:	462a      	mov	r2, r5
 800487e:	4649      	mov	r1, r9
 8004880:	4640      	mov	r0, r8
 8004882:	6923      	ldr	r3, [r4, #16]
 8004884:	47d0      	blx	sl
 8004886:	3001      	adds	r0, #1
 8004888:	d0ad      	beq.n	80047e6 <_printf_i+0x162>
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	079b      	lsls	r3, r3, #30
 800488e:	d413      	bmi.n	80048b8 <_printf_i+0x234>
 8004890:	68e0      	ldr	r0, [r4, #12]
 8004892:	9b03      	ldr	r3, [sp, #12]
 8004894:	4298      	cmp	r0, r3
 8004896:	bfb8      	it	lt
 8004898:	4618      	movlt	r0, r3
 800489a:	e7a6      	b.n	80047ea <_printf_i+0x166>
 800489c:	2301      	movs	r3, #1
 800489e:	4632      	mov	r2, r6
 80048a0:	4649      	mov	r1, r9
 80048a2:	4640      	mov	r0, r8
 80048a4:	47d0      	blx	sl
 80048a6:	3001      	adds	r0, #1
 80048a8:	d09d      	beq.n	80047e6 <_printf_i+0x162>
 80048aa:	3501      	adds	r5, #1
 80048ac:	68e3      	ldr	r3, [r4, #12]
 80048ae:	9903      	ldr	r1, [sp, #12]
 80048b0:	1a5b      	subs	r3, r3, r1
 80048b2:	42ab      	cmp	r3, r5
 80048b4:	dcf2      	bgt.n	800489c <_printf_i+0x218>
 80048b6:	e7eb      	b.n	8004890 <_printf_i+0x20c>
 80048b8:	2500      	movs	r5, #0
 80048ba:	f104 0619 	add.w	r6, r4, #25
 80048be:	e7f5      	b.n	80048ac <_printf_i+0x228>
 80048c0:	080099cc 	.word	0x080099cc
 80048c4:	080099dd 	.word	0x080099dd

080048c8 <_scanf_float>:
 80048c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048cc:	b087      	sub	sp, #28
 80048ce:	9303      	str	r3, [sp, #12]
 80048d0:	688b      	ldr	r3, [r1, #8]
 80048d2:	4617      	mov	r7, r2
 80048d4:	1e5a      	subs	r2, r3, #1
 80048d6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80048da:	bf85      	ittet	hi
 80048dc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80048e0:	195b      	addhi	r3, r3, r5
 80048e2:	2300      	movls	r3, #0
 80048e4:	9302      	strhi	r3, [sp, #8]
 80048e6:	bf88      	it	hi
 80048e8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80048ec:	468b      	mov	fp, r1
 80048ee:	f04f 0500 	mov.w	r5, #0
 80048f2:	bf8c      	ite	hi
 80048f4:	608b      	strhi	r3, [r1, #8]
 80048f6:	9302      	strls	r3, [sp, #8]
 80048f8:	680b      	ldr	r3, [r1, #0]
 80048fa:	4680      	mov	r8, r0
 80048fc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004900:	f84b 3b1c 	str.w	r3, [fp], #28
 8004904:	460c      	mov	r4, r1
 8004906:	465e      	mov	r6, fp
 8004908:	46aa      	mov	sl, r5
 800490a:	46a9      	mov	r9, r5
 800490c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004910:	9501      	str	r5, [sp, #4]
 8004912:	68a2      	ldr	r2, [r4, #8]
 8004914:	b152      	cbz	r2, 800492c <_scanf_float+0x64>
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	2b4e      	cmp	r3, #78	; 0x4e
 800491c:	d864      	bhi.n	80049e8 <_scanf_float+0x120>
 800491e:	2b40      	cmp	r3, #64	; 0x40
 8004920:	d83c      	bhi.n	800499c <_scanf_float+0xd4>
 8004922:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004926:	b2c8      	uxtb	r0, r1
 8004928:	280e      	cmp	r0, #14
 800492a:	d93a      	bls.n	80049a2 <_scanf_float+0xda>
 800492c:	f1b9 0f00 	cmp.w	r9, #0
 8004930:	d003      	beq.n	800493a <_scanf_float+0x72>
 8004932:	6823      	ldr	r3, [r4, #0]
 8004934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004938:	6023      	str	r3, [r4, #0]
 800493a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800493e:	f1ba 0f01 	cmp.w	sl, #1
 8004942:	f200 8113 	bhi.w	8004b6c <_scanf_float+0x2a4>
 8004946:	455e      	cmp	r6, fp
 8004948:	f200 8105 	bhi.w	8004b56 <_scanf_float+0x28e>
 800494c:	2501      	movs	r5, #1
 800494e:	4628      	mov	r0, r5
 8004950:	b007      	add	sp, #28
 8004952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004956:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800495a:	2a0d      	cmp	r2, #13
 800495c:	d8e6      	bhi.n	800492c <_scanf_float+0x64>
 800495e:	a101      	add	r1, pc, #4	; (adr r1, 8004964 <_scanf_float+0x9c>)
 8004960:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004964:	08004aa3 	.word	0x08004aa3
 8004968:	0800492d 	.word	0x0800492d
 800496c:	0800492d 	.word	0x0800492d
 8004970:	0800492d 	.word	0x0800492d
 8004974:	08004b03 	.word	0x08004b03
 8004978:	08004adb 	.word	0x08004adb
 800497c:	0800492d 	.word	0x0800492d
 8004980:	0800492d 	.word	0x0800492d
 8004984:	08004ab1 	.word	0x08004ab1
 8004988:	0800492d 	.word	0x0800492d
 800498c:	0800492d 	.word	0x0800492d
 8004990:	0800492d 	.word	0x0800492d
 8004994:	0800492d 	.word	0x0800492d
 8004998:	08004a69 	.word	0x08004a69
 800499c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80049a0:	e7db      	b.n	800495a <_scanf_float+0x92>
 80049a2:	290e      	cmp	r1, #14
 80049a4:	d8c2      	bhi.n	800492c <_scanf_float+0x64>
 80049a6:	a001      	add	r0, pc, #4	; (adr r0, 80049ac <_scanf_float+0xe4>)
 80049a8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80049ac:	08004a5b 	.word	0x08004a5b
 80049b0:	0800492d 	.word	0x0800492d
 80049b4:	08004a5b 	.word	0x08004a5b
 80049b8:	08004aef 	.word	0x08004aef
 80049bc:	0800492d 	.word	0x0800492d
 80049c0:	08004a09 	.word	0x08004a09
 80049c4:	08004a45 	.word	0x08004a45
 80049c8:	08004a45 	.word	0x08004a45
 80049cc:	08004a45 	.word	0x08004a45
 80049d0:	08004a45 	.word	0x08004a45
 80049d4:	08004a45 	.word	0x08004a45
 80049d8:	08004a45 	.word	0x08004a45
 80049dc:	08004a45 	.word	0x08004a45
 80049e0:	08004a45 	.word	0x08004a45
 80049e4:	08004a45 	.word	0x08004a45
 80049e8:	2b6e      	cmp	r3, #110	; 0x6e
 80049ea:	d809      	bhi.n	8004a00 <_scanf_float+0x138>
 80049ec:	2b60      	cmp	r3, #96	; 0x60
 80049ee:	d8b2      	bhi.n	8004956 <_scanf_float+0x8e>
 80049f0:	2b54      	cmp	r3, #84	; 0x54
 80049f2:	d077      	beq.n	8004ae4 <_scanf_float+0x21c>
 80049f4:	2b59      	cmp	r3, #89	; 0x59
 80049f6:	d199      	bne.n	800492c <_scanf_float+0x64>
 80049f8:	2d07      	cmp	r5, #7
 80049fa:	d197      	bne.n	800492c <_scanf_float+0x64>
 80049fc:	2508      	movs	r5, #8
 80049fe:	e029      	b.n	8004a54 <_scanf_float+0x18c>
 8004a00:	2b74      	cmp	r3, #116	; 0x74
 8004a02:	d06f      	beq.n	8004ae4 <_scanf_float+0x21c>
 8004a04:	2b79      	cmp	r3, #121	; 0x79
 8004a06:	e7f6      	b.n	80049f6 <_scanf_float+0x12e>
 8004a08:	6821      	ldr	r1, [r4, #0]
 8004a0a:	05c8      	lsls	r0, r1, #23
 8004a0c:	d51a      	bpl.n	8004a44 <_scanf_float+0x17c>
 8004a0e:	9b02      	ldr	r3, [sp, #8]
 8004a10:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004a14:	6021      	str	r1, [r4, #0]
 8004a16:	f109 0901 	add.w	r9, r9, #1
 8004a1a:	b11b      	cbz	r3, 8004a24 <_scanf_float+0x15c>
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	3201      	adds	r2, #1
 8004a20:	9302      	str	r3, [sp, #8]
 8004a22:	60a2      	str	r2, [r4, #8]
 8004a24:	68a3      	ldr	r3, [r4, #8]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	60a3      	str	r3, [r4, #8]
 8004a2a:	6923      	ldr	r3, [r4, #16]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	6123      	str	r3, [r4, #16]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3b01      	subs	r3, #1
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	607b      	str	r3, [r7, #4]
 8004a38:	f340 8084 	ble.w	8004b44 <_scanf_float+0x27c>
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	603b      	str	r3, [r7, #0]
 8004a42:	e766      	b.n	8004912 <_scanf_float+0x4a>
 8004a44:	eb1a 0f05 	cmn.w	sl, r5
 8004a48:	f47f af70 	bne.w	800492c <_scanf_float+0x64>
 8004a4c:	6822      	ldr	r2, [r4, #0]
 8004a4e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004a52:	6022      	str	r2, [r4, #0]
 8004a54:	f806 3b01 	strb.w	r3, [r6], #1
 8004a58:	e7e4      	b.n	8004a24 <_scanf_float+0x15c>
 8004a5a:	6822      	ldr	r2, [r4, #0]
 8004a5c:	0610      	lsls	r0, r2, #24
 8004a5e:	f57f af65 	bpl.w	800492c <_scanf_float+0x64>
 8004a62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a66:	e7f4      	b.n	8004a52 <_scanf_float+0x18a>
 8004a68:	f1ba 0f00 	cmp.w	sl, #0
 8004a6c:	d10e      	bne.n	8004a8c <_scanf_float+0x1c4>
 8004a6e:	f1b9 0f00 	cmp.w	r9, #0
 8004a72:	d10e      	bne.n	8004a92 <_scanf_float+0x1ca>
 8004a74:	6822      	ldr	r2, [r4, #0]
 8004a76:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004a7a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004a7e:	d108      	bne.n	8004a92 <_scanf_float+0x1ca>
 8004a80:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004a84:	f04f 0a01 	mov.w	sl, #1
 8004a88:	6022      	str	r2, [r4, #0]
 8004a8a:	e7e3      	b.n	8004a54 <_scanf_float+0x18c>
 8004a8c:	f1ba 0f02 	cmp.w	sl, #2
 8004a90:	d055      	beq.n	8004b3e <_scanf_float+0x276>
 8004a92:	2d01      	cmp	r5, #1
 8004a94:	d002      	beq.n	8004a9c <_scanf_float+0x1d4>
 8004a96:	2d04      	cmp	r5, #4
 8004a98:	f47f af48 	bne.w	800492c <_scanf_float+0x64>
 8004a9c:	3501      	adds	r5, #1
 8004a9e:	b2ed      	uxtb	r5, r5
 8004aa0:	e7d8      	b.n	8004a54 <_scanf_float+0x18c>
 8004aa2:	f1ba 0f01 	cmp.w	sl, #1
 8004aa6:	f47f af41 	bne.w	800492c <_scanf_float+0x64>
 8004aaa:	f04f 0a02 	mov.w	sl, #2
 8004aae:	e7d1      	b.n	8004a54 <_scanf_float+0x18c>
 8004ab0:	b97d      	cbnz	r5, 8004ad2 <_scanf_float+0x20a>
 8004ab2:	f1b9 0f00 	cmp.w	r9, #0
 8004ab6:	f47f af3c 	bne.w	8004932 <_scanf_float+0x6a>
 8004aba:	6822      	ldr	r2, [r4, #0]
 8004abc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004ac0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004ac4:	f47f af39 	bne.w	800493a <_scanf_float+0x72>
 8004ac8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004acc:	2501      	movs	r5, #1
 8004ace:	6022      	str	r2, [r4, #0]
 8004ad0:	e7c0      	b.n	8004a54 <_scanf_float+0x18c>
 8004ad2:	2d03      	cmp	r5, #3
 8004ad4:	d0e2      	beq.n	8004a9c <_scanf_float+0x1d4>
 8004ad6:	2d05      	cmp	r5, #5
 8004ad8:	e7de      	b.n	8004a98 <_scanf_float+0x1d0>
 8004ada:	2d02      	cmp	r5, #2
 8004adc:	f47f af26 	bne.w	800492c <_scanf_float+0x64>
 8004ae0:	2503      	movs	r5, #3
 8004ae2:	e7b7      	b.n	8004a54 <_scanf_float+0x18c>
 8004ae4:	2d06      	cmp	r5, #6
 8004ae6:	f47f af21 	bne.w	800492c <_scanf_float+0x64>
 8004aea:	2507      	movs	r5, #7
 8004aec:	e7b2      	b.n	8004a54 <_scanf_float+0x18c>
 8004aee:	6822      	ldr	r2, [r4, #0]
 8004af0:	0591      	lsls	r1, r2, #22
 8004af2:	f57f af1b 	bpl.w	800492c <_scanf_float+0x64>
 8004af6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004afa:	6022      	str	r2, [r4, #0]
 8004afc:	f8cd 9004 	str.w	r9, [sp, #4]
 8004b00:	e7a8      	b.n	8004a54 <_scanf_float+0x18c>
 8004b02:	6822      	ldr	r2, [r4, #0]
 8004b04:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004b08:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004b0c:	d006      	beq.n	8004b1c <_scanf_float+0x254>
 8004b0e:	0550      	lsls	r0, r2, #21
 8004b10:	f57f af0c 	bpl.w	800492c <_scanf_float+0x64>
 8004b14:	f1b9 0f00 	cmp.w	r9, #0
 8004b18:	f43f af0f 	beq.w	800493a <_scanf_float+0x72>
 8004b1c:	0591      	lsls	r1, r2, #22
 8004b1e:	bf58      	it	pl
 8004b20:	9901      	ldrpl	r1, [sp, #4]
 8004b22:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004b26:	bf58      	it	pl
 8004b28:	eba9 0101 	subpl.w	r1, r9, r1
 8004b2c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004b30:	f04f 0900 	mov.w	r9, #0
 8004b34:	bf58      	it	pl
 8004b36:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004b3a:	6022      	str	r2, [r4, #0]
 8004b3c:	e78a      	b.n	8004a54 <_scanf_float+0x18c>
 8004b3e:	f04f 0a03 	mov.w	sl, #3
 8004b42:	e787      	b.n	8004a54 <_scanf_float+0x18c>
 8004b44:	4639      	mov	r1, r7
 8004b46:	4640      	mov	r0, r8
 8004b48:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004b4c:	4798      	blx	r3
 8004b4e:	2800      	cmp	r0, #0
 8004b50:	f43f aedf 	beq.w	8004912 <_scanf_float+0x4a>
 8004b54:	e6ea      	b.n	800492c <_scanf_float+0x64>
 8004b56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b5a:	463a      	mov	r2, r7
 8004b5c:	4640      	mov	r0, r8
 8004b5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004b62:	4798      	blx	r3
 8004b64:	6923      	ldr	r3, [r4, #16]
 8004b66:	3b01      	subs	r3, #1
 8004b68:	6123      	str	r3, [r4, #16]
 8004b6a:	e6ec      	b.n	8004946 <_scanf_float+0x7e>
 8004b6c:	1e6b      	subs	r3, r5, #1
 8004b6e:	2b06      	cmp	r3, #6
 8004b70:	d825      	bhi.n	8004bbe <_scanf_float+0x2f6>
 8004b72:	2d02      	cmp	r5, #2
 8004b74:	d836      	bhi.n	8004be4 <_scanf_float+0x31c>
 8004b76:	455e      	cmp	r6, fp
 8004b78:	f67f aee8 	bls.w	800494c <_scanf_float+0x84>
 8004b7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b80:	463a      	mov	r2, r7
 8004b82:	4640      	mov	r0, r8
 8004b84:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004b88:	4798      	blx	r3
 8004b8a:	6923      	ldr	r3, [r4, #16]
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	6123      	str	r3, [r4, #16]
 8004b90:	e7f1      	b.n	8004b76 <_scanf_float+0x2ae>
 8004b92:	9802      	ldr	r0, [sp, #8]
 8004b94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b98:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004b9c:	463a      	mov	r2, r7
 8004b9e:	9002      	str	r0, [sp, #8]
 8004ba0:	4640      	mov	r0, r8
 8004ba2:	4798      	blx	r3
 8004ba4:	6923      	ldr	r3, [r4, #16]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	6123      	str	r3, [r4, #16]
 8004baa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004bae:	fa5f fa8a 	uxtb.w	sl, sl
 8004bb2:	f1ba 0f02 	cmp.w	sl, #2
 8004bb6:	d1ec      	bne.n	8004b92 <_scanf_float+0x2ca>
 8004bb8:	3d03      	subs	r5, #3
 8004bba:	b2ed      	uxtb	r5, r5
 8004bbc:	1b76      	subs	r6, r6, r5
 8004bbe:	6823      	ldr	r3, [r4, #0]
 8004bc0:	05da      	lsls	r2, r3, #23
 8004bc2:	d52f      	bpl.n	8004c24 <_scanf_float+0x35c>
 8004bc4:	055b      	lsls	r3, r3, #21
 8004bc6:	d510      	bpl.n	8004bea <_scanf_float+0x322>
 8004bc8:	455e      	cmp	r6, fp
 8004bca:	f67f aebf 	bls.w	800494c <_scanf_float+0x84>
 8004bce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004bd2:	463a      	mov	r2, r7
 8004bd4:	4640      	mov	r0, r8
 8004bd6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004bda:	4798      	blx	r3
 8004bdc:	6923      	ldr	r3, [r4, #16]
 8004bde:	3b01      	subs	r3, #1
 8004be0:	6123      	str	r3, [r4, #16]
 8004be2:	e7f1      	b.n	8004bc8 <_scanf_float+0x300>
 8004be4:	46aa      	mov	sl, r5
 8004be6:	9602      	str	r6, [sp, #8]
 8004be8:	e7df      	b.n	8004baa <_scanf_float+0x2e2>
 8004bea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004bee:	6923      	ldr	r3, [r4, #16]
 8004bf0:	2965      	cmp	r1, #101	; 0x65
 8004bf2:	f103 33ff 	add.w	r3, r3, #4294967295
 8004bf6:	f106 35ff 	add.w	r5, r6, #4294967295
 8004bfa:	6123      	str	r3, [r4, #16]
 8004bfc:	d00c      	beq.n	8004c18 <_scanf_float+0x350>
 8004bfe:	2945      	cmp	r1, #69	; 0x45
 8004c00:	d00a      	beq.n	8004c18 <_scanf_float+0x350>
 8004c02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c06:	463a      	mov	r2, r7
 8004c08:	4640      	mov	r0, r8
 8004c0a:	4798      	blx	r3
 8004c0c:	6923      	ldr	r3, [r4, #16]
 8004c0e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004c12:	3b01      	subs	r3, #1
 8004c14:	1eb5      	subs	r5, r6, #2
 8004c16:	6123      	str	r3, [r4, #16]
 8004c18:	463a      	mov	r2, r7
 8004c1a:	4640      	mov	r0, r8
 8004c1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c20:	4798      	blx	r3
 8004c22:	462e      	mov	r6, r5
 8004c24:	6825      	ldr	r5, [r4, #0]
 8004c26:	f015 0510 	ands.w	r5, r5, #16
 8004c2a:	d155      	bne.n	8004cd8 <_scanf_float+0x410>
 8004c2c:	7035      	strb	r5, [r6, #0]
 8004c2e:	6823      	ldr	r3, [r4, #0]
 8004c30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c38:	d11d      	bne.n	8004c76 <_scanf_float+0x3ae>
 8004c3a:	9b01      	ldr	r3, [sp, #4]
 8004c3c:	454b      	cmp	r3, r9
 8004c3e:	eba3 0209 	sub.w	r2, r3, r9
 8004c42:	d125      	bne.n	8004c90 <_scanf_float+0x3c8>
 8004c44:	2200      	movs	r2, #0
 8004c46:	4659      	mov	r1, fp
 8004c48:	4640      	mov	r0, r8
 8004c4a:	f002 fc0d 	bl	8007468 <_strtod_r>
 8004c4e:	9b03      	ldr	r3, [sp, #12]
 8004c50:	f8d4 c000 	ldr.w	ip, [r4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f01c 0f02 	tst.w	ip, #2
 8004c5a:	4606      	mov	r6, r0
 8004c5c:	460f      	mov	r7, r1
 8004c5e:	f103 0204 	add.w	r2, r3, #4
 8004c62:	d020      	beq.n	8004ca6 <_scanf_float+0x3de>
 8004c64:	9903      	ldr	r1, [sp, #12]
 8004c66:	600a      	str	r2, [r1, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	e9c3 6700 	strd	r6, r7, [r3]
 8004c6e:	68e3      	ldr	r3, [r4, #12]
 8004c70:	3301      	adds	r3, #1
 8004c72:	60e3      	str	r3, [r4, #12]
 8004c74:	e66b      	b.n	800494e <_scanf_float+0x86>
 8004c76:	9b04      	ldr	r3, [sp, #16]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0e3      	beq.n	8004c44 <_scanf_float+0x37c>
 8004c7c:	9905      	ldr	r1, [sp, #20]
 8004c7e:	230a      	movs	r3, #10
 8004c80:	462a      	mov	r2, r5
 8004c82:	4640      	mov	r0, r8
 8004c84:	3101      	adds	r1, #1
 8004c86:	f002 fc73 	bl	8007570 <_strtol_r>
 8004c8a:	9b04      	ldr	r3, [sp, #16]
 8004c8c:	9e05      	ldr	r6, [sp, #20]
 8004c8e:	1ac2      	subs	r2, r0, r3
 8004c90:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004c94:	429e      	cmp	r6, r3
 8004c96:	bf28      	it	cs
 8004c98:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004c9c:	4630      	mov	r0, r6
 8004c9e:	490f      	ldr	r1, [pc, #60]	; (8004cdc <_scanf_float+0x414>)
 8004ca0:	f000 f8d0 	bl	8004e44 <siprintf>
 8004ca4:	e7ce      	b.n	8004c44 <_scanf_float+0x37c>
 8004ca6:	f01c 0f04 	tst.w	ip, #4
 8004caa:	d1db      	bne.n	8004c64 <_scanf_float+0x39c>
 8004cac:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004cb0:	f8cc 2000 	str.w	r2, [ip]
 8004cb4:	f8d3 8000 	ldr.w	r8, [r3]
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	f7fb fea6 	bl	8000a0c <__aeabi_dcmpun>
 8004cc0:	b128      	cbz	r0, 8004cce <_scanf_float+0x406>
 8004cc2:	4807      	ldr	r0, [pc, #28]	; (8004ce0 <_scanf_float+0x418>)
 8004cc4:	f000 f9ae 	bl	8005024 <nanf>
 8004cc8:	f8c8 0000 	str.w	r0, [r8]
 8004ccc:	e7cf      	b.n	8004c6e <_scanf_float+0x3a6>
 8004cce:	4630      	mov	r0, r6
 8004cd0:	4639      	mov	r1, r7
 8004cd2:	f7fb fef9 	bl	8000ac8 <__aeabi_d2f>
 8004cd6:	e7f7      	b.n	8004cc8 <_scanf_float+0x400>
 8004cd8:	2500      	movs	r5, #0
 8004cda:	e638      	b.n	800494e <_scanf_float+0x86>
 8004cdc:	080099ee 	.word	0x080099ee
 8004ce0:	08009d85 	.word	0x08009d85

08004ce4 <std>:
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	b510      	push	{r4, lr}
 8004ce8:	4604      	mov	r4, r0
 8004cea:	e9c0 3300 	strd	r3, r3, [r0]
 8004cee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004cf2:	6083      	str	r3, [r0, #8]
 8004cf4:	8181      	strh	r1, [r0, #12]
 8004cf6:	6643      	str	r3, [r0, #100]	; 0x64
 8004cf8:	81c2      	strh	r2, [r0, #14]
 8004cfa:	6183      	str	r3, [r0, #24]
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	2208      	movs	r2, #8
 8004d00:	305c      	adds	r0, #92	; 0x5c
 8004d02:	f000 f902 	bl	8004f0a <memset>
 8004d06:	4b05      	ldr	r3, [pc, #20]	; (8004d1c <std+0x38>)
 8004d08:	6224      	str	r4, [r4, #32]
 8004d0a:	6263      	str	r3, [r4, #36]	; 0x24
 8004d0c:	4b04      	ldr	r3, [pc, #16]	; (8004d20 <std+0x3c>)
 8004d0e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d10:	4b04      	ldr	r3, [pc, #16]	; (8004d24 <std+0x40>)
 8004d12:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d14:	4b04      	ldr	r3, [pc, #16]	; (8004d28 <std+0x44>)
 8004d16:	6323      	str	r3, [r4, #48]	; 0x30
 8004d18:	bd10      	pop	{r4, pc}
 8004d1a:	bf00      	nop
 8004d1c:	08004e85 	.word	0x08004e85
 8004d20:	08004ea7 	.word	0x08004ea7
 8004d24:	08004edf 	.word	0x08004edf
 8004d28:	08004f03 	.word	0x08004f03

08004d2c <stdio_exit_handler>:
 8004d2c:	4a02      	ldr	r2, [pc, #8]	; (8004d38 <stdio_exit_handler+0xc>)
 8004d2e:	4903      	ldr	r1, [pc, #12]	; (8004d3c <stdio_exit_handler+0x10>)
 8004d30:	4803      	ldr	r0, [pc, #12]	; (8004d40 <stdio_exit_handler+0x14>)
 8004d32:	f000 b869 	b.w	8004e08 <_fwalk_sglue>
 8004d36:	bf00      	nop
 8004d38:	2000000c 	.word	0x2000000c
 8004d3c:	08007929 	.word	0x08007929
 8004d40:	20000018 	.word	0x20000018

08004d44 <cleanup_stdio>:
 8004d44:	6841      	ldr	r1, [r0, #4]
 8004d46:	4b0c      	ldr	r3, [pc, #48]	; (8004d78 <cleanup_stdio+0x34>)
 8004d48:	b510      	push	{r4, lr}
 8004d4a:	4299      	cmp	r1, r3
 8004d4c:	4604      	mov	r4, r0
 8004d4e:	d001      	beq.n	8004d54 <cleanup_stdio+0x10>
 8004d50:	f002 fdea 	bl	8007928 <_fflush_r>
 8004d54:	68a1      	ldr	r1, [r4, #8]
 8004d56:	4b09      	ldr	r3, [pc, #36]	; (8004d7c <cleanup_stdio+0x38>)
 8004d58:	4299      	cmp	r1, r3
 8004d5a:	d002      	beq.n	8004d62 <cleanup_stdio+0x1e>
 8004d5c:	4620      	mov	r0, r4
 8004d5e:	f002 fde3 	bl	8007928 <_fflush_r>
 8004d62:	68e1      	ldr	r1, [r4, #12]
 8004d64:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <cleanup_stdio+0x3c>)
 8004d66:	4299      	cmp	r1, r3
 8004d68:	d004      	beq.n	8004d74 <cleanup_stdio+0x30>
 8004d6a:	4620      	mov	r0, r4
 8004d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d70:	f002 bdda 	b.w	8007928 <_fflush_r>
 8004d74:	bd10      	pop	{r4, pc}
 8004d76:	bf00      	nop
 8004d78:	200002d8 	.word	0x200002d8
 8004d7c:	20000340 	.word	0x20000340
 8004d80:	200003a8 	.word	0x200003a8

08004d84 <global_stdio_init.part.0>:
 8004d84:	b510      	push	{r4, lr}
 8004d86:	4b0b      	ldr	r3, [pc, #44]	; (8004db4 <global_stdio_init.part.0+0x30>)
 8004d88:	4c0b      	ldr	r4, [pc, #44]	; (8004db8 <global_stdio_init.part.0+0x34>)
 8004d8a:	4a0c      	ldr	r2, [pc, #48]	; (8004dbc <global_stdio_init.part.0+0x38>)
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	2104      	movs	r1, #4
 8004d92:	2200      	movs	r2, #0
 8004d94:	f7ff ffa6 	bl	8004ce4 <std>
 8004d98:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	2109      	movs	r1, #9
 8004da0:	f7ff ffa0 	bl	8004ce4 <std>
 8004da4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004da8:	2202      	movs	r2, #2
 8004daa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dae:	2112      	movs	r1, #18
 8004db0:	f7ff bf98 	b.w	8004ce4 <std>
 8004db4:	20000410 	.word	0x20000410
 8004db8:	200002d8 	.word	0x200002d8
 8004dbc:	08004d2d 	.word	0x08004d2d

08004dc0 <__sfp_lock_acquire>:
 8004dc0:	4801      	ldr	r0, [pc, #4]	; (8004dc8 <__sfp_lock_acquire+0x8>)
 8004dc2:	f000 b91f 	b.w	8005004 <__retarget_lock_acquire_recursive>
 8004dc6:	bf00      	nop
 8004dc8:	20000419 	.word	0x20000419

08004dcc <__sfp_lock_release>:
 8004dcc:	4801      	ldr	r0, [pc, #4]	; (8004dd4 <__sfp_lock_release+0x8>)
 8004dce:	f000 b91a 	b.w	8005006 <__retarget_lock_release_recursive>
 8004dd2:	bf00      	nop
 8004dd4:	20000419 	.word	0x20000419

08004dd8 <__sinit>:
 8004dd8:	b510      	push	{r4, lr}
 8004dda:	4604      	mov	r4, r0
 8004ddc:	f7ff fff0 	bl	8004dc0 <__sfp_lock_acquire>
 8004de0:	6a23      	ldr	r3, [r4, #32]
 8004de2:	b11b      	cbz	r3, 8004dec <__sinit+0x14>
 8004de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004de8:	f7ff bff0 	b.w	8004dcc <__sfp_lock_release>
 8004dec:	4b04      	ldr	r3, [pc, #16]	; (8004e00 <__sinit+0x28>)
 8004dee:	6223      	str	r3, [r4, #32]
 8004df0:	4b04      	ldr	r3, [pc, #16]	; (8004e04 <__sinit+0x2c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1f5      	bne.n	8004de4 <__sinit+0xc>
 8004df8:	f7ff ffc4 	bl	8004d84 <global_stdio_init.part.0>
 8004dfc:	e7f2      	b.n	8004de4 <__sinit+0xc>
 8004dfe:	bf00      	nop
 8004e00:	08004d45 	.word	0x08004d45
 8004e04:	20000410 	.word	0x20000410

08004e08 <_fwalk_sglue>:
 8004e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e0c:	4607      	mov	r7, r0
 8004e0e:	4688      	mov	r8, r1
 8004e10:	4614      	mov	r4, r2
 8004e12:	2600      	movs	r6, #0
 8004e14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e18:	f1b9 0901 	subs.w	r9, r9, #1
 8004e1c:	d505      	bpl.n	8004e2a <_fwalk_sglue+0x22>
 8004e1e:	6824      	ldr	r4, [r4, #0]
 8004e20:	2c00      	cmp	r4, #0
 8004e22:	d1f7      	bne.n	8004e14 <_fwalk_sglue+0xc>
 8004e24:	4630      	mov	r0, r6
 8004e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e2a:	89ab      	ldrh	r3, [r5, #12]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d907      	bls.n	8004e40 <_fwalk_sglue+0x38>
 8004e30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e34:	3301      	adds	r3, #1
 8004e36:	d003      	beq.n	8004e40 <_fwalk_sglue+0x38>
 8004e38:	4629      	mov	r1, r5
 8004e3a:	4638      	mov	r0, r7
 8004e3c:	47c0      	blx	r8
 8004e3e:	4306      	orrs	r6, r0
 8004e40:	3568      	adds	r5, #104	; 0x68
 8004e42:	e7e9      	b.n	8004e18 <_fwalk_sglue+0x10>

08004e44 <siprintf>:
 8004e44:	b40e      	push	{r1, r2, r3}
 8004e46:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e4a:	b500      	push	{lr}
 8004e4c:	b09c      	sub	sp, #112	; 0x70
 8004e4e:	ab1d      	add	r3, sp, #116	; 0x74
 8004e50:	9002      	str	r0, [sp, #8]
 8004e52:	9006      	str	r0, [sp, #24]
 8004e54:	9107      	str	r1, [sp, #28]
 8004e56:	9104      	str	r1, [sp, #16]
 8004e58:	4808      	ldr	r0, [pc, #32]	; (8004e7c <siprintf+0x38>)
 8004e5a:	4909      	ldr	r1, [pc, #36]	; (8004e80 <siprintf+0x3c>)
 8004e5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e60:	9105      	str	r1, [sp, #20]
 8004e62:	6800      	ldr	r0, [r0, #0]
 8004e64:	a902      	add	r1, sp, #8
 8004e66:	9301      	str	r3, [sp, #4]
 8004e68:	f002 fbde 	bl	8007628 <_svfiprintf_r>
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	9b02      	ldr	r3, [sp, #8]
 8004e70:	701a      	strb	r2, [r3, #0]
 8004e72:	b01c      	add	sp, #112	; 0x70
 8004e74:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e78:	b003      	add	sp, #12
 8004e7a:	4770      	bx	lr
 8004e7c:	20000064 	.word	0x20000064
 8004e80:	ffff0208 	.word	0xffff0208

08004e84 <__sread>:
 8004e84:	b510      	push	{r4, lr}
 8004e86:	460c      	mov	r4, r1
 8004e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e8c:	f000 f86c 	bl	8004f68 <_read_r>
 8004e90:	2800      	cmp	r0, #0
 8004e92:	bfab      	itete	ge
 8004e94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e96:	89a3      	ldrhlt	r3, [r4, #12]
 8004e98:	181b      	addge	r3, r3, r0
 8004e9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e9e:	bfac      	ite	ge
 8004ea0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ea2:	81a3      	strhlt	r3, [r4, #12]
 8004ea4:	bd10      	pop	{r4, pc}

08004ea6 <__swrite>:
 8004ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eaa:	461f      	mov	r7, r3
 8004eac:	898b      	ldrh	r3, [r1, #12]
 8004eae:	4605      	mov	r5, r0
 8004eb0:	05db      	lsls	r3, r3, #23
 8004eb2:	460c      	mov	r4, r1
 8004eb4:	4616      	mov	r6, r2
 8004eb6:	d505      	bpl.n	8004ec4 <__swrite+0x1e>
 8004eb8:	2302      	movs	r3, #2
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ec0:	f000 f840 	bl	8004f44 <_lseek_r>
 8004ec4:	89a3      	ldrh	r3, [r4, #12]
 8004ec6:	4632      	mov	r2, r6
 8004ec8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ecc:	81a3      	strh	r3, [r4, #12]
 8004ece:	4628      	mov	r0, r5
 8004ed0:	463b      	mov	r3, r7
 8004ed2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004eda:	f000 b857 	b.w	8004f8c <_write_r>

08004ede <__sseek>:
 8004ede:	b510      	push	{r4, lr}
 8004ee0:	460c      	mov	r4, r1
 8004ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ee6:	f000 f82d 	bl	8004f44 <_lseek_r>
 8004eea:	1c43      	adds	r3, r0, #1
 8004eec:	89a3      	ldrh	r3, [r4, #12]
 8004eee:	bf15      	itete	ne
 8004ef0:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ef2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ef6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004efa:	81a3      	strheq	r3, [r4, #12]
 8004efc:	bf18      	it	ne
 8004efe:	81a3      	strhne	r3, [r4, #12]
 8004f00:	bd10      	pop	{r4, pc}

08004f02 <__sclose>:
 8004f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f06:	f000 b80d 	b.w	8004f24 <_close_r>

08004f0a <memset>:
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	4402      	add	r2, r0
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d100      	bne.n	8004f14 <memset+0xa>
 8004f12:	4770      	bx	lr
 8004f14:	f803 1b01 	strb.w	r1, [r3], #1
 8004f18:	e7f9      	b.n	8004f0e <memset+0x4>
	...

08004f1c <_localeconv_r>:
 8004f1c:	4800      	ldr	r0, [pc, #0]	; (8004f20 <_localeconv_r+0x4>)
 8004f1e:	4770      	bx	lr
 8004f20:	20000158 	.word	0x20000158

08004f24 <_close_r>:
 8004f24:	b538      	push	{r3, r4, r5, lr}
 8004f26:	2300      	movs	r3, #0
 8004f28:	4d05      	ldr	r5, [pc, #20]	; (8004f40 <_close_r+0x1c>)
 8004f2a:	4604      	mov	r4, r0
 8004f2c:	4608      	mov	r0, r1
 8004f2e:	602b      	str	r3, [r5, #0]
 8004f30:	f7fc fcdc 	bl	80018ec <_close>
 8004f34:	1c43      	adds	r3, r0, #1
 8004f36:	d102      	bne.n	8004f3e <_close_r+0x1a>
 8004f38:	682b      	ldr	r3, [r5, #0]
 8004f3a:	b103      	cbz	r3, 8004f3e <_close_r+0x1a>
 8004f3c:	6023      	str	r3, [r4, #0]
 8004f3e:	bd38      	pop	{r3, r4, r5, pc}
 8004f40:	20000414 	.word	0x20000414

08004f44 <_lseek_r>:
 8004f44:	b538      	push	{r3, r4, r5, lr}
 8004f46:	4604      	mov	r4, r0
 8004f48:	4608      	mov	r0, r1
 8004f4a:	4611      	mov	r1, r2
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	4d05      	ldr	r5, [pc, #20]	; (8004f64 <_lseek_r+0x20>)
 8004f50:	602a      	str	r2, [r5, #0]
 8004f52:	461a      	mov	r2, r3
 8004f54:	f7fc fcee 	bl	8001934 <_lseek>
 8004f58:	1c43      	adds	r3, r0, #1
 8004f5a:	d102      	bne.n	8004f62 <_lseek_r+0x1e>
 8004f5c:	682b      	ldr	r3, [r5, #0]
 8004f5e:	b103      	cbz	r3, 8004f62 <_lseek_r+0x1e>
 8004f60:	6023      	str	r3, [r4, #0]
 8004f62:	bd38      	pop	{r3, r4, r5, pc}
 8004f64:	20000414 	.word	0x20000414

08004f68 <_read_r>:
 8004f68:	b538      	push	{r3, r4, r5, lr}
 8004f6a:	4604      	mov	r4, r0
 8004f6c:	4608      	mov	r0, r1
 8004f6e:	4611      	mov	r1, r2
 8004f70:	2200      	movs	r2, #0
 8004f72:	4d05      	ldr	r5, [pc, #20]	; (8004f88 <_read_r+0x20>)
 8004f74:	602a      	str	r2, [r5, #0]
 8004f76:	461a      	mov	r2, r3
 8004f78:	f7fc fc7f 	bl	800187a <_read>
 8004f7c:	1c43      	adds	r3, r0, #1
 8004f7e:	d102      	bne.n	8004f86 <_read_r+0x1e>
 8004f80:	682b      	ldr	r3, [r5, #0]
 8004f82:	b103      	cbz	r3, 8004f86 <_read_r+0x1e>
 8004f84:	6023      	str	r3, [r4, #0]
 8004f86:	bd38      	pop	{r3, r4, r5, pc}
 8004f88:	20000414 	.word	0x20000414

08004f8c <_write_r>:
 8004f8c:	b538      	push	{r3, r4, r5, lr}
 8004f8e:	4604      	mov	r4, r0
 8004f90:	4608      	mov	r0, r1
 8004f92:	4611      	mov	r1, r2
 8004f94:	2200      	movs	r2, #0
 8004f96:	4d05      	ldr	r5, [pc, #20]	; (8004fac <_write_r+0x20>)
 8004f98:	602a      	str	r2, [r5, #0]
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	f7fc fc8a 	bl	80018b4 <_write>
 8004fa0:	1c43      	adds	r3, r0, #1
 8004fa2:	d102      	bne.n	8004faa <_write_r+0x1e>
 8004fa4:	682b      	ldr	r3, [r5, #0]
 8004fa6:	b103      	cbz	r3, 8004faa <_write_r+0x1e>
 8004fa8:	6023      	str	r3, [r4, #0]
 8004faa:	bd38      	pop	{r3, r4, r5, pc}
 8004fac:	20000414 	.word	0x20000414

08004fb0 <__errno>:
 8004fb0:	4b01      	ldr	r3, [pc, #4]	; (8004fb8 <__errno+0x8>)
 8004fb2:	6818      	ldr	r0, [r3, #0]
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	20000064 	.word	0x20000064

08004fbc <__libc_init_array>:
 8004fbc:	b570      	push	{r4, r5, r6, lr}
 8004fbe:	2600      	movs	r6, #0
 8004fc0:	4d0c      	ldr	r5, [pc, #48]	; (8004ff4 <__libc_init_array+0x38>)
 8004fc2:	4c0d      	ldr	r4, [pc, #52]	; (8004ff8 <__libc_init_array+0x3c>)
 8004fc4:	1b64      	subs	r4, r4, r5
 8004fc6:	10a4      	asrs	r4, r4, #2
 8004fc8:	42a6      	cmp	r6, r4
 8004fca:	d109      	bne.n	8004fe0 <__libc_init_array+0x24>
 8004fcc:	f004 fcae 	bl	800992c <_init>
 8004fd0:	2600      	movs	r6, #0
 8004fd2:	4d0a      	ldr	r5, [pc, #40]	; (8004ffc <__libc_init_array+0x40>)
 8004fd4:	4c0a      	ldr	r4, [pc, #40]	; (8005000 <__libc_init_array+0x44>)
 8004fd6:	1b64      	subs	r4, r4, r5
 8004fd8:	10a4      	asrs	r4, r4, #2
 8004fda:	42a6      	cmp	r6, r4
 8004fdc:	d105      	bne.n	8004fea <__libc_init_array+0x2e>
 8004fde:	bd70      	pop	{r4, r5, r6, pc}
 8004fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fe4:	4798      	blx	r3
 8004fe6:	3601      	adds	r6, #1
 8004fe8:	e7ee      	b.n	8004fc8 <__libc_init_array+0xc>
 8004fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fee:	4798      	blx	r3
 8004ff0:	3601      	adds	r6, #1
 8004ff2:	e7f2      	b.n	8004fda <__libc_init_array+0x1e>
 8004ff4:	08009e18 	.word	0x08009e18
 8004ff8:	08009e18 	.word	0x08009e18
 8004ffc:	08009e18 	.word	0x08009e18
 8005000:	08009e1c 	.word	0x08009e1c

08005004 <__retarget_lock_acquire_recursive>:
 8005004:	4770      	bx	lr

08005006 <__retarget_lock_release_recursive>:
 8005006:	4770      	bx	lr

08005008 <memchr>:
 8005008:	4603      	mov	r3, r0
 800500a:	b510      	push	{r4, lr}
 800500c:	b2c9      	uxtb	r1, r1
 800500e:	4402      	add	r2, r0
 8005010:	4293      	cmp	r3, r2
 8005012:	4618      	mov	r0, r3
 8005014:	d101      	bne.n	800501a <memchr+0x12>
 8005016:	2000      	movs	r0, #0
 8005018:	e003      	b.n	8005022 <memchr+0x1a>
 800501a:	7804      	ldrb	r4, [r0, #0]
 800501c:	3301      	adds	r3, #1
 800501e:	428c      	cmp	r4, r1
 8005020:	d1f6      	bne.n	8005010 <memchr+0x8>
 8005022:	bd10      	pop	{r4, pc}

08005024 <nanf>:
 8005024:	4800      	ldr	r0, [pc, #0]	; (8005028 <nanf+0x4>)
 8005026:	4770      	bx	lr
 8005028:	7fc00000 	.word	0x7fc00000

0800502c <quorem>:
 800502c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005030:	6903      	ldr	r3, [r0, #16]
 8005032:	690c      	ldr	r4, [r1, #16]
 8005034:	4607      	mov	r7, r0
 8005036:	42a3      	cmp	r3, r4
 8005038:	db7f      	blt.n	800513a <quorem+0x10e>
 800503a:	3c01      	subs	r4, #1
 800503c:	f100 0514 	add.w	r5, r0, #20
 8005040:	f101 0814 	add.w	r8, r1, #20
 8005044:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005048:	9301      	str	r3, [sp, #4]
 800504a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800504e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005052:	3301      	adds	r3, #1
 8005054:	429a      	cmp	r2, r3
 8005056:	fbb2 f6f3 	udiv	r6, r2, r3
 800505a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800505e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005062:	d331      	bcc.n	80050c8 <quorem+0x9c>
 8005064:	f04f 0e00 	mov.w	lr, #0
 8005068:	4640      	mov	r0, r8
 800506a:	46ac      	mov	ip, r5
 800506c:	46f2      	mov	sl, lr
 800506e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005072:	b293      	uxth	r3, r2
 8005074:	fb06 e303 	mla	r3, r6, r3, lr
 8005078:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800507c:	0c1a      	lsrs	r2, r3, #16
 800507e:	b29b      	uxth	r3, r3
 8005080:	fb06 220e 	mla	r2, r6, lr, r2
 8005084:	ebaa 0303 	sub.w	r3, sl, r3
 8005088:	f8dc a000 	ldr.w	sl, [ip]
 800508c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005090:	fa1f fa8a 	uxth.w	sl, sl
 8005094:	4453      	add	r3, sl
 8005096:	f8dc a000 	ldr.w	sl, [ip]
 800509a:	b292      	uxth	r2, r2
 800509c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80050a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050aa:	4581      	cmp	r9, r0
 80050ac:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80050b0:	f84c 3b04 	str.w	r3, [ip], #4
 80050b4:	d2db      	bcs.n	800506e <quorem+0x42>
 80050b6:	f855 300b 	ldr.w	r3, [r5, fp]
 80050ba:	b92b      	cbnz	r3, 80050c8 <quorem+0x9c>
 80050bc:	9b01      	ldr	r3, [sp, #4]
 80050be:	3b04      	subs	r3, #4
 80050c0:	429d      	cmp	r5, r3
 80050c2:	461a      	mov	r2, r3
 80050c4:	d32d      	bcc.n	8005122 <quorem+0xf6>
 80050c6:	613c      	str	r4, [r7, #16]
 80050c8:	4638      	mov	r0, r7
 80050ca:	f001 f9dd 	bl	8006488 <__mcmp>
 80050ce:	2800      	cmp	r0, #0
 80050d0:	db23      	blt.n	800511a <quorem+0xee>
 80050d2:	4629      	mov	r1, r5
 80050d4:	2000      	movs	r0, #0
 80050d6:	3601      	adds	r6, #1
 80050d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80050dc:	f8d1 c000 	ldr.w	ip, [r1]
 80050e0:	b293      	uxth	r3, r2
 80050e2:	1ac3      	subs	r3, r0, r3
 80050e4:	0c12      	lsrs	r2, r2, #16
 80050e6:	fa1f f08c 	uxth.w	r0, ip
 80050ea:	4403      	add	r3, r0
 80050ec:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80050f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050fa:	45c1      	cmp	r9, r8
 80050fc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005100:	f841 3b04 	str.w	r3, [r1], #4
 8005104:	d2e8      	bcs.n	80050d8 <quorem+0xac>
 8005106:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800510a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800510e:	b922      	cbnz	r2, 800511a <quorem+0xee>
 8005110:	3b04      	subs	r3, #4
 8005112:	429d      	cmp	r5, r3
 8005114:	461a      	mov	r2, r3
 8005116:	d30a      	bcc.n	800512e <quorem+0x102>
 8005118:	613c      	str	r4, [r7, #16]
 800511a:	4630      	mov	r0, r6
 800511c:	b003      	add	sp, #12
 800511e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005122:	6812      	ldr	r2, [r2, #0]
 8005124:	3b04      	subs	r3, #4
 8005126:	2a00      	cmp	r2, #0
 8005128:	d1cd      	bne.n	80050c6 <quorem+0x9a>
 800512a:	3c01      	subs	r4, #1
 800512c:	e7c8      	b.n	80050c0 <quorem+0x94>
 800512e:	6812      	ldr	r2, [r2, #0]
 8005130:	3b04      	subs	r3, #4
 8005132:	2a00      	cmp	r2, #0
 8005134:	d1f0      	bne.n	8005118 <quorem+0xec>
 8005136:	3c01      	subs	r4, #1
 8005138:	e7eb      	b.n	8005112 <quorem+0xe6>
 800513a:	2000      	movs	r0, #0
 800513c:	e7ee      	b.n	800511c <quorem+0xf0>
	...

08005140 <_dtoa_r>:
 8005140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005144:	4616      	mov	r6, r2
 8005146:	461f      	mov	r7, r3
 8005148:	69c4      	ldr	r4, [r0, #28]
 800514a:	b099      	sub	sp, #100	; 0x64
 800514c:	4605      	mov	r5, r0
 800514e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005152:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005156:	b974      	cbnz	r4, 8005176 <_dtoa_r+0x36>
 8005158:	2010      	movs	r0, #16
 800515a:	f000 fe1d 	bl	8005d98 <malloc>
 800515e:	4602      	mov	r2, r0
 8005160:	61e8      	str	r0, [r5, #28]
 8005162:	b920      	cbnz	r0, 800516e <_dtoa_r+0x2e>
 8005164:	21ef      	movs	r1, #239	; 0xef
 8005166:	4bac      	ldr	r3, [pc, #688]	; (8005418 <_dtoa_r+0x2d8>)
 8005168:	48ac      	ldr	r0, [pc, #688]	; (800541c <_dtoa_r+0x2dc>)
 800516a:	f002 fc55 	bl	8007a18 <__assert_func>
 800516e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005172:	6004      	str	r4, [r0, #0]
 8005174:	60c4      	str	r4, [r0, #12]
 8005176:	69eb      	ldr	r3, [r5, #28]
 8005178:	6819      	ldr	r1, [r3, #0]
 800517a:	b151      	cbz	r1, 8005192 <_dtoa_r+0x52>
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	2301      	movs	r3, #1
 8005180:	4093      	lsls	r3, r2
 8005182:	604a      	str	r2, [r1, #4]
 8005184:	608b      	str	r3, [r1, #8]
 8005186:	4628      	mov	r0, r5
 8005188:	f000 fefa 	bl	8005f80 <_Bfree>
 800518c:	2200      	movs	r2, #0
 800518e:	69eb      	ldr	r3, [r5, #28]
 8005190:	601a      	str	r2, [r3, #0]
 8005192:	1e3b      	subs	r3, r7, #0
 8005194:	bfaf      	iteee	ge
 8005196:	2300      	movge	r3, #0
 8005198:	2201      	movlt	r2, #1
 800519a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800519e:	9305      	strlt	r3, [sp, #20]
 80051a0:	bfa8      	it	ge
 80051a2:	f8c8 3000 	strge.w	r3, [r8]
 80051a6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80051aa:	4b9d      	ldr	r3, [pc, #628]	; (8005420 <_dtoa_r+0x2e0>)
 80051ac:	bfb8      	it	lt
 80051ae:	f8c8 2000 	strlt.w	r2, [r8]
 80051b2:	ea33 0309 	bics.w	r3, r3, r9
 80051b6:	d119      	bne.n	80051ec <_dtoa_r+0xac>
 80051b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80051bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80051be:	6013      	str	r3, [r2, #0]
 80051c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80051c4:	4333      	orrs	r3, r6
 80051c6:	f000 8589 	beq.w	8005cdc <_dtoa_r+0xb9c>
 80051ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80051cc:	b953      	cbnz	r3, 80051e4 <_dtoa_r+0xa4>
 80051ce:	4b95      	ldr	r3, [pc, #596]	; (8005424 <_dtoa_r+0x2e4>)
 80051d0:	e023      	b.n	800521a <_dtoa_r+0xda>
 80051d2:	4b95      	ldr	r3, [pc, #596]	; (8005428 <_dtoa_r+0x2e8>)
 80051d4:	9303      	str	r3, [sp, #12]
 80051d6:	3308      	adds	r3, #8
 80051d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80051da:	6013      	str	r3, [r2, #0]
 80051dc:	9803      	ldr	r0, [sp, #12]
 80051de:	b019      	add	sp, #100	; 0x64
 80051e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051e4:	4b8f      	ldr	r3, [pc, #572]	; (8005424 <_dtoa_r+0x2e4>)
 80051e6:	9303      	str	r3, [sp, #12]
 80051e8:	3303      	adds	r3, #3
 80051ea:	e7f5      	b.n	80051d8 <_dtoa_r+0x98>
 80051ec:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80051f0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80051f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051f8:	2200      	movs	r2, #0
 80051fa:	2300      	movs	r3, #0
 80051fc:	f7fb fbd4 	bl	80009a8 <__aeabi_dcmpeq>
 8005200:	4680      	mov	r8, r0
 8005202:	b160      	cbz	r0, 800521e <_dtoa_r+0xde>
 8005204:	2301      	movs	r3, #1
 8005206:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005208:	6013      	str	r3, [r2, #0]
 800520a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 8562 	beq.w	8005cd6 <_dtoa_r+0xb96>
 8005212:	4b86      	ldr	r3, [pc, #536]	; (800542c <_dtoa_r+0x2ec>)
 8005214:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005216:	6013      	str	r3, [r2, #0]
 8005218:	3b01      	subs	r3, #1
 800521a:	9303      	str	r3, [sp, #12]
 800521c:	e7de      	b.n	80051dc <_dtoa_r+0x9c>
 800521e:	ab16      	add	r3, sp, #88	; 0x58
 8005220:	9301      	str	r3, [sp, #4]
 8005222:	ab17      	add	r3, sp, #92	; 0x5c
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	4628      	mov	r0, r5
 8005228:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800522c:	f001 fa3c 	bl	80066a8 <__d2b>
 8005230:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005234:	4682      	mov	sl, r0
 8005236:	2c00      	cmp	r4, #0
 8005238:	d07e      	beq.n	8005338 <_dtoa_r+0x1f8>
 800523a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800523e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005240:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005244:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005248:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800524c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005250:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005254:	4619      	mov	r1, r3
 8005256:	2200      	movs	r2, #0
 8005258:	4b75      	ldr	r3, [pc, #468]	; (8005430 <_dtoa_r+0x2f0>)
 800525a:	f7fa ff85 	bl	8000168 <__aeabi_dsub>
 800525e:	a368      	add	r3, pc, #416	; (adr r3, 8005400 <_dtoa_r+0x2c0>)
 8005260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005264:	f7fb f938 	bl	80004d8 <__aeabi_dmul>
 8005268:	a367      	add	r3, pc, #412	; (adr r3, 8005408 <_dtoa_r+0x2c8>)
 800526a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526e:	f7fa ff7d 	bl	800016c <__adddf3>
 8005272:	4606      	mov	r6, r0
 8005274:	4620      	mov	r0, r4
 8005276:	460f      	mov	r7, r1
 8005278:	f7fb f8c4 	bl	8000404 <__aeabi_i2d>
 800527c:	a364      	add	r3, pc, #400	; (adr r3, 8005410 <_dtoa_r+0x2d0>)
 800527e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005282:	f7fb f929 	bl	80004d8 <__aeabi_dmul>
 8005286:	4602      	mov	r2, r0
 8005288:	460b      	mov	r3, r1
 800528a:	4630      	mov	r0, r6
 800528c:	4639      	mov	r1, r7
 800528e:	f7fa ff6d 	bl	800016c <__adddf3>
 8005292:	4606      	mov	r6, r0
 8005294:	460f      	mov	r7, r1
 8005296:	f7fb fbcf 	bl	8000a38 <__aeabi_d2iz>
 800529a:	2200      	movs	r2, #0
 800529c:	4683      	mov	fp, r0
 800529e:	2300      	movs	r3, #0
 80052a0:	4630      	mov	r0, r6
 80052a2:	4639      	mov	r1, r7
 80052a4:	f7fb fb8a 	bl	80009bc <__aeabi_dcmplt>
 80052a8:	b148      	cbz	r0, 80052be <_dtoa_r+0x17e>
 80052aa:	4658      	mov	r0, fp
 80052ac:	f7fb f8aa 	bl	8000404 <__aeabi_i2d>
 80052b0:	4632      	mov	r2, r6
 80052b2:	463b      	mov	r3, r7
 80052b4:	f7fb fb78 	bl	80009a8 <__aeabi_dcmpeq>
 80052b8:	b908      	cbnz	r0, 80052be <_dtoa_r+0x17e>
 80052ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80052be:	f1bb 0f16 	cmp.w	fp, #22
 80052c2:	d857      	bhi.n	8005374 <_dtoa_r+0x234>
 80052c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80052c8:	4b5a      	ldr	r3, [pc, #360]	; (8005434 <_dtoa_r+0x2f4>)
 80052ca:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80052ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d2:	f7fb fb73 	bl	80009bc <__aeabi_dcmplt>
 80052d6:	2800      	cmp	r0, #0
 80052d8:	d04e      	beq.n	8005378 <_dtoa_r+0x238>
 80052da:	2300      	movs	r3, #0
 80052dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80052e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80052e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80052e4:	1b1b      	subs	r3, r3, r4
 80052e6:	1e5a      	subs	r2, r3, #1
 80052e8:	bf46      	itte	mi
 80052ea:	f1c3 0901 	rsbmi	r9, r3, #1
 80052ee:	2300      	movmi	r3, #0
 80052f0:	f04f 0900 	movpl.w	r9, #0
 80052f4:	9209      	str	r2, [sp, #36]	; 0x24
 80052f6:	bf48      	it	mi
 80052f8:	9309      	strmi	r3, [sp, #36]	; 0x24
 80052fa:	f1bb 0f00 	cmp.w	fp, #0
 80052fe:	db3d      	blt.n	800537c <_dtoa_r+0x23c>
 8005300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005302:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005306:	445b      	add	r3, fp
 8005308:	9309      	str	r3, [sp, #36]	; 0x24
 800530a:	2300      	movs	r3, #0
 800530c:	930a      	str	r3, [sp, #40]	; 0x28
 800530e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005310:	2b09      	cmp	r3, #9
 8005312:	d867      	bhi.n	80053e4 <_dtoa_r+0x2a4>
 8005314:	2b05      	cmp	r3, #5
 8005316:	bfc4      	itt	gt
 8005318:	3b04      	subgt	r3, #4
 800531a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800531c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800531e:	bfc8      	it	gt
 8005320:	2400      	movgt	r4, #0
 8005322:	f1a3 0302 	sub.w	r3, r3, #2
 8005326:	bfd8      	it	le
 8005328:	2401      	movle	r4, #1
 800532a:	2b03      	cmp	r3, #3
 800532c:	f200 8086 	bhi.w	800543c <_dtoa_r+0x2fc>
 8005330:	e8df f003 	tbb	[pc, r3]
 8005334:	5637392c 	.word	0x5637392c
 8005338:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800533c:	441c      	add	r4, r3
 800533e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005342:	2b20      	cmp	r3, #32
 8005344:	bfc1      	itttt	gt
 8005346:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800534a:	fa09 f903 	lslgt.w	r9, r9, r3
 800534e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005352:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005356:	bfd6      	itet	le
 8005358:	f1c3 0320 	rsble	r3, r3, #32
 800535c:	ea49 0003 	orrgt.w	r0, r9, r3
 8005360:	fa06 f003 	lslle.w	r0, r6, r3
 8005364:	f7fb f83e 	bl	80003e4 <__aeabi_ui2d>
 8005368:	2201      	movs	r2, #1
 800536a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800536e:	3c01      	subs	r4, #1
 8005370:	9213      	str	r2, [sp, #76]	; 0x4c
 8005372:	e76f      	b.n	8005254 <_dtoa_r+0x114>
 8005374:	2301      	movs	r3, #1
 8005376:	e7b3      	b.n	80052e0 <_dtoa_r+0x1a0>
 8005378:	900f      	str	r0, [sp, #60]	; 0x3c
 800537a:	e7b2      	b.n	80052e2 <_dtoa_r+0x1a2>
 800537c:	f1cb 0300 	rsb	r3, fp, #0
 8005380:	930a      	str	r3, [sp, #40]	; 0x28
 8005382:	2300      	movs	r3, #0
 8005384:	eba9 090b 	sub.w	r9, r9, fp
 8005388:	930e      	str	r3, [sp, #56]	; 0x38
 800538a:	e7c0      	b.n	800530e <_dtoa_r+0x1ce>
 800538c:	2300      	movs	r3, #0
 800538e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005390:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005392:	2b00      	cmp	r3, #0
 8005394:	dc55      	bgt.n	8005442 <_dtoa_r+0x302>
 8005396:	2301      	movs	r3, #1
 8005398:	461a      	mov	r2, r3
 800539a:	9306      	str	r3, [sp, #24]
 800539c:	9308      	str	r3, [sp, #32]
 800539e:	9223      	str	r2, [sp, #140]	; 0x8c
 80053a0:	e00b      	b.n	80053ba <_dtoa_r+0x27a>
 80053a2:	2301      	movs	r3, #1
 80053a4:	e7f3      	b.n	800538e <_dtoa_r+0x24e>
 80053a6:	2300      	movs	r3, #0
 80053a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80053aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80053ac:	445b      	add	r3, fp
 80053ae:	9306      	str	r3, [sp, #24]
 80053b0:	3301      	adds	r3, #1
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	9308      	str	r3, [sp, #32]
 80053b6:	bfb8      	it	lt
 80053b8:	2301      	movlt	r3, #1
 80053ba:	2100      	movs	r1, #0
 80053bc:	2204      	movs	r2, #4
 80053be:	69e8      	ldr	r0, [r5, #28]
 80053c0:	f102 0614 	add.w	r6, r2, #20
 80053c4:	429e      	cmp	r6, r3
 80053c6:	d940      	bls.n	800544a <_dtoa_r+0x30a>
 80053c8:	6041      	str	r1, [r0, #4]
 80053ca:	4628      	mov	r0, r5
 80053cc:	f000 fd98 	bl	8005f00 <_Balloc>
 80053d0:	9003      	str	r0, [sp, #12]
 80053d2:	2800      	cmp	r0, #0
 80053d4:	d13c      	bne.n	8005450 <_dtoa_r+0x310>
 80053d6:	4602      	mov	r2, r0
 80053d8:	f240 11af 	movw	r1, #431	; 0x1af
 80053dc:	4b16      	ldr	r3, [pc, #88]	; (8005438 <_dtoa_r+0x2f8>)
 80053de:	e6c3      	b.n	8005168 <_dtoa_r+0x28>
 80053e0:	2301      	movs	r3, #1
 80053e2:	e7e1      	b.n	80053a8 <_dtoa_r+0x268>
 80053e4:	2401      	movs	r4, #1
 80053e6:	2300      	movs	r3, #0
 80053e8:	940b      	str	r4, [sp, #44]	; 0x2c
 80053ea:	9322      	str	r3, [sp, #136]	; 0x88
 80053ec:	f04f 33ff 	mov.w	r3, #4294967295
 80053f0:	2200      	movs	r2, #0
 80053f2:	9306      	str	r3, [sp, #24]
 80053f4:	9308      	str	r3, [sp, #32]
 80053f6:	2312      	movs	r3, #18
 80053f8:	e7d1      	b.n	800539e <_dtoa_r+0x25e>
 80053fa:	bf00      	nop
 80053fc:	f3af 8000 	nop.w
 8005400:	636f4361 	.word	0x636f4361
 8005404:	3fd287a7 	.word	0x3fd287a7
 8005408:	8b60c8b3 	.word	0x8b60c8b3
 800540c:	3fc68a28 	.word	0x3fc68a28
 8005410:	509f79fb 	.word	0x509f79fb
 8005414:	3fd34413 	.word	0x3fd34413
 8005418:	08009a00 	.word	0x08009a00
 800541c:	08009a17 	.word	0x08009a17
 8005420:	7ff00000 	.word	0x7ff00000
 8005424:	080099fc 	.word	0x080099fc
 8005428:	080099f3 	.word	0x080099f3
 800542c:	080099cb 	.word	0x080099cb
 8005430:	3ff80000 	.word	0x3ff80000
 8005434:	08009b08 	.word	0x08009b08
 8005438:	08009a6f 	.word	0x08009a6f
 800543c:	2301      	movs	r3, #1
 800543e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005440:	e7d4      	b.n	80053ec <_dtoa_r+0x2ac>
 8005442:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005444:	9306      	str	r3, [sp, #24]
 8005446:	9308      	str	r3, [sp, #32]
 8005448:	e7b7      	b.n	80053ba <_dtoa_r+0x27a>
 800544a:	3101      	adds	r1, #1
 800544c:	0052      	lsls	r2, r2, #1
 800544e:	e7b7      	b.n	80053c0 <_dtoa_r+0x280>
 8005450:	69eb      	ldr	r3, [r5, #28]
 8005452:	9a03      	ldr	r2, [sp, #12]
 8005454:	601a      	str	r2, [r3, #0]
 8005456:	9b08      	ldr	r3, [sp, #32]
 8005458:	2b0e      	cmp	r3, #14
 800545a:	f200 80a8 	bhi.w	80055ae <_dtoa_r+0x46e>
 800545e:	2c00      	cmp	r4, #0
 8005460:	f000 80a5 	beq.w	80055ae <_dtoa_r+0x46e>
 8005464:	f1bb 0f00 	cmp.w	fp, #0
 8005468:	dd34      	ble.n	80054d4 <_dtoa_r+0x394>
 800546a:	4b9a      	ldr	r3, [pc, #616]	; (80056d4 <_dtoa_r+0x594>)
 800546c:	f00b 020f 	and.w	r2, fp, #15
 8005470:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005474:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005478:	e9d3 3400 	ldrd	r3, r4, [r3]
 800547c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005480:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005484:	d016      	beq.n	80054b4 <_dtoa_r+0x374>
 8005486:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800548a:	4b93      	ldr	r3, [pc, #588]	; (80056d8 <_dtoa_r+0x598>)
 800548c:	2703      	movs	r7, #3
 800548e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005492:	f7fb f94b 	bl	800072c <__aeabi_ddiv>
 8005496:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800549a:	f004 040f 	and.w	r4, r4, #15
 800549e:	4e8e      	ldr	r6, [pc, #568]	; (80056d8 <_dtoa_r+0x598>)
 80054a0:	b954      	cbnz	r4, 80054b8 <_dtoa_r+0x378>
 80054a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80054a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054aa:	f7fb f93f 	bl	800072c <__aeabi_ddiv>
 80054ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054b2:	e029      	b.n	8005508 <_dtoa_r+0x3c8>
 80054b4:	2702      	movs	r7, #2
 80054b6:	e7f2      	b.n	800549e <_dtoa_r+0x35e>
 80054b8:	07e1      	lsls	r1, r4, #31
 80054ba:	d508      	bpl.n	80054ce <_dtoa_r+0x38e>
 80054bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80054c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80054c4:	f7fb f808 	bl	80004d8 <__aeabi_dmul>
 80054c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80054cc:	3701      	adds	r7, #1
 80054ce:	1064      	asrs	r4, r4, #1
 80054d0:	3608      	adds	r6, #8
 80054d2:	e7e5      	b.n	80054a0 <_dtoa_r+0x360>
 80054d4:	f000 80a5 	beq.w	8005622 <_dtoa_r+0x4e2>
 80054d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80054dc:	f1cb 0400 	rsb	r4, fp, #0
 80054e0:	4b7c      	ldr	r3, [pc, #496]	; (80056d4 <_dtoa_r+0x594>)
 80054e2:	f004 020f 	and.w	r2, r4, #15
 80054e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80054ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ee:	f7fa fff3 	bl	80004d8 <__aeabi_dmul>
 80054f2:	2702      	movs	r7, #2
 80054f4:	2300      	movs	r3, #0
 80054f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054fa:	4e77      	ldr	r6, [pc, #476]	; (80056d8 <_dtoa_r+0x598>)
 80054fc:	1124      	asrs	r4, r4, #4
 80054fe:	2c00      	cmp	r4, #0
 8005500:	f040 8084 	bne.w	800560c <_dtoa_r+0x4cc>
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1d2      	bne.n	80054ae <_dtoa_r+0x36e>
 8005508:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800550c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005510:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005512:	2b00      	cmp	r3, #0
 8005514:	f000 8087 	beq.w	8005626 <_dtoa_r+0x4e6>
 8005518:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800551c:	2200      	movs	r2, #0
 800551e:	4b6f      	ldr	r3, [pc, #444]	; (80056dc <_dtoa_r+0x59c>)
 8005520:	f7fb fa4c 	bl	80009bc <__aeabi_dcmplt>
 8005524:	2800      	cmp	r0, #0
 8005526:	d07e      	beq.n	8005626 <_dtoa_r+0x4e6>
 8005528:	9b08      	ldr	r3, [sp, #32]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d07b      	beq.n	8005626 <_dtoa_r+0x4e6>
 800552e:	9b06      	ldr	r3, [sp, #24]
 8005530:	2b00      	cmp	r3, #0
 8005532:	dd38      	ble.n	80055a6 <_dtoa_r+0x466>
 8005534:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005538:	2200      	movs	r2, #0
 800553a:	4b69      	ldr	r3, [pc, #420]	; (80056e0 <_dtoa_r+0x5a0>)
 800553c:	f7fa ffcc 	bl	80004d8 <__aeabi_dmul>
 8005540:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005544:	9c06      	ldr	r4, [sp, #24]
 8005546:	f10b 38ff 	add.w	r8, fp, #4294967295
 800554a:	3701      	adds	r7, #1
 800554c:	4638      	mov	r0, r7
 800554e:	f7fa ff59 	bl	8000404 <__aeabi_i2d>
 8005552:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005556:	f7fa ffbf 	bl	80004d8 <__aeabi_dmul>
 800555a:	2200      	movs	r2, #0
 800555c:	4b61      	ldr	r3, [pc, #388]	; (80056e4 <_dtoa_r+0x5a4>)
 800555e:	f7fa fe05 	bl	800016c <__adddf3>
 8005562:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005566:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800556a:	9611      	str	r6, [sp, #68]	; 0x44
 800556c:	2c00      	cmp	r4, #0
 800556e:	d15d      	bne.n	800562c <_dtoa_r+0x4ec>
 8005570:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005574:	2200      	movs	r2, #0
 8005576:	4b5c      	ldr	r3, [pc, #368]	; (80056e8 <_dtoa_r+0x5a8>)
 8005578:	f7fa fdf6 	bl	8000168 <__aeabi_dsub>
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005584:	4633      	mov	r3, r6
 8005586:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005588:	f7fb fa36 	bl	80009f8 <__aeabi_dcmpgt>
 800558c:	2800      	cmp	r0, #0
 800558e:	f040 8295 	bne.w	8005abc <_dtoa_r+0x97c>
 8005592:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005596:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005598:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800559c:	f7fb fa0e 	bl	80009bc <__aeabi_dcmplt>
 80055a0:	2800      	cmp	r0, #0
 80055a2:	f040 8289 	bne.w	8005ab8 <_dtoa_r+0x978>
 80055a6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80055aa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80055ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f2c0 8151 	blt.w	8005858 <_dtoa_r+0x718>
 80055b6:	f1bb 0f0e 	cmp.w	fp, #14
 80055ba:	f300 814d 	bgt.w	8005858 <_dtoa_r+0x718>
 80055be:	4b45      	ldr	r3, [pc, #276]	; (80056d4 <_dtoa_r+0x594>)
 80055c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80055c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80055c8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80055cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f280 80da 	bge.w	8005788 <_dtoa_r+0x648>
 80055d4:	9b08      	ldr	r3, [sp, #32]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f300 80d6 	bgt.w	8005788 <_dtoa_r+0x648>
 80055dc:	f040 826b 	bne.w	8005ab6 <_dtoa_r+0x976>
 80055e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055e4:	2200      	movs	r2, #0
 80055e6:	4b40      	ldr	r3, [pc, #256]	; (80056e8 <_dtoa_r+0x5a8>)
 80055e8:	f7fa ff76 	bl	80004d8 <__aeabi_dmul>
 80055ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055f0:	f7fb f9f8 	bl	80009e4 <__aeabi_dcmpge>
 80055f4:	9c08      	ldr	r4, [sp, #32]
 80055f6:	4626      	mov	r6, r4
 80055f8:	2800      	cmp	r0, #0
 80055fa:	f040 8241 	bne.w	8005a80 <_dtoa_r+0x940>
 80055fe:	2331      	movs	r3, #49	; 0x31
 8005600:	9f03      	ldr	r7, [sp, #12]
 8005602:	f10b 0b01 	add.w	fp, fp, #1
 8005606:	f807 3b01 	strb.w	r3, [r7], #1
 800560a:	e23d      	b.n	8005a88 <_dtoa_r+0x948>
 800560c:	07e2      	lsls	r2, r4, #31
 800560e:	d505      	bpl.n	800561c <_dtoa_r+0x4dc>
 8005610:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005614:	f7fa ff60 	bl	80004d8 <__aeabi_dmul>
 8005618:	2301      	movs	r3, #1
 800561a:	3701      	adds	r7, #1
 800561c:	1064      	asrs	r4, r4, #1
 800561e:	3608      	adds	r6, #8
 8005620:	e76d      	b.n	80054fe <_dtoa_r+0x3be>
 8005622:	2702      	movs	r7, #2
 8005624:	e770      	b.n	8005508 <_dtoa_r+0x3c8>
 8005626:	46d8      	mov	r8, fp
 8005628:	9c08      	ldr	r4, [sp, #32]
 800562a:	e78f      	b.n	800554c <_dtoa_r+0x40c>
 800562c:	9903      	ldr	r1, [sp, #12]
 800562e:	4b29      	ldr	r3, [pc, #164]	; (80056d4 <_dtoa_r+0x594>)
 8005630:	4421      	add	r1, r4
 8005632:	9112      	str	r1, [sp, #72]	; 0x48
 8005634:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005636:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800563a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800563e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005642:	2900      	cmp	r1, #0
 8005644:	d054      	beq.n	80056f0 <_dtoa_r+0x5b0>
 8005646:	2000      	movs	r0, #0
 8005648:	4928      	ldr	r1, [pc, #160]	; (80056ec <_dtoa_r+0x5ac>)
 800564a:	f7fb f86f 	bl	800072c <__aeabi_ddiv>
 800564e:	463b      	mov	r3, r7
 8005650:	4632      	mov	r2, r6
 8005652:	f7fa fd89 	bl	8000168 <__aeabi_dsub>
 8005656:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800565a:	9f03      	ldr	r7, [sp, #12]
 800565c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005660:	f7fb f9ea 	bl	8000a38 <__aeabi_d2iz>
 8005664:	4604      	mov	r4, r0
 8005666:	f7fa fecd 	bl	8000404 <__aeabi_i2d>
 800566a:	4602      	mov	r2, r0
 800566c:	460b      	mov	r3, r1
 800566e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005672:	f7fa fd79 	bl	8000168 <__aeabi_dsub>
 8005676:	4602      	mov	r2, r0
 8005678:	460b      	mov	r3, r1
 800567a:	3430      	adds	r4, #48	; 0x30
 800567c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005680:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005684:	f807 4b01 	strb.w	r4, [r7], #1
 8005688:	f7fb f998 	bl	80009bc <__aeabi_dcmplt>
 800568c:	2800      	cmp	r0, #0
 800568e:	d173      	bne.n	8005778 <_dtoa_r+0x638>
 8005690:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005694:	2000      	movs	r0, #0
 8005696:	4911      	ldr	r1, [pc, #68]	; (80056dc <_dtoa_r+0x59c>)
 8005698:	f7fa fd66 	bl	8000168 <__aeabi_dsub>
 800569c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80056a0:	f7fb f98c 	bl	80009bc <__aeabi_dcmplt>
 80056a4:	2800      	cmp	r0, #0
 80056a6:	f040 80b6 	bne.w	8005816 <_dtoa_r+0x6d6>
 80056aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80056ac:	429f      	cmp	r7, r3
 80056ae:	f43f af7a 	beq.w	80055a6 <_dtoa_r+0x466>
 80056b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056b6:	2200      	movs	r2, #0
 80056b8:	4b09      	ldr	r3, [pc, #36]	; (80056e0 <_dtoa_r+0x5a0>)
 80056ba:	f7fa ff0d 	bl	80004d8 <__aeabi_dmul>
 80056be:	2200      	movs	r2, #0
 80056c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80056c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056c8:	4b05      	ldr	r3, [pc, #20]	; (80056e0 <_dtoa_r+0x5a0>)
 80056ca:	f7fa ff05 	bl	80004d8 <__aeabi_dmul>
 80056ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056d2:	e7c3      	b.n	800565c <_dtoa_r+0x51c>
 80056d4:	08009b08 	.word	0x08009b08
 80056d8:	08009ae0 	.word	0x08009ae0
 80056dc:	3ff00000 	.word	0x3ff00000
 80056e0:	40240000 	.word	0x40240000
 80056e4:	401c0000 	.word	0x401c0000
 80056e8:	40140000 	.word	0x40140000
 80056ec:	3fe00000 	.word	0x3fe00000
 80056f0:	4630      	mov	r0, r6
 80056f2:	4639      	mov	r1, r7
 80056f4:	f7fa fef0 	bl	80004d8 <__aeabi_dmul>
 80056f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80056fa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80056fe:	9c03      	ldr	r4, [sp, #12]
 8005700:	9314      	str	r3, [sp, #80]	; 0x50
 8005702:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005706:	f7fb f997 	bl	8000a38 <__aeabi_d2iz>
 800570a:	9015      	str	r0, [sp, #84]	; 0x54
 800570c:	f7fa fe7a 	bl	8000404 <__aeabi_i2d>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005718:	f7fa fd26 	bl	8000168 <__aeabi_dsub>
 800571c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800571e:	4606      	mov	r6, r0
 8005720:	3330      	adds	r3, #48	; 0x30
 8005722:	f804 3b01 	strb.w	r3, [r4], #1
 8005726:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005728:	460f      	mov	r7, r1
 800572a:	429c      	cmp	r4, r3
 800572c:	f04f 0200 	mov.w	r2, #0
 8005730:	d124      	bne.n	800577c <_dtoa_r+0x63c>
 8005732:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005736:	4baf      	ldr	r3, [pc, #700]	; (80059f4 <_dtoa_r+0x8b4>)
 8005738:	f7fa fd18 	bl	800016c <__adddf3>
 800573c:	4602      	mov	r2, r0
 800573e:	460b      	mov	r3, r1
 8005740:	4630      	mov	r0, r6
 8005742:	4639      	mov	r1, r7
 8005744:	f7fb f958 	bl	80009f8 <__aeabi_dcmpgt>
 8005748:	2800      	cmp	r0, #0
 800574a:	d163      	bne.n	8005814 <_dtoa_r+0x6d4>
 800574c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005750:	2000      	movs	r0, #0
 8005752:	49a8      	ldr	r1, [pc, #672]	; (80059f4 <_dtoa_r+0x8b4>)
 8005754:	f7fa fd08 	bl	8000168 <__aeabi_dsub>
 8005758:	4602      	mov	r2, r0
 800575a:	460b      	mov	r3, r1
 800575c:	4630      	mov	r0, r6
 800575e:	4639      	mov	r1, r7
 8005760:	f7fb f92c 	bl	80009bc <__aeabi_dcmplt>
 8005764:	2800      	cmp	r0, #0
 8005766:	f43f af1e 	beq.w	80055a6 <_dtoa_r+0x466>
 800576a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800576c:	1e7b      	subs	r3, r7, #1
 800576e:	9314      	str	r3, [sp, #80]	; 0x50
 8005770:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005774:	2b30      	cmp	r3, #48	; 0x30
 8005776:	d0f8      	beq.n	800576a <_dtoa_r+0x62a>
 8005778:	46c3      	mov	fp, r8
 800577a:	e03b      	b.n	80057f4 <_dtoa_r+0x6b4>
 800577c:	4b9e      	ldr	r3, [pc, #632]	; (80059f8 <_dtoa_r+0x8b8>)
 800577e:	f7fa feab 	bl	80004d8 <__aeabi_dmul>
 8005782:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005786:	e7bc      	b.n	8005702 <_dtoa_r+0x5c2>
 8005788:	9f03      	ldr	r7, [sp, #12]
 800578a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800578e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005792:	4640      	mov	r0, r8
 8005794:	4649      	mov	r1, r9
 8005796:	f7fa ffc9 	bl	800072c <__aeabi_ddiv>
 800579a:	f7fb f94d 	bl	8000a38 <__aeabi_d2iz>
 800579e:	4604      	mov	r4, r0
 80057a0:	f7fa fe30 	bl	8000404 <__aeabi_i2d>
 80057a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80057a8:	f7fa fe96 	bl	80004d8 <__aeabi_dmul>
 80057ac:	4602      	mov	r2, r0
 80057ae:	460b      	mov	r3, r1
 80057b0:	4640      	mov	r0, r8
 80057b2:	4649      	mov	r1, r9
 80057b4:	f7fa fcd8 	bl	8000168 <__aeabi_dsub>
 80057b8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80057bc:	f807 6b01 	strb.w	r6, [r7], #1
 80057c0:	9e03      	ldr	r6, [sp, #12]
 80057c2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80057c6:	1bbe      	subs	r6, r7, r6
 80057c8:	45b4      	cmp	ip, r6
 80057ca:	4602      	mov	r2, r0
 80057cc:	460b      	mov	r3, r1
 80057ce:	d136      	bne.n	800583e <_dtoa_r+0x6fe>
 80057d0:	f7fa fccc 	bl	800016c <__adddf3>
 80057d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80057d8:	4680      	mov	r8, r0
 80057da:	4689      	mov	r9, r1
 80057dc:	f7fb f90c 	bl	80009f8 <__aeabi_dcmpgt>
 80057e0:	bb58      	cbnz	r0, 800583a <_dtoa_r+0x6fa>
 80057e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80057e6:	4640      	mov	r0, r8
 80057e8:	4649      	mov	r1, r9
 80057ea:	f7fb f8dd 	bl	80009a8 <__aeabi_dcmpeq>
 80057ee:	b108      	cbz	r0, 80057f4 <_dtoa_r+0x6b4>
 80057f0:	07e3      	lsls	r3, r4, #31
 80057f2:	d422      	bmi.n	800583a <_dtoa_r+0x6fa>
 80057f4:	4651      	mov	r1, sl
 80057f6:	4628      	mov	r0, r5
 80057f8:	f000 fbc2 	bl	8005f80 <_Bfree>
 80057fc:	2300      	movs	r3, #0
 80057fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005800:	703b      	strb	r3, [r7, #0]
 8005802:	f10b 0301 	add.w	r3, fp, #1
 8005806:	6013      	str	r3, [r2, #0]
 8005808:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800580a:	2b00      	cmp	r3, #0
 800580c:	f43f ace6 	beq.w	80051dc <_dtoa_r+0x9c>
 8005810:	601f      	str	r7, [r3, #0]
 8005812:	e4e3      	b.n	80051dc <_dtoa_r+0x9c>
 8005814:	4627      	mov	r7, r4
 8005816:	463b      	mov	r3, r7
 8005818:	461f      	mov	r7, r3
 800581a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800581e:	2a39      	cmp	r2, #57	; 0x39
 8005820:	d107      	bne.n	8005832 <_dtoa_r+0x6f2>
 8005822:	9a03      	ldr	r2, [sp, #12]
 8005824:	429a      	cmp	r2, r3
 8005826:	d1f7      	bne.n	8005818 <_dtoa_r+0x6d8>
 8005828:	2230      	movs	r2, #48	; 0x30
 800582a:	9903      	ldr	r1, [sp, #12]
 800582c:	f108 0801 	add.w	r8, r8, #1
 8005830:	700a      	strb	r2, [r1, #0]
 8005832:	781a      	ldrb	r2, [r3, #0]
 8005834:	3201      	adds	r2, #1
 8005836:	701a      	strb	r2, [r3, #0]
 8005838:	e79e      	b.n	8005778 <_dtoa_r+0x638>
 800583a:	46d8      	mov	r8, fp
 800583c:	e7eb      	b.n	8005816 <_dtoa_r+0x6d6>
 800583e:	2200      	movs	r2, #0
 8005840:	4b6d      	ldr	r3, [pc, #436]	; (80059f8 <_dtoa_r+0x8b8>)
 8005842:	f7fa fe49 	bl	80004d8 <__aeabi_dmul>
 8005846:	2200      	movs	r2, #0
 8005848:	2300      	movs	r3, #0
 800584a:	4680      	mov	r8, r0
 800584c:	4689      	mov	r9, r1
 800584e:	f7fb f8ab 	bl	80009a8 <__aeabi_dcmpeq>
 8005852:	2800      	cmp	r0, #0
 8005854:	d09b      	beq.n	800578e <_dtoa_r+0x64e>
 8005856:	e7cd      	b.n	80057f4 <_dtoa_r+0x6b4>
 8005858:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800585a:	2a00      	cmp	r2, #0
 800585c:	f000 80c4 	beq.w	80059e8 <_dtoa_r+0x8a8>
 8005860:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005862:	2a01      	cmp	r2, #1
 8005864:	f300 80a8 	bgt.w	80059b8 <_dtoa_r+0x878>
 8005868:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800586a:	2a00      	cmp	r2, #0
 800586c:	f000 80a0 	beq.w	80059b0 <_dtoa_r+0x870>
 8005870:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005874:	464f      	mov	r7, r9
 8005876:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005878:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800587a:	2101      	movs	r1, #1
 800587c:	441a      	add	r2, r3
 800587e:	4628      	mov	r0, r5
 8005880:	4499      	add	r9, r3
 8005882:	9209      	str	r2, [sp, #36]	; 0x24
 8005884:	f000 fc7c 	bl	8006180 <__i2b>
 8005888:	4606      	mov	r6, r0
 800588a:	b15f      	cbz	r7, 80058a4 <_dtoa_r+0x764>
 800588c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800588e:	2b00      	cmp	r3, #0
 8005890:	dd08      	ble.n	80058a4 <_dtoa_r+0x764>
 8005892:	42bb      	cmp	r3, r7
 8005894:	bfa8      	it	ge
 8005896:	463b      	movge	r3, r7
 8005898:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800589a:	eba9 0903 	sub.w	r9, r9, r3
 800589e:	1aff      	subs	r7, r7, r3
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	9309      	str	r3, [sp, #36]	; 0x24
 80058a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058a6:	b1f3      	cbz	r3, 80058e6 <_dtoa_r+0x7a6>
 80058a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 80a0 	beq.w	80059f0 <_dtoa_r+0x8b0>
 80058b0:	2c00      	cmp	r4, #0
 80058b2:	dd10      	ble.n	80058d6 <_dtoa_r+0x796>
 80058b4:	4631      	mov	r1, r6
 80058b6:	4622      	mov	r2, r4
 80058b8:	4628      	mov	r0, r5
 80058ba:	f000 fd1f 	bl	80062fc <__pow5mult>
 80058be:	4652      	mov	r2, sl
 80058c0:	4601      	mov	r1, r0
 80058c2:	4606      	mov	r6, r0
 80058c4:	4628      	mov	r0, r5
 80058c6:	f000 fc71 	bl	80061ac <__multiply>
 80058ca:	4680      	mov	r8, r0
 80058cc:	4651      	mov	r1, sl
 80058ce:	4628      	mov	r0, r5
 80058d0:	f000 fb56 	bl	8005f80 <_Bfree>
 80058d4:	46c2      	mov	sl, r8
 80058d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058d8:	1b1a      	subs	r2, r3, r4
 80058da:	d004      	beq.n	80058e6 <_dtoa_r+0x7a6>
 80058dc:	4651      	mov	r1, sl
 80058de:	4628      	mov	r0, r5
 80058e0:	f000 fd0c 	bl	80062fc <__pow5mult>
 80058e4:	4682      	mov	sl, r0
 80058e6:	2101      	movs	r1, #1
 80058e8:	4628      	mov	r0, r5
 80058ea:	f000 fc49 	bl	8006180 <__i2b>
 80058ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058f0:	4604      	mov	r4, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f340 8082 	ble.w	80059fc <_dtoa_r+0x8bc>
 80058f8:	461a      	mov	r2, r3
 80058fa:	4601      	mov	r1, r0
 80058fc:	4628      	mov	r0, r5
 80058fe:	f000 fcfd 	bl	80062fc <__pow5mult>
 8005902:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005904:	4604      	mov	r4, r0
 8005906:	2b01      	cmp	r3, #1
 8005908:	dd7b      	ble.n	8005a02 <_dtoa_r+0x8c2>
 800590a:	f04f 0800 	mov.w	r8, #0
 800590e:	6923      	ldr	r3, [r4, #16]
 8005910:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005914:	6918      	ldr	r0, [r3, #16]
 8005916:	f000 fbe5 	bl	80060e4 <__hi0bits>
 800591a:	f1c0 0020 	rsb	r0, r0, #32
 800591e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005920:	4418      	add	r0, r3
 8005922:	f010 001f 	ands.w	r0, r0, #31
 8005926:	f000 8092 	beq.w	8005a4e <_dtoa_r+0x90e>
 800592a:	f1c0 0320 	rsb	r3, r0, #32
 800592e:	2b04      	cmp	r3, #4
 8005930:	f340 8085 	ble.w	8005a3e <_dtoa_r+0x8fe>
 8005934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005936:	f1c0 001c 	rsb	r0, r0, #28
 800593a:	4403      	add	r3, r0
 800593c:	4481      	add	r9, r0
 800593e:	4407      	add	r7, r0
 8005940:	9309      	str	r3, [sp, #36]	; 0x24
 8005942:	f1b9 0f00 	cmp.w	r9, #0
 8005946:	dd05      	ble.n	8005954 <_dtoa_r+0x814>
 8005948:	4651      	mov	r1, sl
 800594a:	464a      	mov	r2, r9
 800594c:	4628      	mov	r0, r5
 800594e:	f000 fd2f 	bl	80063b0 <__lshift>
 8005952:	4682      	mov	sl, r0
 8005954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005956:	2b00      	cmp	r3, #0
 8005958:	dd05      	ble.n	8005966 <_dtoa_r+0x826>
 800595a:	4621      	mov	r1, r4
 800595c:	461a      	mov	r2, r3
 800595e:	4628      	mov	r0, r5
 8005960:	f000 fd26 	bl	80063b0 <__lshift>
 8005964:	4604      	mov	r4, r0
 8005966:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005968:	2b00      	cmp	r3, #0
 800596a:	d072      	beq.n	8005a52 <_dtoa_r+0x912>
 800596c:	4621      	mov	r1, r4
 800596e:	4650      	mov	r0, sl
 8005970:	f000 fd8a 	bl	8006488 <__mcmp>
 8005974:	2800      	cmp	r0, #0
 8005976:	da6c      	bge.n	8005a52 <_dtoa_r+0x912>
 8005978:	2300      	movs	r3, #0
 800597a:	4651      	mov	r1, sl
 800597c:	220a      	movs	r2, #10
 800597e:	4628      	mov	r0, r5
 8005980:	f000 fb20 	bl	8005fc4 <__multadd>
 8005984:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005986:	4682      	mov	sl, r0
 8005988:	f10b 3bff 	add.w	fp, fp, #4294967295
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 81ac 	beq.w	8005cea <_dtoa_r+0xbaa>
 8005992:	2300      	movs	r3, #0
 8005994:	4631      	mov	r1, r6
 8005996:	220a      	movs	r2, #10
 8005998:	4628      	mov	r0, r5
 800599a:	f000 fb13 	bl	8005fc4 <__multadd>
 800599e:	9b06      	ldr	r3, [sp, #24]
 80059a0:	4606      	mov	r6, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f300 8093 	bgt.w	8005ace <_dtoa_r+0x98e>
 80059a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	dc59      	bgt.n	8005a62 <_dtoa_r+0x922>
 80059ae:	e08e      	b.n	8005ace <_dtoa_r+0x98e>
 80059b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80059b2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80059b6:	e75d      	b.n	8005874 <_dtoa_r+0x734>
 80059b8:	9b08      	ldr	r3, [sp, #32]
 80059ba:	1e5c      	subs	r4, r3, #1
 80059bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059be:	42a3      	cmp	r3, r4
 80059c0:	bfbf      	itttt	lt
 80059c2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80059c4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80059c6:	1ae3      	sublt	r3, r4, r3
 80059c8:	18d2      	addlt	r2, r2, r3
 80059ca:	bfa8      	it	ge
 80059cc:	1b1c      	subge	r4, r3, r4
 80059ce:	9b08      	ldr	r3, [sp, #32]
 80059d0:	bfbe      	ittt	lt
 80059d2:	940a      	strlt	r4, [sp, #40]	; 0x28
 80059d4:	920e      	strlt	r2, [sp, #56]	; 0x38
 80059d6:	2400      	movlt	r4, #0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	bfb5      	itete	lt
 80059dc:	eba9 0703 	sublt.w	r7, r9, r3
 80059e0:	464f      	movge	r7, r9
 80059e2:	2300      	movlt	r3, #0
 80059e4:	9b08      	ldrge	r3, [sp, #32]
 80059e6:	e747      	b.n	8005878 <_dtoa_r+0x738>
 80059e8:	464f      	mov	r7, r9
 80059ea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80059ec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80059ee:	e74c      	b.n	800588a <_dtoa_r+0x74a>
 80059f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059f2:	e773      	b.n	80058dc <_dtoa_r+0x79c>
 80059f4:	3fe00000 	.word	0x3fe00000
 80059f8:	40240000 	.word	0x40240000
 80059fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	dc18      	bgt.n	8005a34 <_dtoa_r+0x8f4>
 8005a02:	9b04      	ldr	r3, [sp, #16]
 8005a04:	b9b3      	cbnz	r3, 8005a34 <_dtoa_r+0x8f4>
 8005a06:	9b05      	ldr	r3, [sp, #20]
 8005a08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a0c:	b993      	cbnz	r3, 8005a34 <_dtoa_r+0x8f4>
 8005a0e:	9b05      	ldr	r3, [sp, #20]
 8005a10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a14:	0d1b      	lsrs	r3, r3, #20
 8005a16:	051b      	lsls	r3, r3, #20
 8005a18:	b17b      	cbz	r3, 8005a3a <_dtoa_r+0x8fa>
 8005a1a:	f04f 0801 	mov.w	r8, #1
 8005a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a20:	f109 0901 	add.w	r9, r9, #1
 8005a24:	3301      	adds	r3, #1
 8005a26:	9309      	str	r3, [sp, #36]	; 0x24
 8005a28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f47f af6f 	bne.w	800590e <_dtoa_r+0x7ce>
 8005a30:	2001      	movs	r0, #1
 8005a32:	e774      	b.n	800591e <_dtoa_r+0x7de>
 8005a34:	f04f 0800 	mov.w	r8, #0
 8005a38:	e7f6      	b.n	8005a28 <_dtoa_r+0x8e8>
 8005a3a:	4698      	mov	r8, r3
 8005a3c:	e7f4      	b.n	8005a28 <_dtoa_r+0x8e8>
 8005a3e:	d080      	beq.n	8005942 <_dtoa_r+0x802>
 8005a40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a42:	331c      	adds	r3, #28
 8005a44:	441a      	add	r2, r3
 8005a46:	4499      	add	r9, r3
 8005a48:	441f      	add	r7, r3
 8005a4a:	9209      	str	r2, [sp, #36]	; 0x24
 8005a4c:	e779      	b.n	8005942 <_dtoa_r+0x802>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	e7f6      	b.n	8005a40 <_dtoa_r+0x900>
 8005a52:	9b08      	ldr	r3, [sp, #32]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	dc34      	bgt.n	8005ac2 <_dtoa_r+0x982>
 8005a58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	dd31      	ble.n	8005ac2 <_dtoa_r+0x982>
 8005a5e:	9b08      	ldr	r3, [sp, #32]
 8005a60:	9306      	str	r3, [sp, #24]
 8005a62:	9b06      	ldr	r3, [sp, #24]
 8005a64:	b963      	cbnz	r3, 8005a80 <_dtoa_r+0x940>
 8005a66:	4621      	mov	r1, r4
 8005a68:	2205      	movs	r2, #5
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	f000 faaa 	bl	8005fc4 <__multadd>
 8005a70:	4601      	mov	r1, r0
 8005a72:	4604      	mov	r4, r0
 8005a74:	4650      	mov	r0, sl
 8005a76:	f000 fd07 	bl	8006488 <__mcmp>
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	f73f adbf 	bgt.w	80055fe <_dtoa_r+0x4be>
 8005a80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a82:	9f03      	ldr	r7, [sp, #12]
 8005a84:	ea6f 0b03 	mvn.w	fp, r3
 8005a88:	f04f 0800 	mov.w	r8, #0
 8005a8c:	4621      	mov	r1, r4
 8005a8e:	4628      	mov	r0, r5
 8005a90:	f000 fa76 	bl	8005f80 <_Bfree>
 8005a94:	2e00      	cmp	r6, #0
 8005a96:	f43f aead 	beq.w	80057f4 <_dtoa_r+0x6b4>
 8005a9a:	f1b8 0f00 	cmp.w	r8, #0
 8005a9e:	d005      	beq.n	8005aac <_dtoa_r+0x96c>
 8005aa0:	45b0      	cmp	r8, r6
 8005aa2:	d003      	beq.n	8005aac <_dtoa_r+0x96c>
 8005aa4:	4641      	mov	r1, r8
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	f000 fa6a 	bl	8005f80 <_Bfree>
 8005aac:	4631      	mov	r1, r6
 8005aae:	4628      	mov	r0, r5
 8005ab0:	f000 fa66 	bl	8005f80 <_Bfree>
 8005ab4:	e69e      	b.n	80057f4 <_dtoa_r+0x6b4>
 8005ab6:	2400      	movs	r4, #0
 8005ab8:	4626      	mov	r6, r4
 8005aba:	e7e1      	b.n	8005a80 <_dtoa_r+0x940>
 8005abc:	46c3      	mov	fp, r8
 8005abe:	4626      	mov	r6, r4
 8005ac0:	e59d      	b.n	80055fe <_dtoa_r+0x4be>
 8005ac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f000 80c8 	beq.w	8005c5a <_dtoa_r+0xb1a>
 8005aca:	9b08      	ldr	r3, [sp, #32]
 8005acc:	9306      	str	r3, [sp, #24]
 8005ace:	2f00      	cmp	r7, #0
 8005ad0:	dd05      	ble.n	8005ade <_dtoa_r+0x99e>
 8005ad2:	4631      	mov	r1, r6
 8005ad4:	463a      	mov	r2, r7
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	f000 fc6a 	bl	80063b0 <__lshift>
 8005adc:	4606      	mov	r6, r0
 8005ade:	f1b8 0f00 	cmp.w	r8, #0
 8005ae2:	d05b      	beq.n	8005b9c <_dtoa_r+0xa5c>
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	6871      	ldr	r1, [r6, #4]
 8005ae8:	f000 fa0a 	bl	8005f00 <_Balloc>
 8005aec:	4607      	mov	r7, r0
 8005aee:	b928      	cbnz	r0, 8005afc <_dtoa_r+0x9bc>
 8005af0:	4602      	mov	r2, r0
 8005af2:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005af6:	4b81      	ldr	r3, [pc, #516]	; (8005cfc <_dtoa_r+0xbbc>)
 8005af8:	f7ff bb36 	b.w	8005168 <_dtoa_r+0x28>
 8005afc:	6932      	ldr	r2, [r6, #16]
 8005afe:	f106 010c 	add.w	r1, r6, #12
 8005b02:	3202      	adds	r2, #2
 8005b04:	0092      	lsls	r2, r2, #2
 8005b06:	300c      	adds	r0, #12
 8005b08:	f001 ff72 	bl	80079f0 <memcpy>
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	4639      	mov	r1, r7
 8005b10:	4628      	mov	r0, r5
 8005b12:	f000 fc4d 	bl	80063b0 <__lshift>
 8005b16:	46b0      	mov	r8, r6
 8005b18:	4606      	mov	r6, r0
 8005b1a:	9b03      	ldr	r3, [sp, #12]
 8005b1c:	9a03      	ldr	r2, [sp, #12]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	9308      	str	r3, [sp, #32]
 8005b22:	9b06      	ldr	r3, [sp, #24]
 8005b24:	4413      	add	r3, r2
 8005b26:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b28:	9b04      	ldr	r3, [sp, #16]
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	930a      	str	r3, [sp, #40]	; 0x28
 8005b30:	9b08      	ldr	r3, [sp, #32]
 8005b32:	4621      	mov	r1, r4
 8005b34:	3b01      	subs	r3, #1
 8005b36:	4650      	mov	r0, sl
 8005b38:	9304      	str	r3, [sp, #16]
 8005b3a:	f7ff fa77 	bl	800502c <quorem>
 8005b3e:	4641      	mov	r1, r8
 8005b40:	9006      	str	r0, [sp, #24]
 8005b42:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005b46:	4650      	mov	r0, sl
 8005b48:	f000 fc9e 	bl	8006488 <__mcmp>
 8005b4c:	4632      	mov	r2, r6
 8005b4e:	9009      	str	r0, [sp, #36]	; 0x24
 8005b50:	4621      	mov	r1, r4
 8005b52:	4628      	mov	r0, r5
 8005b54:	f000 fcb4 	bl	80064c0 <__mdiff>
 8005b58:	68c2      	ldr	r2, [r0, #12]
 8005b5a:	4607      	mov	r7, r0
 8005b5c:	bb02      	cbnz	r2, 8005ba0 <_dtoa_r+0xa60>
 8005b5e:	4601      	mov	r1, r0
 8005b60:	4650      	mov	r0, sl
 8005b62:	f000 fc91 	bl	8006488 <__mcmp>
 8005b66:	4602      	mov	r2, r0
 8005b68:	4639      	mov	r1, r7
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	920c      	str	r2, [sp, #48]	; 0x30
 8005b6e:	f000 fa07 	bl	8005f80 <_Bfree>
 8005b72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b76:	9f08      	ldr	r7, [sp, #32]
 8005b78:	ea43 0102 	orr.w	r1, r3, r2
 8005b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b7e:	4319      	orrs	r1, r3
 8005b80:	d110      	bne.n	8005ba4 <_dtoa_r+0xa64>
 8005b82:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005b86:	d029      	beq.n	8005bdc <_dtoa_r+0xa9c>
 8005b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	dd02      	ble.n	8005b94 <_dtoa_r+0xa54>
 8005b8e:	9b06      	ldr	r3, [sp, #24]
 8005b90:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005b94:	9b04      	ldr	r3, [sp, #16]
 8005b96:	f883 9000 	strb.w	r9, [r3]
 8005b9a:	e777      	b.n	8005a8c <_dtoa_r+0x94c>
 8005b9c:	4630      	mov	r0, r6
 8005b9e:	e7ba      	b.n	8005b16 <_dtoa_r+0x9d6>
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	e7e1      	b.n	8005b68 <_dtoa_r+0xa28>
 8005ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	db04      	blt.n	8005bb4 <_dtoa_r+0xa74>
 8005baa:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005bac:	430b      	orrs	r3, r1
 8005bae:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005bb0:	430b      	orrs	r3, r1
 8005bb2:	d120      	bne.n	8005bf6 <_dtoa_r+0xab6>
 8005bb4:	2a00      	cmp	r2, #0
 8005bb6:	dded      	ble.n	8005b94 <_dtoa_r+0xa54>
 8005bb8:	4651      	mov	r1, sl
 8005bba:	2201      	movs	r2, #1
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	f000 fbf7 	bl	80063b0 <__lshift>
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	4682      	mov	sl, r0
 8005bc6:	f000 fc5f 	bl	8006488 <__mcmp>
 8005bca:	2800      	cmp	r0, #0
 8005bcc:	dc03      	bgt.n	8005bd6 <_dtoa_r+0xa96>
 8005bce:	d1e1      	bne.n	8005b94 <_dtoa_r+0xa54>
 8005bd0:	f019 0f01 	tst.w	r9, #1
 8005bd4:	d0de      	beq.n	8005b94 <_dtoa_r+0xa54>
 8005bd6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005bda:	d1d8      	bne.n	8005b8e <_dtoa_r+0xa4e>
 8005bdc:	2339      	movs	r3, #57	; 0x39
 8005bde:	9a04      	ldr	r2, [sp, #16]
 8005be0:	7013      	strb	r3, [r2, #0]
 8005be2:	463b      	mov	r3, r7
 8005be4:	461f      	mov	r7, r3
 8005be6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005bea:	3b01      	subs	r3, #1
 8005bec:	2a39      	cmp	r2, #57	; 0x39
 8005bee:	d06b      	beq.n	8005cc8 <_dtoa_r+0xb88>
 8005bf0:	3201      	adds	r2, #1
 8005bf2:	701a      	strb	r2, [r3, #0]
 8005bf4:	e74a      	b.n	8005a8c <_dtoa_r+0x94c>
 8005bf6:	2a00      	cmp	r2, #0
 8005bf8:	dd07      	ble.n	8005c0a <_dtoa_r+0xaca>
 8005bfa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005bfe:	d0ed      	beq.n	8005bdc <_dtoa_r+0xa9c>
 8005c00:	9a04      	ldr	r2, [sp, #16]
 8005c02:	f109 0301 	add.w	r3, r9, #1
 8005c06:	7013      	strb	r3, [r2, #0]
 8005c08:	e740      	b.n	8005a8c <_dtoa_r+0x94c>
 8005c0a:	9b08      	ldr	r3, [sp, #32]
 8005c0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c0e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d042      	beq.n	8005c9c <_dtoa_r+0xb5c>
 8005c16:	4651      	mov	r1, sl
 8005c18:	2300      	movs	r3, #0
 8005c1a:	220a      	movs	r2, #10
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	f000 f9d1 	bl	8005fc4 <__multadd>
 8005c22:	45b0      	cmp	r8, r6
 8005c24:	4682      	mov	sl, r0
 8005c26:	f04f 0300 	mov.w	r3, #0
 8005c2a:	f04f 020a 	mov.w	r2, #10
 8005c2e:	4641      	mov	r1, r8
 8005c30:	4628      	mov	r0, r5
 8005c32:	d107      	bne.n	8005c44 <_dtoa_r+0xb04>
 8005c34:	f000 f9c6 	bl	8005fc4 <__multadd>
 8005c38:	4680      	mov	r8, r0
 8005c3a:	4606      	mov	r6, r0
 8005c3c:	9b08      	ldr	r3, [sp, #32]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	9308      	str	r3, [sp, #32]
 8005c42:	e775      	b.n	8005b30 <_dtoa_r+0x9f0>
 8005c44:	f000 f9be 	bl	8005fc4 <__multadd>
 8005c48:	4631      	mov	r1, r6
 8005c4a:	4680      	mov	r8, r0
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	220a      	movs	r2, #10
 8005c50:	4628      	mov	r0, r5
 8005c52:	f000 f9b7 	bl	8005fc4 <__multadd>
 8005c56:	4606      	mov	r6, r0
 8005c58:	e7f0      	b.n	8005c3c <_dtoa_r+0xafc>
 8005c5a:	9b08      	ldr	r3, [sp, #32]
 8005c5c:	9306      	str	r3, [sp, #24]
 8005c5e:	9f03      	ldr	r7, [sp, #12]
 8005c60:	4621      	mov	r1, r4
 8005c62:	4650      	mov	r0, sl
 8005c64:	f7ff f9e2 	bl	800502c <quorem>
 8005c68:	9b03      	ldr	r3, [sp, #12]
 8005c6a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005c6e:	f807 9b01 	strb.w	r9, [r7], #1
 8005c72:	1afa      	subs	r2, r7, r3
 8005c74:	9b06      	ldr	r3, [sp, #24]
 8005c76:	4293      	cmp	r3, r2
 8005c78:	dd07      	ble.n	8005c8a <_dtoa_r+0xb4a>
 8005c7a:	4651      	mov	r1, sl
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	220a      	movs	r2, #10
 8005c80:	4628      	mov	r0, r5
 8005c82:	f000 f99f 	bl	8005fc4 <__multadd>
 8005c86:	4682      	mov	sl, r0
 8005c88:	e7ea      	b.n	8005c60 <_dtoa_r+0xb20>
 8005c8a:	9b06      	ldr	r3, [sp, #24]
 8005c8c:	f04f 0800 	mov.w	r8, #0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	bfcc      	ite	gt
 8005c94:	461f      	movgt	r7, r3
 8005c96:	2701      	movle	r7, #1
 8005c98:	9b03      	ldr	r3, [sp, #12]
 8005c9a:	441f      	add	r7, r3
 8005c9c:	4651      	mov	r1, sl
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	f000 fb85 	bl	80063b0 <__lshift>
 8005ca6:	4621      	mov	r1, r4
 8005ca8:	4682      	mov	sl, r0
 8005caa:	f000 fbed 	bl	8006488 <__mcmp>
 8005cae:	2800      	cmp	r0, #0
 8005cb0:	dc97      	bgt.n	8005be2 <_dtoa_r+0xaa2>
 8005cb2:	d102      	bne.n	8005cba <_dtoa_r+0xb7a>
 8005cb4:	f019 0f01 	tst.w	r9, #1
 8005cb8:	d193      	bne.n	8005be2 <_dtoa_r+0xaa2>
 8005cba:	463b      	mov	r3, r7
 8005cbc:	461f      	mov	r7, r3
 8005cbe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cc2:	2a30      	cmp	r2, #48	; 0x30
 8005cc4:	d0fa      	beq.n	8005cbc <_dtoa_r+0xb7c>
 8005cc6:	e6e1      	b.n	8005a8c <_dtoa_r+0x94c>
 8005cc8:	9a03      	ldr	r2, [sp, #12]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d18a      	bne.n	8005be4 <_dtoa_r+0xaa4>
 8005cce:	2331      	movs	r3, #49	; 0x31
 8005cd0:	f10b 0b01 	add.w	fp, fp, #1
 8005cd4:	e797      	b.n	8005c06 <_dtoa_r+0xac6>
 8005cd6:	4b0a      	ldr	r3, [pc, #40]	; (8005d00 <_dtoa_r+0xbc0>)
 8005cd8:	f7ff ba9f 	b.w	800521a <_dtoa_r+0xda>
 8005cdc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f47f aa77 	bne.w	80051d2 <_dtoa_r+0x92>
 8005ce4:	4b07      	ldr	r3, [pc, #28]	; (8005d04 <_dtoa_r+0xbc4>)
 8005ce6:	f7ff ba98 	b.w	800521a <_dtoa_r+0xda>
 8005cea:	9b06      	ldr	r3, [sp, #24]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	dcb6      	bgt.n	8005c5e <_dtoa_r+0xb1e>
 8005cf0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	f73f aeb5 	bgt.w	8005a62 <_dtoa_r+0x922>
 8005cf8:	e7b1      	b.n	8005c5e <_dtoa_r+0xb1e>
 8005cfa:	bf00      	nop
 8005cfc:	08009a6f 	.word	0x08009a6f
 8005d00:	080099ca 	.word	0x080099ca
 8005d04:	080099f3 	.word	0x080099f3

08005d08 <_free_r>:
 8005d08:	b538      	push	{r3, r4, r5, lr}
 8005d0a:	4605      	mov	r5, r0
 8005d0c:	2900      	cmp	r1, #0
 8005d0e:	d040      	beq.n	8005d92 <_free_r+0x8a>
 8005d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d14:	1f0c      	subs	r4, r1, #4
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	bfb8      	it	lt
 8005d1a:	18e4      	addlt	r4, r4, r3
 8005d1c:	f000 f8e4 	bl	8005ee8 <__malloc_lock>
 8005d20:	4a1c      	ldr	r2, [pc, #112]	; (8005d94 <_free_r+0x8c>)
 8005d22:	6813      	ldr	r3, [r2, #0]
 8005d24:	b933      	cbnz	r3, 8005d34 <_free_r+0x2c>
 8005d26:	6063      	str	r3, [r4, #4]
 8005d28:	6014      	str	r4, [r2, #0]
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d30:	f000 b8e0 	b.w	8005ef4 <__malloc_unlock>
 8005d34:	42a3      	cmp	r3, r4
 8005d36:	d908      	bls.n	8005d4a <_free_r+0x42>
 8005d38:	6820      	ldr	r0, [r4, #0]
 8005d3a:	1821      	adds	r1, r4, r0
 8005d3c:	428b      	cmp	r3, r1
 8005d3e:	bf01      	itttt	eq
 8005d40:	6819      	ldreq	r1, [r3, #0]
 8005d42:	685b      	ldreq	r3, [r3, #4]
 8005d44:	1809      	addeq	r1, r1, r0
 8005d46:	6021      	streq	r1, [r4, #0]
 8005d48:	e7ed      	b.n	8005d26 <_free_r+0x1e>
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	b10b      	cbz	r3, 8005d54 <_free_r+0x4c>
 8005d50:	42a3      	cmp	r3, r4
 8005d52:	d9fa      	bls.n	8005d4a <_free_r+0x42>
 8005d54:	6811      	ldr	r1, [r2, #0]
 8005d56:	1850      	adds	r0, r2, r1
 8005d58:	42a0      	cmp	r0, r4
 8005d5a:	d10b      	bne.n	8005d74 <_free_r+0x6c>
 8005d5c:	6820      	ldr	r0, [r4, #0]
 8005d5e:	4401      	add	r1, r0
 8005d60:	1850      	adds	r0, r2, r1
 8005d62:	4283      	cmp	r3, r0
 8005d64:	6011      	str	r1, [r2, #0]
 8005d66:	d1e0      	bne.n	8005d2a <_free_r+0x22>
 8005d68:	6818      	ldr	r0, [r3, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	4408      	add	r0, r1
 8005d6e:	6010      	str	r0, [r2, #0]
 8005d70:	6053      	str	r3, [r2, #4]
 8005d72:	e7da      	b.n	8005d2a <_free_r+0x22>
 8005d74:	d902      	bls.n	8005d7c <_free_r+0x74>
 8005d76:	230c      	movs	r3, #12
 8005d78:	602b      	str	r3, [r5, #0]
 8005d7a:	e7d6      	b.n	8005d2a <_free_r+0x22>
 8005d7c:	6820      	ldr	r0, [r4, #0]
 8005d7e:	1821      	adds	r1, r4, r0
 8005d80:	428b      	cmp	r3, r1
 8005d82:	bf01      	itttt	eq
 8005d84:	6819      	ldreq	r1, [r3, #0]
 8005d86:	685b      	ldreq	r3, [r3, #4]
 8005d88:	1809      	addeq	r1, r1, r0
 8005d8a:	6021      	streq	r1, [r4, #0]
 8005d8c:	6063      	str	r3, [r4, #4]
 8005d8e:	6054      	str	r4, [r2, #4]
 8005d90:	e7cb      	b.n	8005d2a <_free_r+0x22>
 8005d92:	bd38      	pop	{r3, r4, r5, pc}
 8005d94:	2000041c 	.word	0x2000041c

08005d98 <malloc>:
 8005d98:	4b02      	ldr	r3, [pc, #8]	; (8005da4 <malloc+0xc>)
 8005d9a:	4601      	mov	r1, r0
 8005d9c:	6818      	ldr	r0, [r3, #0]
 8005d9e:	f000 b823 	b.w	8005de8 <_malloc_r>
 8005da2:	bf00      	nop
 8005da4:	20000064 	.word	0x20000064

08005da8 <sbrk_aligned>:
 8005da8:	b570      	push	{r4, r5, r6, lr}
 8005daa:	4e0e      	ldr	r6, [pc, #56]	; (8005de4 <sbrk_aligned+0x3c>)
 8005dac:	460c      	mov	r4, r1
 8005dae:	6831      	ldr	r1, [r6, #0]
 8005db0:	4605      	mov	r5, r0
 8005db2:	b911      	cbnz	r1, 8005dba <sbrk_aligned+0x12>
 8005db4:	f001 fe0c 	bl	80079d0 <_sbrk_r>
 8005db8:	6030      	str	r0, [r6, #0]
 8005dba:	4621      	mov	r1, r4
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	f001 fe07 	bl	80079d0 <_sbrk_r>
 8005dc2:	1c43      	adds	r3, r0, #1
 8005dc4:	d00a      	beq.n	8005ddc <sbrk_aligned+0x34>
 8005dc6:	1cc4      	adds	r4, r0, #3
 8005dc8:	f024 0403 	bic.w	r4, r4, #3
 8005dcc:	42a0      	cmp	r0, r4
 8005dce:	d007      	beq.n	8005de0 <sbrk_aligned+0x38>
 8005dd0:	1a21      	subs	r1, r4, r0
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	f001 fdfc 	bl	80079d0 <_sbrk_r>
 8005dd8:	3001      	adds	r0, #1
 8005dda:	d101      	bne.n	8005de0 <sbrk_aligned+0x38>
 8005ddc:	f04f 34ff 	mov.w	r4, #4294967295
 8005de0:	4620      	mov	r0, r4
 8005de2:	bd70      	pop	{r4, r5, r6, pc}
 8005de4:	20000420 	.word	0x20000420

08005de8 <_malloc_r>:
 8005de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dec:	1ccd      	adds	r5, r1, #3
 8005dee:	f025 0503 	bic.w	r5, r5, #3
 8005df2:	3508      	adds	r5, #8
 8005df4:	2d0c      	cmp	r5, #12
 8005df6:	bf38      	it	cc
 8005df8:	250c      	movcc	r5, #12
 8005dfa:	2d00      	cmp	r5, #0
 8005dfc:	4607      	mov	r7, r0
 8005dfe:	db01      	blt.n	8005e04 <_malloc_r+0x1c>
 8005e00:	42a9      	cmp	r1, r5
 8005e02:	d905      	bls.n	8005e10 <_malloc_r+0x28>
 8005e04:	230c      	movs	r3, #12
 8005e06:	2600      	movs	r6, #0
 8005e08:	603b      	str	r3, [r7, #0]
 8005e0a:	4630      	mov	r0, r6
 8005e0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e10:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005ee4 <_malloc_r+0xfc>
 8005e14:	f000 f868 	bl	8005ee8 <__malloc_lock>
 8005e18:	f8d8 3000 	ldr.w	r3, [r8]
 8005e1c:	461c      	mov	r4, r3
 8005e1e:	bb5c      	cbnz	r4, 8005e78 <_malloc_r+0x90>
 8005e20:	4629      	mov	r1, r5
 8005e22:	4638      	mov	r0, r7
 8005e24:	f7ff ffc0 	bl	8005da8 <sbrk_aligned>
 8005e28:	1c43      	adds	r3, r0, #1
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	d155      	bne.n	8005eda <_malloc_r+0xf2>
 8005e2e:	f8d8 4000 	ldr.w	r4, [r8]
 8005e32:	4626      	mov	r6, r4
 8005e34:	2e00      	cmp	r6, #0
 8005e36:	d145      	bne.n	8005ec4 <_malloc_r+0xdc>
 8005e38:	2c00      	cmp	r4, #0
 8005e3a:	d048      	beq.n	8005ece <_malloc_r+0xe6>
 8005e3c:	6823      	ldr	r3, [r4, #0]
 8005e3e:	4631      	mov	r1, r6
 8005e40:	4638      	mov	r0, r7
 8005e42:	eb04 0903 	add.w	r9, r4, r3
 8005e46:	f001 fdc3 	bl	80079d0 <_sbrk_r>
 8005e4a:	4581      	cmp	r9, r0
 8005e4c:	d13f      	bne.n	8005ece <_malloc_r+0xe6>
 8005e4e:	6821      	ldr	r1, [r4, #0]
 8005e50:	4638      	mov	r0, r7
 8005e52:	1a6d      	subs	r5, r5, r1
 8005e54:	4629      	mov	r1, r5
 8005e56:	f7ff ffa7 	bl	8005da8 <sbrk_aligned>
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	d037      	beq.n	8005ece <_malloc_r+0xe6>
 8005e5e:	6823      	ldr	r3, [r4, #0]
 8005e60:	442b      	add	r3, r5
 8005e62:	6023      	str	r3, [r4, #0]
 8005e64:	f8d8 3000 	ldr.w	r3, [r8]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d038      	beq.n	8005ede <_malloc_r+0xf6>
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	42a2      	cmp	r2, r4
 8005e70:	d12b      	bne.n	8005eca <_malloc_r+0xe2>
 8005e72:	2200      	movs	r2, #0
 8005e74:	605a      	str	r2, [r3, #4]
 8005e76:	e00f      	b.n	8005e98 <_malloc_r+0xb0>
 8005e78:	6822      	ldr	r2, [r4, #0]
 8005e7a:	1b52      	subs	r2, r2, r5
 8005e7c:	d41f      	bmi.n	8005ebe <_malloc_r+0xd6>
 8005e7e:	2a0b      	cmp	r2, #11
 8005e80:	d917      	bls.n	8005eb2 <_malloc_r+0xca>
 8005e82:	1961      	adds	r1, r4, r5
 8005e84:	42a3      	cmp	r3, r4
 8005e86:	6025      	str	r5, [r4, #0]
 8005e88:	bf18      	it	ne
 8005e8a:	6059      	strne	r1, [r3, #4]
 8005e8c:	6863      	ldr	r3, [r4, #4]
 8005e8e:	bf08      	it	eq
 8005e90:	f8c8 1000 	streq.w	r1, [r8]
 8005e94:	5162      	str	r2, [r4, r5]
 8005e96:	604b      	str	r3, [r1, #4]
 8005e98:	4638      	mov	r0, r7
 8005e9a:	f104 060b 	add.w	r6, r4, #11
 8005e9e:	f000 f829 	bl	8005ef4 <__malloc_unlock>
 8005ea2:	f026 0607 	bic.w	r6, r6, #7
 8005ea6:	1d23      	adds	r3, r4, #4
 8005ea8:	1af2      	subs	r2, r6, r3
 8005eaa:	d0ae      	beq.n	8005e0a <_malloc_r+0x22>
 8005eac:	1b9b      	subs	r3, r3, r6
 8005eae:	50a3      	str	r3, [r4, r2]
 8005eb0:	e7ab      	b.n	8005e0a <_malloc_r+0x22>
 8005eb2:	42a3      	cmp	r3, r4
 8005eb4:	6862      	ldr	r2, [r4, #4]
 8005eb6:	d1dd      	bne.n	8005e74 <_malloc_r+0x8c>
 8005eb8:	f8c8 2000 	str.w	r2, [r8]
 8005ebc:	e7ec      	b.n	8005e98 <_malloc_r+0xb0>
 8005ebe:	4623      	mov	r3, r4
 8005ec0:	6864      	ldr	r4, [r4, #4]
 8005ec2:	e7ac      	b.n	8005e1e <_malloc_r+0x36>
 8005ec4:	4634      	mov	r4, r6
 8005ec6:	6876      	ldr	r6, [r6, #4]
 8005ec8:	e7b4      	b.n	8005e34 <_malloc_r+0x4c>
 8005eca:	4613      	mov	r3, r2
 8005ecc:	e7cc      	b.n	8005e68 <_malloc_r+0x80>
 8005ece:	230c      	movs	r3, #12
 8005ed0:	4638      	mov	r0, r7
 8005ed2:	603b      	str	r3, [r7, #0]
 8005ed4:	f000 f80e 	bl	8005ef4 <__malloc_unlock>
 8005ed8:	e797      	b.n	8005e0a <_malloc_r+0x22>
 8005eda:	6025      	str	r5, [r4, #0]
 8005edc:	e7dc      	b.n	8005e98 <_malloc_r+0xb0>
 8005ede:	605b      	str	r3, [r3, #4]
 8005ee0:	deff      	udf	#255	; 0xff
 8005ee2:	bf00      	nop
 8005ee4:	2000041c 	.word	0x2000041c

08005ee8 <__malloc_lock>:
 8005ee8:	4801      	ldr	r0, [pc, #4]	; (8005ef0 <__malloc_lock+0x8>)
 8005eea:	f7ff b88b 	b.w	8005004 <__retarget_lock_acquire_recursive>
 8005eee:	bf00      	nop
 8005ef0:	20000418 	.word	0x20000418

08005ef4 <__malloc_unlock>:
 8005ef4:	4801      	ldr	r0, [pc, #4]	; (8005efc <__malloc_unlock+0x8>)
 8005ef6:	f7ff b886 	b.w	8005006 <__retarget_lock_release_recursive>
 8005efa:	bf00      	nop
 8005efc:	20000418 	.word	0x20000418

08005f00 <_Balloc>:
 8005f00:	b570      	push	{r4, r5, r6, lr}
 8005f02:	69c6      	ldr	r6, [r0, #28]
 8005f04:	4604      	mov	r4, r0
 8005f06:	460d      	mov	r5, r1
 8005f08:	b976      	cbnz	r6, 8005f28 <_Balloc+0x28>
 8005f0a:	2010      	movs	r0, #16
 8005f0c:	f7ff ff44 	bl	8005d98 <malloc>
 8005f10:	4602      	mov	r2, r0
 8005f12:	61e0      	str	r0, [r4, #28]
 8005f14:	b920      	cbnz	r0, 8005f20 <_Balloc+0x20>
 8005f16:	216b      	movs	r1, #107	; 0x6b
 8005f18:	4b17      	ldr	r3, [pc, #92]	; (8005f78 <_Balloc+0x78>)
 8005f1a:	4818      	ldr	r0, [pc, #96]	; (8005f7c <_Balloc+0x7c>)
 8005f1c:	f001 fd7c 	bl	8007a18 <__assert_func>
 8005f20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f24:	6006      	str	r6, [r0, #0]
 8005f26:	60c6      	str	r6, [r0, #12]
 8005f28:	69e6      	ldr	r6, [r4, #28]
 8005f2a:	68f3      	ldr	r3, [r6, #12]
 8005f2c:	b183      	cbz	r3, 8005f50 <_Balloc+0x50>
 8005f2e:	69e3      	ldr	r3, [r4, #28]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005f36:	b9b8      	cbnz	r0, 8005f68 <_Balloc+0x68>
 8005f38:	2101      	movs	r1, #1
 8005f3a:	fa01 f605 	lsl.w	r6, r1, r5
 8005f3e:	1d72      	adds	r2, r6, #5
 8005f40:	4620      	mov	r0, r4
 8005f42:	0092      	lsls	r2, r2, #2
 8005f44:	f001 fd86 	bl	8007a54 <_calloc_r>
 8005f48:	b160      	cbz	r0, 8005f64 <_Balloc+0x64>
 8005f4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005f4e:	e00e      	b.n	8005f6e <_Balloc+0x6e>
 8005f50:	2221      	movs	r2, #33	; 0x21
 8005f52:	2104      	movs	r1, #4
 8005f54:	4620      	mov	r0, r4
 8005f56:	f001 fd7d 	bl	8007a54 <_calloc_r>
 8005f5a:	69e3      	ldr	r3, [r4, #28]
 8005f5c:	60f0      	str	r0, [r6, #12]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1e4      	bne.n	8005f2e <_Balloc+0x2e>
 8005f64:	2000      	movs	r0, #0
 8005f66:	bd70      	pop	{r4, r5, r6, pc}
 8005f68:	6802      	ldr	r2, [r0, #0]
 8005f6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005f6e:	2300      	movs	r3, #0
 8005f70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f74:	e7f7      	b.n	8005f66 <_Balloc+0x66>
 8005f76:	bf00      	nop
 8005f78:	08009a00 	.word	0x08009a00
 8005f7c:	08009a80 	.word	0x08009a80

08005f80 <_Bfree>:
 8005f80:	b570      	push	{r4, r5, r6, lr}
 8005f82:	69c6      	ldr	r6, [r0, #28]
 8005f84:	4605      	mov	r5, r0
 8005f86:	460c      	mov	r4, r1
 8005f88:	b976      	cbnz	r6, 8005fa8 <_Bfree+0x28>
 8005f8a:	2010      	movs	r0, #16
 8005f8c:	f7ff ff04 	bl	8005d98 <malloc>
 8005f90:	4602      	mov	r2, r0
 8005f92:	61e8      	str	r0, [r5, #28]
 8005f94:	b920      	cbnz	r0, 8005fa0 <_Bfree+0x20>
 8005f96:	218f      	movs	r1, #143	; 0x8f
 8005f98:	4b08      	ldr	r3, [pc, #32]	; (8005fbc <_Bfree+0x3c>)
 8005f9a:	4809      	ldr	r0, [pc, #36]	; (8005fc0 <_Bfree+0x40>)
 8005f9c:	f001 fd3c 	bl	8007a18 <__assert_func>
 8005fa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005fa4:	6006      	str	r6, [r0, #0]
 8005fa6:	60c6      	str	r6, [r0, #12]
 8005fa8:	b13c      	cbz	r4, 8005fba <_Bfree+0x3a>
 8005faa:	69eb      	ldr	r3, [r5, #28]
 8005fac:	6862      	ldr	r2, [r4, #4]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005fb4:	6021      	str	r1, [r4, #0]
 8005fb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005fba:	bd70      	pop	{r4, r5, r6, pc}
 8005fbc:	08009a00 	.word	0x08009a00
 8005fc0:	08009a80 	.word	0x08009a80

08005fc4 <__multadd>:
 8005fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fc8:	4607      	mov	r7, r0
 8005fca:	460c      	mov	r4, r1
 8005fcc:	461e      	mov	r6, r3
 8005fce:	2000      	movs	r0, #0
 8005fd0:	690d      	ldr	r5, [r1, #16]
 8005fd2:	f101 0c14 	add.w	ip, r1, #20
 8005fd6:	f8dc 3000 	ldr.w	r3, [ip]
 8005fda:	3001      	adds	r0, #1
 8005fdc:	b299      	uxth	r1, r3
 8005fde:	fb02 6101 	mla	r1, r2, r1, r6
 8005fe2:	0c1e      	lsrs	r6, r3, #16
 8005fe4:	0c0b      	lsrs	r3, r1, #16
 8005fe6:	fb02 3306 	mla	r3, r2, r6, r3
 8005fea:	b289      	uxth	r1, r1
 8005fec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005ff0:	4285      	cmp	r5, r0
 8005ff2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005ff6:	f84c 1b04 	str.w	r1, [ip], #4
 8005ffa:	dcec      	bgt.n	8005fd6 <__multadd+0x12>
 8005ffc:	b30e      	cbz	r6, 8006042 <__multadd+0x7e>
 8005ffe:	68a3      	ldr	r3, [r4, #8]
 8006000:	42ab      	cmp	r3, r5
 8006002:	dc19      	bgt.n	8006038 <__multadd+0x74>
 8006004:	6861      	ldr	r1, [r4, #4]
 8006006:	4638      	mov	r0, r7
 8006008:	3101      	adds	r1, #1
 800600a:	f7ff ff79 	bl	8005f00 <_Balloc>
 800600e:	4680      	mov	r8, r0
 8006010:	b928      	cbnz	r0, 800601e <__multadd+0x5a>
 8006012:	4602      	mov	r2, r0
 8006014:	21ba      	movs	r1, #186	; 0xba
 8006016:	4b0c      	ldr	r3, [pc, #48]	; (8006048 <__multadd+0x84>)
 8006018:	480c      	ldr	r0, [pc, #48]	; (800604c <__multadd+0x88>)
 800601a:	f001 fcfd 	bl	8007a18 <__assert_func>
 800601e:	6922      	ldr	r2, [r4, #16]
 8006020:	f104 010c 	add.w	r1, r4, #12
 8006024:	3202      	adds	r2, #2
 8006026:	0092      	lsls	r2, r2, #2
 8006028:	300c      	adds	r0, #12
 800602a:	f001 fce1 	bl	80079f0 <memcpy>
 800602e:	4621      	mov	r1, r4
 8006030:	4638      	mov	r0, r7
 8006032:	f7ff ffa5 	bl	8005f80 <_Bfree>
 8006036:	4644      	mov	r4, r8
 8006038:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800603c:	3501      	adds	r5, #1
 800603e:	615e      	str	r6, [r3, #20]
 8006040:	6125      	str	r5, [r4, #16]
 8006042:	4620      	mov	r0, r4
 8006044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006048:	08009a6f 	.word	0x08009a6f
 800604c:	08009a80 	.word	0x08009a80

08006050 <__s2b>:
 8006050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006054:	4615      	mov	r5, r2
 8006056:	2209      	movs	r2, #9
 8006058:	461f      	mov	r7, r3
 800605a:	3308      	adds	r3, #8
 800605c:	460c      	mov	r4, r1
 800605e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006062:	4606      	mov	r6, r0
 8006064:	2201      	movs	r2, #1
 8006066:	2100      	movs	r1, #0
 8006068:	429a      	cmp	r2, r3
 800606a:	db09      	blt.n	8006080 <__s2b+0x30>
 800606c:	4630      	mov	r0, r6
 800606e:	f7ff ff47 	bl	8005f00 <_Balloc>
 8006072:	b940      	cbnz	r0, 8006086 <__s2b+0x36>
 8006074:	4602      	mov	r2, r0
 8006076:	21d3      	movs	r1, #211	; 0xd3
 8006078:	4b18      	ldr	r3, [pc, #96]	; (80060dc <__s2b+0x8c>)
 800607a:	4819      	ldr	r0, [pc, #100]	; (80060e0 <__s2b+0x90>)
 800607c:	f001 fccc 	bl	8007a18 <__assert_func>
 8006080:	0052      	lsls	r2, r2, #1
 8006082:	3101      	adds	r1, #1
 8006084:	e7f0      	b.n	8006068 <__s2b+0x18>
 8006086:	9b08      	ldr	r3, [sp, #32]
 8006088:	2d09      	cmp	r5, #9
 800608a:	6143      	str	r3, [r0, #20]
 800608c:	f04f 0301 	mov.w	r3, #1
 8006090:	6103      	str	r3, [r0, #16]
 8006092:	dd16      	ble.n	80060c2 <__s2b+0x72>
 8006094:	f104 0909 	add.w	r9, r4, #9
 8006098:	46c8      	mov	r8, r9
 800609a:	442c      	add	r4, r5
 800609c:	f818 3b01 	ldrb.w	r3, [r8], #1
 80060a0:	4601      	mov	r1, r0
 80060a2:	220a      	movs	r2, #10
 80060a4:	4630      	mov	r0, r6
 80060a6:	3b30      	subs	r3, #48	; 0x30
 80060a8:	f7ff ff8c 	bl	8005fc4 <__multadd>
 80060ac:	45a0      	cmp	r8, r4
 80060ae:	d1f5      	bne.n	800609c <__s2b+0x4c>
 80060b0:	f1a5 0408 	sub.w	r4, r5, #8
 80060b4:	444c      	add	r4, r9
 80060b6:	1b2d      	subs	r5, r5, r4
 80060b8:	1963      	adds	r3, r4, r5
 80060ba:	42bb      	cmp	r3, r7
 80060bc:	db04      	blt.n	80060c8 <__s2b+0x78>
 80060be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060c2:	2509      	movs	r5, #9
 80060c4:	340a      	adds	r4, #10
 80060c6:	e7f6      	b.n	80060b6 <__s2b+0x66>
 80060c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80060cc:	4601      	mov	r1, r0
 80060ce:	220a      	movs	r2, #10
 80060d0:	4630      	mov	r0, r6
 80060d2:	3b30      	subs	r3, #48	; 0x30
 80060d4:	f7ff ff76 	bl	8005fc4 <__multadd>
 80060d8:	e7ee      	b.n	80060b8 <__s2b+0x68>
 80060da:	bf00      	nop
 80060dc:	08009a6f 	.word	0x08009a6f
 80060e0:	08009a80 	.word	0x08009a80

080060e4 <__hi0bits>:
 80060e4:	0c02      	lsrs	r2, r0, #16
 80060e6:	0412      	lsls	r2, r2, #16
 80060e8:	4603      	mov	r3, r0
 80060ea:	b9ca      	cbnz	r2, 8006120 <__hi0bits+0x3c>
 80060ec:	0403      	lsls	r3, r0, #16
 80060ee:	2010      	movs	r0, #16
 80060f0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80060f4:	bf04      	itt	eq
 80060f6:	021b      	lsleq	r3, r3, #8
 80060f8:	3008      	addeq	r0, #8
 80060fa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80060fe:	bf04      	itt	eq
 8006100:	011b      	lsleq	r3, r3, #4
 8006102:	3004      	addeq	r0, #4
 8006104:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006108:	bf04      	itt	eq
 800610a:	009b      	lsleq	r3, r3, #2
 800610c:	3002      	addeq	r0, #2
 800610e:	2b00      	cmp	r3, #0
 8006110:	db05      	blt.n	800611e <__hi0bits+0x3a>
 8006112:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006116:	f100 0001 	add.w	r0, r0, #1
 800611a:	bf08      	it	eq
 800611c:	2020      	moveq	r0, #32
 800611e:	4770      	bx	lr
 8006120:	2000      	movs	r0, #0
 8006122:	e7e5      	b.n	80060f0 <__hi0bits+0xc>

08006124 <__lo0bits>:
 8006124:	6803      	ldr	r3, [r0, #0]
 8006126:	4602      	mov	r2, r0
 8006128:	f013 0007 	ands.w	r0, r3, #7
 800612c:	d00b      	beq.n	8006146 <__lo0bits+0x22>
 800612e:	07d9      	lsls	r1, r3, #31
 8006130:	d421      	bmi.n	8006176 <__lo0bits+0x52>
 8006132:	0798      	lsls	r0, r3, #30
 8006134:	bf49      	itett	mi
 8006136:	085b      	lsrmi	r3, r3, #1
 8006138:	089b      	lsrpl	r3, r3, #2
 800613a:	2001      	movmi	r0, #1
 800613c:	6013      	strmi	r3, [r2, #0]
 800613e:	bf5c      	itt	pl
 8006140:	2002      	movpl	r0, #2
 8006142:	6013      	strpl	r3, [r2, #0]
 8006144:	4770      	bx	lr
 8006146:	b299      	uxth	r1, r3
 8006148:	b909      	cbnz	r1, 800614e <__lo0bits+0x2a>
 800614a:	2010      	movs	r0, #16
 800614c:	0c1b      	lsrs	r3, r3, #16
 800614e:	b2d9      	uxtb	r1, r3
 8006150:	b909      	cbnz	r1, 8006156 <__lo0bits+0x32>
 8006152:	3008      	adds	r0, #8
 8006154:	0a1b      	lsrs	r3, r3, #8
 8006156:	0719      	lsls	r1, r3, #28
 8006158:	bf04      	itt	eq
 800615a:	091b      	lsreq	r3, r3, #4
 800615c:	3004      	addeq	r0, #4
 800615e:	0799      	lsls	r1, r3, #30
 8006160:	bf04      	itt	eq
 8006162:	089b      	lsreq	r3, r3, #2
 8006164:	3002      	addeq	r0, #2
 8006166:	07d9      	lsls	r1, r3, #31
 8006168:	d403      	bmi.n	8006172 <__lo0bits+0x4e>
 800616a:	085b      	lsrs	r3, r3, #1
 800616c:	f100 0001 	add.w	r0, r0, #1
 8006170:	d003      	beq.n	800617a <__lo0bits+0x56>
 8006172:	6013      	str	r3, [r2, #0]
 8006174:	4770      	bx	lr
 8006176:	2000      	movs	r0, #0
 8006178:	4770      	bx	lr
 800617a:	2020      	movs	r0, #32
 800617c:	4770      	bx	lr
	...

08006180 <__i2b>:
 8006180:	b510      	push	{r4, lr}
 8006182:	460c      	mov	r4, r1
 8006184:	2101      	movs	r1, #1
 8006186:	f7ff febb 	bl	8005f00 <_Balloc>
 800618a:	4602      	mov	r2, r0
 800618c:	b928      	cbnz	r0, 800619a <__i2b+0x1a>
 800618e:	f240 1145 	movw	r1, #325	; 0x145
 8006192:	4b04      	ldr	r3, [pc, #16]	; (80061a4 <__i2b+0x24>)
 8006194:	4804      	ldr	r0, [pc, #16]	; (80061a8 <__i2b+0x28>)
 8006196:	f001 fc3f 	bl	8007a18 <__assert_func>
 800619a:	2301      	movs	r3, #1
 800619c:	6144      	str	r4, [r0, #20]
 800619e:	6103      	str	r3, [r0, #16]
 80061a0:	bd10      	pop	{r4, pc}
 80061a2:	bf00      	nop
 80061a4:	08009a6f 	.word	0x08009a6f
 80061a8:	08009a80 	.word	0x08009a80

080061ac <__multiply>:
 80061ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b0:	4691      	mov	r9, r2
 80061b2:	690a      	ldr	r2, [r1, #16]
 80061b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80061b8:	460c      	mov	r4, r1
 80061ba:	429a      	cmp	r2, r3
 80061bc:	bfbe      	ittt	lt
 80061be:	460b      	movlt	r3, r1
 80061c0:	464c      	movlt	r4, r9
 80061c2:	4699      	movlt	r9, r3
 80061c4:	6927      	ldr	r7, [r4, #16]
 80061c6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80061ca:	68a3      	ldr	r3, [r4, #8]
 80061cc:	6861      	ldr	r1, [r4, #4]
 80061ce:	eb07 060a 	add.w	r6, r7, sl
 80061d2:	42b3      	cmp	r3, r6
 80061d4:	b085      	sub	sp, #20
 80061d6:	bfb8      	it	lt
 80061d8:	3101      	addlt	r1, #1
 80061da:	f7ff fe91 	bl	8005f00 <_Balloc>
 80061de:	b930      	cbnz	r0, 80061ee <__multiply+0x42>
 80061e0:	4602      	mov	r2, r0
 80061e2:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80061e6:	4b43      	ldr	r3, [pc, #268]	; (80062f4 <__multiply+0x148>)
 80061e8:	4843      	ldr	r0, [pc, #268]	; (80062f8 <__multiply+0x14c>)
 80061ea:	f001 fc15 	bl	8007a18 <__assert_func>
 80061ee:	f100 0514 	add.w	r5, r0, #20
 80061f2:	462b      	mov	r3, r5
 80061f4:	2200      	movs	r2, #0
 80061f6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80061fa:	4543      	cmp	r3, r8
 80061fc:	d321      	bcc.n	8006242 <__multiply+0x96>
 80061fe:	f104 0314 	add.w	r3, r4, #20
 8006202:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006206:	f109 0314 	add.w	r3, r9, #20
 800620a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800620e:	9202      	str	r2, [sp, #8]
 8006210:	1b3a      	subs	r2, r7, r4
 8006212:	3a15      	subs	r2, #21
 8006214:	f022 0203 	bic.w	r2, r2, #3
 8006218:	3204      	adds	r2, #4
 800621a:	f104 0115 	add.w	r1, r4, #21
 800621e:	428f      	cmp	r7, r1
 8006220:	bf38      	it	cc
 8006222:	2204      	movcc	r2, #4
 8006224:	9201      	str	r2, [sp, #4]
 8006226:	9a02      	ldr	r2, [sp, #8]
 8006228:	9303      	str	r3, [sp, #12]
 800622a:	429a      	cmp	r2, r3
 800622c:	d80c      	bhi.n	8006248 <__multiply+0x9c>
 800622e:	2e00      	cmp	r6, #0
 8006230:	dd03      	ble.n	800623a <__multiply+0x8e>
 8006232:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006236:	2b00      	cmp	r3, #0
 8006238:	d05a      	beq.n	80062f0 <__multiply+0x144>
 800623a:	6106      	str	r6, [r0, #16]
 800623c:	b005      	add	sp, #20
 800623e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006242:	f843 2b04 	str.w	r2, [r3], #4
 8006246:	e7d8      	b.n	80061fa <__multiply+0x4e>
 8006248:	f8b3 a000 	ldrh.w	sl, [r3]
 800624c:	f1ba 0f00 	cmp.w	sl, #0
 8006250:	d023      	beq.n	800629a <__multiply+0xee>
 8006252:	46a9      	mov	r9, r5
 8006254:	f04f 0c00 	mov.w	ip, #0
 8006258:	f104 0e14 	add.w	lr, r4, #20
 800625c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006260:	f8d9 1000 	ldr.w	r1, [r9]
 8006264:	fa1f fb82 	uxth.w	fp, r2
 8006268:	b289      	uxth	r1, r1
 800626a:	fb0a 110b 	mla	r1, sl, fp, r1
 800626e:	4461      	add	r1, ip
 8006270:	f8d9 c000 	ldr.w	ip, [r9]
 8006274:	0c12      	lsrs	r2, r2, #16
 8006276:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800627a:	fb0a c202 	mla	r2, sl, r2, ip
 800627e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006282:	b289      	uxth	r1, r1
 8006284:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006288:	4577      	cmp	r7, lr
 800628a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800628e:	f849 1b04 	str.w	r1, [r9], #4
 8006292:	d8e3      	bhi.n	800625c <__multiply+0xb0>
 8006294:	9a01      	ldr	r2, [sp, #4]
 8006296:	f845 c002 	str.w	ip, [r5, r2]
 800629a:	9a03      	ldr	r2, [sp, #12]
 800629c:	3304      	adds	r3, #4
 800629e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80062a2:	f1b9 0f00 	cmp.w	r9, #0
 80062a6:	d021      	beq.n	80062ec <__multiply+0x140>
 80062a8:	46ae      	mov	lr, r5
 80062aa:	f04f 0a00 	mov.w	sl, #0
 80062ae:	6829      	ldr	r1, [r5, #0]
 80062b0:	f104 0c14 	add.w	ip, r4, #20
 80062b4:	f8bc b000 	ldrh.w	fp, [ip]
 80062b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80062bc:	b289      	uxth	r1, r1
 80062be:	fb09 220b 	mla	r2, r9, fp, r2
 80062c2:	4452      	add	r2, sl
 80062c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80062c8:	f84e 1b04 	str.w	r1, [lr], #4
 80062cc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80062d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80062d4:	f8be 1000 	ldrh.w	r1, [lr]
 80062d8:	4567      	cmp	r7, ip
 80062da:	fb09 110a 	mla	r1, r9, sl, r1
 80062de:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80062e2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80062e6:	d8e5      	bhi.n	80062b4 <__multiply+0x108>
 80062e8:	9a01      	ldr	r2, [sp, #4]
 80062ea:	50a9      	str	r1, [r5, r2]
 80062ec:	3504      	adds	r5, #4
 80062ee:	e79a      	b.n	8006226 <__multiply+0x7a>
 80062f0:	3e01      	subs	r6, #1
 80062f2:	e79c      	b.n	800622e <__multiply+0x82>
 80062f4:	08009a6f 	.word	0x08009a6f
 80062f8:	08009a80 	.word	0x08009a80

080062fc <__pow5mult>:
 80062fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006300:	4615      	mov	r5, r2
 8006302:	f012 0203 	ands.w	r2, r2, #3
 8006306:	4606      	mov	r6, r0
 8006308:	460f      	mov	r7, r1
 800630a:	d007      	beq.n	800631c <__pow5mult+0x20>
 800630c:	4c25      	ldr	r4, [pc, #148]	; (80063a4 <__pow5mult+0xa8>)
 800630e:	3a01      	subs	r2, #1
 8006310:	2300      	movs	r3, #0
 8006312:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006316:	f7ff fe55 	bl	8005fc4 <__multadd>
 800631a:	4607      	mov	r7, r0
 800631c:	10ad      	asrs	r5, r5, #2
 800631e:	d03d      	beq.n	800639c <__pow5mult+0xa0>
 8006320:	69f4      	ldr	r4, [r6, #28]
 8006322:	b97c      	cbnz	r4, 8006344 <__pow5mult+0x48>
 8006324:	2010      	movs	r0, #16
 8006326:	f7ff fd37 	bl	8005d98 <malloc>
 800632a:	4602      	mov	r2, r0
 800632c:	61f0      	str	r0, [r6, #28]
 800632e:	b928      	cbnz	r0, 800633c <__pow5mult+0x40>
 8006330:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006334:	4b1c      	ldr	r3, [pc, #112]	; (80063a8 <__pow5mult+0xac>)
 8006336:	481d      	ldr	r0, [pc, #116]	; (80063ac <__pow5mult+0xb0>)
 8006338:	f001 fb6e 	bl	8007a18 <__assert_func>
 800633c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006340:	6004      	str	r4, [r0, #0]
 8006342:	60c4      	str	r4, [r0, #12]
 8006344:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006348:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800634c:	b94c      	cbnz	r4, 8006362 <__pow5mult+0x66>
 800634e:	f240 2171 	movw	r1, #625	; 0x271
 8006352:	4630      	mov	r0, r6
 8006354:	f7ff ff14 	bl	8006180 <__i2b>
 8006358:	2300      	movs	r3, #0
 800635a:	4604      	mov	r4, r0
 800635c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006360:	6003      	str	r3, [r0, #0]
 8006362:	f04f 0900 	mov.w	r9, #0
 8006366:	07eb      	lsls	r3, r5, #31
 8006368:	d50a      	bpl.n	8006380 <__pow5mult+0x84>
 800636a:	4639      	mov	r1, r7
 800636c:	4622      	mov	r2, r4
 800636e:	4630      	mov	r0, r6
 8006370:	f7ff ff1c 	bl	80061ac <__multiply>
 8006374:	4680      	mov	r8, r0
 8006376:	4639      	mov	r1, r7
 8006378:	4630      	mov	r0, r6
 800637a:	f7ff fe01 	bl	8005f80 <_Bfree>
 800637e:	4647      	mov	r7, r8
 8006380:	106d      	asrs	r5, r5, #1
 8006382:	d00b      	beq.n	800639c <__pow5mult+0xa0>
 8006384:	6820      	ldr	r0, [r4, #0]
 8006386:	b938      	cbnz	r0, 8006398 <__pow5mult+0x9c>
 8006388:	4622      	mov	r2, r4
 800638a:	4621      	mov	r1, r4
 800638c:	4630      	mov	r0, r6
 800638e:	f7ff ff0d 	bl	80061ac <__multiply>
 8006392:	6020      	str	r0, [r4, #0]
 8006394:	f8c0 9000 	str.w	r9, [r0]
 8006398:	4604      	mov	r4, r0
 800639a:	e7e4      	b.n	8006366 <__pow5mult+0x6a>
 800639c:	4638      	mov	r0, r7
 800639e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063a2:	bf00      	nop
 80063a4:	08009bd0 	.word	0x08009bd0
 80063a8:	08009a00 	.word	0x08009a00
 80063ac:	08009a80 	.word	0x08009a80

080063b0 <__lshift>:
 80063b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063b4:	460c      	mov	r4, r1
 80063b6:	4607      	mov	r7, r0
 80063b8:	4691      	mov	r9, r2
 80063ba:	6923      	ldr	r3, [r4, #16]
 80063bc:	6849      	ldr	r1, [r1, #4]
 80063be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80063c2:	68a3      	ldr	r3, [r4, #8]
 80063c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80063c8:	f108 0601 	add.w	r6, r8, #1
 80063cc:	42b3      	cmp	r3, r6
 80063ce:	db0b      	blt.n	80063e8 <__lshift+0x38>
 80063d0:	4638      	mov	r0, r7
 80063d2:	f7ff fd95 	bl	8005f00 <_Balloc>
 80063d6:	4605      	mov	r5, r0
 80063d8:	b948      	cbnz	r0, 80063ee <__lshift+0x3e>
 80063da:	4602      	mov	r2, r0
 80063dc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80063e0:	4b27      	ldr	r3, [pc, #156]	; (8006480 <__lshift+0xd0>)
 80063e2:	4828      	ldr	r0, [pc, #160]	; (8006484 <__lshift+0xd4>)
 80063e4:	f001 fb18 	bl	8007a18 <__assert_func>
 80063e8:	3101      	adds	r1, #1
 80063ea:	005b      	lsls	r3, r3, #1
 80063ec:	e7ee      	b.n	80063cc <__lshift+0x1c>
 80063ee:	2300      	movs	r3, #0
 80063f0:	f100 0114 	add.w	r1, r0, #20
 80063f4:	f100 0210 	add.w	r2, r0, #16
 80063f8:	4618      	mov	r0, r3
 80063fa:	4553      	cmp	r3, sl
 80063fc:	db33      	blt.n	8006466 <__lshift+0xb6>
 80063fe:	6920      	ldr	r0, [r4, #16]
 8006400:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006404:	f104 0314 	add.w	r3, r4, #20
 8006408:	f019 091f 	ands.w	r9, r9, #31
 800640c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006410:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006414:	d02b      	beq.n	800646e <__lshift+0xbe>
 8006416:	468a      	mov	sl, r1
 8006418:	2200      	movs	r2, #0
 800641a:	f1c9 0e20 	rsb	lr, r9, #32
 800641e:	6818      	ldr	r0, [r3, #0]
 8006420:	fa00 f009 	lsl.w	r0, r0, r9
 8006424:	4310      	orrs	r0, r2
 8006426:	f84a 0b04 	str.w	r0, [sl], #4
 800642a:	f853 2b04 	ldr.w	r2, [r3], #4
 800642e:	459c      	cmp	ip, r3
 8006430:	fa22 f20e 	lsr.w	r2, r2, lr
 8006434:	d8f3      	bhi.n	800641e <__lshift+0x6e>
 8006436:	ebac 0304 	sub.w	r3, ip, r4
 800643a:	3b15      	subs	r3, #21
 800643c:	f023 0303 	bic.w	r3, r3, #3
 8006440:	3304      	adds	r3, #4
 8006442:	f104 0015 	add.w	r0, r4, #21
 8006446:	4584      	cmp	ip, r0
 8006448:	bf38      	it	cc
 800644a:	2304      	movcc	r3, #4
 800644c:	50ca      	str	r2, [r1, r3]
 800644e:	b10a      	cbz	r2, 8006454 <__lshift+0xa4>
 8006450:	f108 0602 	add.w	r6, r8, #2
 8006454:	3e01      	subs	r6, #1
 8006456:	4638      	mov	r0, r7
 8006458:	4621      	mov	r1, r4
 800645a:	612e      	str	r6, [r5, #16]
 800645c:	f7ff fd90 	bl	8005f80 <_Bfree>
 8006460:	4628      	mov	r0, r5
 8006462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006466:	f842 0f04 	str.w	r0, [r2, #4]!
 800646a:	3301      	adds	r3, #1
 800646c:	e7c5      	b.n	80063fa <__lshift+0x4a>
 800646e:	3904      	subs	r1, #4
 8006470:	f853 2b04 	ldr.w	r2, [r3], #4
 8006474:	459c      	cmp	ip, r3
 8006476:	f841 2f04 	str.w	r2, [r1, #4]!
 800647a:	d8f9      	bhi.n	8006470 <__lshift+0xc0>
 800647c:	e7ea      	b.n	8006454 <__lshift+0xa4>
 800647e:	bf00      	nop
 8006480:	08009a6f 	.word	0x08009a6f
 8006484:	08009a80 	.word	0x08009a80

08006488 <__mcmp>:
 8006488:	4603      	mov	r3, r0
 800648a:	690a      	ldr	r2, [r1, #16]
 800648c:	6900      	ldr	r0, [r0, #16]
 800648e:	b530      	push	{r4, r5, lr}
 8006490:	1a80      	subs	r0, r0, r2
 8006492:	d10d      	bne.n	80064b0 <__mcmp+0x28>
 8006494:	3314      	adds	r3, #20
 8006496:	3114      	adds	r1, #20
 8006498:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800649c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80064a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80064a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80064a8:	4295      	cmp	r5, r2
 80064aa:	d002      	beq.n	80064b2 <__mcmp+0x2a>
 80064ac:	d304      	bcc.n	80064b8 <__mcmp+0x30>
 80064ae:	2001      	movs	r0, #1
 80064b0:	bd30      	pop	{r4, r5, pc}
 80064b2:	42a3      	cmp	r3, r4
 80064b4:	d3f4      	bcc.n	80064a0 <__mcmp+0x18>
 80064b6:	e7fb      	b.n	80064b0 <__mcmp+0x28>
 80064b8:	f04f 30ff 	mov.w	r0, #4294967295
 80064bc:	e7f8      	b.n	80064b0 <__mcmp+0x28>
	...

080064c0 <__mdiff>:
 80064c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064c4:	460d      	mov	r5, r1
 80064c6:	4607      	mov	r7, r0
 80064c8:	4611      	mov	r1, r2
 80064ca:	4628      	mov	r0, r5
 80064cc:	4614      	mov	r4, r2
 80064ce:	f7ff ffdb 	bl	8006488 <__mcmp>
 80064d2:	1e06      	subs	r6, r0, #0
 80064d4:	d111      	bne.n	80064fa <__mdiff+0x3a>
 80064d6:	4631      	mov	r1, r6
 80064d8:	4638      	mov	r0, r7
 80064da:	f7ff fd11 	bl	8005f00 <_Balloc>
 80064de:	4602      	mov	r2, r0
 80064e0:	b928      	cbnz	r0, 80064ee <__mdiff+0x2e>
 80064e2:	f240 2137 	movw	r1, #567	; 0x237
 80064e6:	4b3a      	ldr	r3, [pc, #232]	; (80065d0 <__mdiff+0x110>)
 80064e8:	483a      	ldr	r0, [pc, #232]	; (80065d4 <__mdiff+0x114>)
 80064ea:	f001 fa95 	bl	8007a18 <__assert_func>
 80064ee:	2301      	movs	r3, #1
 80064f0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80064f4:	4610      	mov	r0, r2
 80064f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064fa:	bfa4      	itt	ge
 80064fc:	4623      	movge	r3, r4
 80064fe:	462c      	movge	r4, r5
 8006500:	4638      	mov	r0, r7
 8006502:	6861      	ldr	r1, [r4, #4]
 8006504:	bfa6      	itte	ge
 8006506:	461d      	movge	r5, r3
 8006508:	2600      	movge	r6, #0
 800650a:	2601      	movlt	r6, #1
 800650c:	f7ff fcf8 	bl	8005f00 <_Balloc>
 8006510:	4602      	mov	r2, r0
 8006512:	b918      	cbnz	r0, 800651c <__mdiff+0x5c>
 8006514:	f240 2145 	movw	r1, #581	; 0x245
 8006518:	4b2d      	ldr	r3, [pc, #180]	; (80065d0 <__mdiff+0x110>)
 800651a:	e7e5      	b.n	80064e8 <__mdiff+0x28>
 800651c:	f102 0814 	add.w	r8, r2, #20
 8006520:	46c2      	mov	sl, r8
 8006522:	f04f 0c00 	mov.w	ip, #0
 8006526:	6927      	ldr	r7, [r4, #16]
 8006528:	60c6      	str	r6, [r0, #12]
 800652a:	692e      	ldr	r6, [r5, #16]
 800652c:	f104 0014 	add.w	r0, r4, #20
 8006530:	f105 0914 	add.w	r9, r5, #20
 8006534:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006538:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800653c:	3410      	adds	r4, #16
 800653e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006542:	f859 3b04 	ldr.w	r3, [r9], #4
 8006546:	fa1f f18b 	uxth.w	r1, fp
 800654a:	4461      	add	r1, ip
 800654c:	fa1f fc83 	uxth.w	ip, r3
 8006550:	0c1b      	lsrs	r3, r3, #16
 8006552:	eba1 010c 	sub.w	r1, r1, ip
 8006556:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800655a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800655e:	b289      	uxth	r1, r1
 8006560:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006564:	454e      	cmp	r6, r9
 8006566:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800656a:	f84a 1b04 	str.w	r1, [sl], #4
 800656e:	d8e6      	bhi.n	800653e <__mdiff+0x7e>
 8006570:	1b73      	subs	r3, r6, r5
 8006572:	3b15      	subs	r3, #21
 8006574:	f023 0303 	bic.w	r3, r3, #3
 8006578:	3515      	adds	r5, #21
 800657a:	3304      	adds	r3, #4
 800657c:	42ae      	cmp	r6, r5
 800657e:	bf38      	it	cc
 8006580:	2304      	movcc	r3, #4
 8006582:	4418      	add	r0, r3
 8006584:	4443      	add	r3, r8
 8006586:	461e      	mov	r6, r3
 8006588:	4605      	mov	r5, r0
 800658a:	4575      	cmp	r5, lr
 800658c:	d30e      	bcc.n	80065ac <__mdiff+0xec>
 800658e:	f10e 0103 	add.w	r1, lr, #3
 8006592:	1a09      	subs	r1, r1, r0
 8006594:	f021 0103 	bic.w	r1, r1, #3
 8006598:	3803      	subs	r0, #3
 800659a:	4586      	cmp	lr, r0
 800659c:	bf38      	it	cc
 800659e:	2100      	movcc	r1, #0
 80065a0:	440b      	add	r3, r1
 80065a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80065a6:	b189      	cbz	r1, 80065cc <__mdiff+0x10c>
 80065a8:	6117      	str	r7, [r2, #16]
 80065aa:	e7a3      	b.n	80064f4 <__mdiff+0x34>
 80065ac:	f855 8b04 	ldr.w	r8, [r5], #4
 80065b0:	fa1f f188 	uxth.w	r1, r8
 80065b4:	4461      	add	r1, ip
 80065b6:	140c      	asrs	r4, r1, #16
 80065b8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80065bc:	b289      	uxth	r1, r1
 80065be:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80065c2:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80065c6:	f846 1b04 	str.w	r1, [r6], #4
 80065ca:	e7de      	b.n	800658a <__mdiff+0xca>
 80065cc:	3f01      	subs	r7, #1
 80065ce:	e7e8      	b.n	80065a2 <__mdiff+0xe2>
 80065d0:	08009a6f 	.word	0x08009a6f
 80065d4:	08009a80 	.word	0x08009a80

080065d8 <__ulp>:
 80065d8:	4b0e      	ldr	r3, [pc, #56]	; (8006614 <__ulp+0x3c>)
 80065da:	400b      	ands	r3, r1
 80065dc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	dc08      	bgt.n	80065f6 <__ulp+0x1e>
 80065e4:	425b      	negs	r3, r3
 80065e6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80065ea:	ea4f 5223 	mov.w	r2, r3, asr #20
 80065ee:	da04      	bge.n	80065fa <__ulp+0x22>
 80065f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80065f4:	4113      	asrs	r3, r2
 80065f6:	2200      	movs	r2, #0
 80065f8:	e008      	b.n	800660c <__ulp+0x34>
 80065fa:	f1a2 0314 	sub.w	r3, r2, #20
 80065fe:	2b1e      	cmp	r3, #30
 8006600:	bfd6      	itet	le
 8006602:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006606:	2201      	movgt	r2, #1
 8006608:	40da      	lsrle	r2, r3
 800660a:	2300      	movs	r3, #0
 800660c:	4619      	mov	r1, r3
 800660e:	4610      	mov	r0, r2
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	7ff00000 	.word	0x7ff00000

08006618 <__b2d>:
 8006618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800661a:	6905      	ldr	r5, [r0, #16]
 800661c:	f100 0714 	add.w	r7, r0, #20
 8006620:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006624:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006628:	1f2e      	subs	r6, r5, #4
 800662a:	4620      	mov	r0, r4
 800662c:	f7ff fd5a 	bl	80060e4 <__hi0bits>
 8006630:	f1c0 0220 	rsb	r2, r0, #32
 8006634:	280a      	cmp	r0, #10
 8006636:	4603      	mov	r3, r0
 8006638:	f8df c068 	ldr.w	ip, [pc, #104]	; 80066a4 <__b2d+0x8c>
 800663c:	600a      	str	r2, [r1, #0]
 800663e:	dc12      	bgt.n	8006666 <__b2d+0x4e>
 8006640:	f1c0 0e0b 	rsb	lr, r0, #11
 8006644:	fa24 f20e 	lsr.w	r2, r4, lr
 8006648:	42b7      	cmp	r7, r6
 800664a:	ea42 010c 	orr.w	r1, r2, ip
 800664e:	bf2c      	ite	cs
 8006650:	2200      	movcs	r2, #0
 8006652:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006656:	3315      	adds	r3, #21
 8006658:	fa04 f303 	lsl.w	r3, r4, r3
 800665c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006660:	431a      	orrs	r2, r3
 8006662:	4610      	mov	r0, r2
 8006664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006666:	42b7      	cmp	r7, r6
 8006668:	bf2e      	itee	cs
 800666a:	2200      	movcs	r2, #0
 800666c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006670:	f1a5 0608 	subcc.w	r6, r5, #8
 8006674:	3b0b      	subs	r3, #11
 8006676:	d012      	beq.n	800669e <__b2d+0x86>
 8006678:	f1c3 0520 	rsb	r5, r3, #32
 800667c:	fa22 f105 	lsr.w	r1, r2, r5
 8006680:	409c      	lsls	r4, r3
 8006682:	430c      	orrs	r4, r1
 8006684:	42be      	cmp	r6, r7
 8006686:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800668a:	bf94      	ite	ls
 800668c:	2400      	movls	r4, #0
 800668e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006692:	409a      	lsls	r2, r3
 8006694:	40ec      	lsrs	r4, r5
 8006696:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800669a:	4322      	orrs	r2, r4
 800669c:	e7e1      	b.n	8006662 <__b2d+0x4a>
 800669e:	ea44 010c 	orr.w	r1, r4, ip
 80066a2:	e7de      	b.n	8006662 <__b2d+0x4a>
 80066a4:	3ff00000 	.word	0x3ff00000

080066a8 <__d2b>:
 80066a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066aa:	2101      	movs	r1, #1
 80066ac:	4617      	mov	r7, r2
 80066ae:	461c      	mov	r4, r3
 80066b0:	9e08      	ldr	r6, [sp, #32]
 80066b2:	f7ff fc25 	bl	8005f00 <_Balloc>
 80066b6:	4605      	mov	r5, r0
 80066b8:	b930      	cbnz	r0, 80066c8 <__d2b+0x20>
 80066ba:	4602      	mov	r2, r0
 80066bc:	f240 310f 	movw	r1, #783	; 0x30f
 80066c0:	4b22      	ldr	r3, [pc, #136]	; (800674c <__d2b+0xa4>)
 80066c2:	4823      	ldr	r0, [pc, #140]	; (8006750 <__d2b+0xa8>)
 80066c4:	f001 f9a8 	bl	8007a18 <__assert_func>
 80066c8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80066cc:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80066d0:	bb24      	cbnz	r4, 800671c <__d2b+0x74>
 80066d2:	2f00      	cmp	r7, #0
 80066d4:	9301      	str	r3, [sp, #4]
 80066d6:	d026      	beq.n	8006726 <__d2b+0x7e>
 80066d8:	4668      	mov	r0, sp
 80066da:	9700      	str	r7, [sp, #0]
 80066dc:	f7ff fd22 	bl	8006124 <__lo0bits>
 80066e0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80066e4:	b1e8      	cbz	r0, 8006722 <__d2b+0x7a>
 80066e6:	f1c0 0320 	rsb	r3, r0, #32
 80066ea:	fa02 f303 	lsl.w	r3, r2, r3
 80066ee:	430b      	orrs	r3, r1
 80066f0:	40c2      	lsrs	r2, r0
 80066f2:	616b      	str	r3, [r5, #20]
 80066f4:	9201      	str	r2, [sp, #4]
 80066f6:	9b01      	ldr	r3, [sp, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	bf14      	ite	ne
 80066fc:	2102      	movne	r1, #2
 80066fe:	2101      	moveq	r1, #1
 8006700:	61ab      	str	r3, [r5, #24]
 8006702:	6129      	str	r1, [r5, #16]
 8006704:	b1bc      	cbz	r4, 8006736 <__d2b+0x8e>
 8006706:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800670a:	4404      	add	r4, r0
 800670c:	6034      	str	r4, [r6, #0]
 800670e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006714:	6018      	str	r0, [r3, #0]
 8006716:	4628      	mov	r0, r5
 8006718:	b003      	add	sp, #12
 800671a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800671c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006720:	e7d7      	b.n	80066d2 <__d2b+0x2a>
 8006722:	6169      	str	r1, [r5, #20]
 8006724:	e7e7      	b.n	80066f6 <__d2b+0x4e>
 8006726:	a801      	add	r0, sp, #4
 8006728:	f7ff fcfc 	bl	8006124 <__lo0bits>
 800672c:	9b01      	ldr	r3, [sp, #4]
 800672e:	2101      	movs	r1, #1
 8006730:	616b      	str	r3, [r5, #20]
 8006732:	3020      	adds	r0, #32
 8006734:	e7e5      	b.n	8006702 <__d2b+0x5a>
 8006736:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800673a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800673e:	6030      	str	r0, [r6, #0]
 8006740:	6918      	ldr	r0, [r3, #16]
 8006742:	f7ff fccf 	bl	80060e4 <__hi0bits>
 8006746:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800674a:	e7e2      	b.n	8006712 <__d2b+0x6a>
 800674c:	08009a6f 	.word	0x08009a6f
 8006750:	08009a80 	.word	0x08009a80

08006754 <__ratio>:
 8006754:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006758:	4688      	mov	r8, r1
 800675a:	4669      	mov	r1, sp
 800675c:	4681      	mov	r9, r0
 800675e:	f7ff ff5b 	bl	8006618 <__b2d>
 8006762:	460f      	mov	r7, r1
 8006764:	4604      	mov	r4, r0
 8006766:	460d      	mov	r5, r1
 8006768:	4640      	mov	r0, r8
 800676a:	a901      	add	r1, sp, #4
 800676c:	f7ff ff54 	bl	8006618 <__b2d>
 8006770:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006774:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006778:	468b      	mov	fp, r1
 800677a:	eba3 0c02 	sub.w	ip, r3, r2
 800677e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006782:	1a9b      	subs	r3, r3, r2
 8006784:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006788:	2b00      	cmp	r3, #0
 800678a:	bfd5      	itete	le
 800678c:	460a      	movle	r2, r1
 800678e:	462a      	movgt	r2, r5
 8006790:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006794:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006798:	bfd8      	it	le
 800679a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800679e:	465b      	mov	r3, fp
 80067a0:	4602      	mov	r2, r0
 80067a2:	4639      	mov	r1, r7
 80067a4:	4620      	mov	r0, r4
 80067a6:	f7f9 ffc1 	bl	800072c <__aeabi_ddiv>
 80067aa:	b003      	add	sp, #12
 80067ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080067b0 <__copybits>:
 80067b0:	3901      	subs	r1, #1
 80067b2:	b570      	push	{r4, r5, r6, lr}
 80067b4:	1149      	asrs	r1, r1, #5
 80067b6:	6914      	ldr	r4, [r2, #16]
 80067b8:	3101      	adds	r1, #1
 80067ba:	f102 0314 	add.w	r3, r2, #20
 80067be:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80067c2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80067c6:	1f05      	subs	r5, r0, #4
 80067c8:	42a3      	cmp	r3, r4
 80067ca:	d30c      	bcc.n	80067e6 <__copybits+0x36>
 80067cc:	1aa3      	subs	r3, r4, r2
 80067ce:	3b11      	subs	r3, #17
 80067d0:	f023 0303 	bic.w	r3, r3, #3
 80067d4:	3211      	adds	r2, #17
 80067d6:	42a2      	cmp	r2, r4
 80067d8:	bf88      	it	hi
 80067da:	2300      	movhi	r3, #0
 80067dc:	4418      	add	r0, r3
 80067de:	2300      	movs	r3, #0
 80067e0:	4288      	cmp	r0, r1
 80067e2:	d305      	bcc.n	80067f0 <__copybits+0x40>
 80067e4:	bd70      	pop	{r4, r5, r6, pc}
 80067e6:	f853 6b04 	ldr.w	r6, [r3], #4
 80067ea:	f845 6f04 	str.w	r6, [r5, #4]!
 80067ee:	e7eb      	b.n	80067c8 <__copybits+0x18>
 80067f0:	f840 3b04 	str.w	r3, [r0], #4
 80067f4:	e7f4      	b.n	80067e0 <__copybits+0x30>

080067f6 <__any_on>:
 80067f6:	f100 0214 	add.w	r2, r0, #20
 80067fa:	6900      	ldr	r0, [r0, #16]
 80067fc:	114b      	asrs	r3, r1, #5
 80067fe:	4298      	cmp	r0, r3
 8006800:	b510      	push	{r4, lr}
 8006802:	db11      	blt.n	8006828 <__any_on+0x32>
 8006804:	dd0a      	ble.n	800681c <__any_on+0x26>
 8006806:	f011 011f 	ands.w	r1, r1, #31
 800680a:	d007      	beq.n	800681c <__any_on+0x26>
 800680c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006810:	fa24 f001 	lsr.w	r0, r4, r1
 8006814:	fa00 f101 	lsl.w	r1, r0, r1
 8006818:	428c      	cmp	r4, r1
 800681a:	d10b      	bne.n	8006834 <__any_on+0x3e>
 800681c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006820:	4293      	cmp	r3, r2
 8006822:	d803      	bhi.n	800682c <__any_on+0x36>
 8006824:	2000      	movs	r0, #0
 8006826:	bd10      	pop	{r4, pc}
 8006828:	4603      	mov	r3, r0
 800682a:	e7f7      	b.n	800681c <__any_on+0x26>
 800682c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006830:	2900      	cmp	r1, #0
 8006832:	d0f5      	beq.n	8006820 <__any_on+0x2a>
 8006834:	2001      	movs	r0, #1
 8006836:	e7f6      	b.n	8006826 <__any_on+0x30>

08006838 <sulp>:
 8006838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800683c:	460f      	mov	r7, r1
 800683e:	4690      	mov	r8, r2
 8006840:	f7ff feca 	bl	80065d8 <__ulp>
 8006844:	4604      	mov	r4, r0
 8006846:	460d      	mov	r5, r1
 8006848:	f1b8 0f00 	cmp.w	r8, #0
 800684c:	d011      	beq.n	8006872 <sulp+0x3a>
 800684e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006852:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006856:	2b00      	cmp	r3, #0
 8006858:	dd0b      	ble.n	8006872 <sulp+0x3a>
 800685a:	2400      	movs	r4, #0
 800685c:	051b      	lsls	r3, r3, #20
 800685e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006862:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006866:	4622      	mov	r2, r4
 8006868:	462b      	mov	r3, r5
 800686a:	f7f9 fe35 	bl	80004d8 <__aeabi_dmul>
 800686e:	4604      	mov	r4, r0
 8006870:	460d      	mov	r5, r1
 8006872:	4620      	mov	r0, r4
 8006874:	4629      	mov	r1, r5
 8006876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800687a:	0000      	movs	r0, r0
 800687c:	0000      	movs	r0, r0
	...

08006880 <_strtod_l>:
 8006880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006884:	b09f      	sub	sp, #124	; 0x7c
 8006886:	9217      	str	r2, [sp, #92]	; 0x5c
 8006888:	2200      	movs	r2, #0
 800688a:	4604      	mov	r4, r0
 800688c:	921a      	str	r2, [sp, #104]	; 0x68
 800688e:	460d      	mov	r5, r1
 8006890:	f04f 0800 	mov.w	r8, #0
 8006894:	f04f 0900 	mov.w	r9, #0
 8006898:	460a      	mov	r2, r1
 800689a:	9219      	str	r2, [sp, #100]	; 0x64
 800689c:	7811      	ldrb	r1, [r2, #0]
 800689e:	292b      	cmp	r1, #43	; 0x2b
 80068a0:	d04a      	beq.n	8006938 <_strtod_l+0xb8>
 80068a2:	d838      	bhi.n	8006916 <_strtod_l+0x96>
 80068a4:	290d      	cmp	r1, #13
 80068a6:	d832      	bhi.n	800690e <_strtod_l+0x8e>
 80068a8:	2908      	cmp	r1, #8
 80068aa:	d832      	bhi.n	8006912 <_strtod_l+0x92>
 80068ac:	2900      	cmp	r1, #0
 80068ae:	d03b      	beq.n	8006928 <_strtod_l+0xa8>
 80068b0:	2200      	movs	r2, #0
 80068b2:	920e      	str	r2, [sp, #56]	; 0x38
 80068b4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80068b6:	7832      	ldrb	r2, [r6, #0]
 80068b8:	2a30      	cmp	r2, #48	; 0x30
 80068ba:	f040 80b2 	bne.w	8006a22 <_strtod_l+0x1a2>
 80068be:	7872      	ldrb	r2, [r6, #1]
 80068c0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80068c4:	2a58      	cmp	r2, #88	; 0x58
 80068c6:	d16e      	bne.n	80069a6 <_strtod_l+0x126>
 80068c8:	9302      	str	r3, [sp, #8]
 80068ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068cc:	4620      	mov	r0, r4
 80068ce:	9301      	str	r3, [sp, #4]
 80068d0:	ab1a      	add	r3, sp, #104	; 0x68
 80068d2:	9300      	str	r3, [sp, #0]
 80068d4:	4a8c      	ldr	r2, [pc, #560]	; (8006b08 <_strtod_l+0x288>)
 80068d6:	ab1b      	add	r3, sp, #108	; 0x6c
 80068d8:	a919      	add	r1, sp, #100	; 0x64
 80068da:	f001 f937 	bl	8007b4c <__gethex>
 80068de:	f010 070f 	ands.w	r7, r0, #15
 80068e2:	4605      	mov	r5, r0
 80068e4:	d005      	beq.n	80068f2 <_strtod_l+0x72>
 80068e6:	2f06      	cmp	r7, #6
 80068e8:	d128      	bne.n	800693c <_strtod_l+0xbc>
 80068ea:	2300      	movs	r3, #0
 80068ec:	3601      	adds	r6, #1
 80068ee:	9619      	str	r6, [sp, #100]	; 0x64
 80068f0:	930e      	str	r3, [sp, #56]	; 0x38
 80068f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f040 85a0 	bne.w	800743a <_strtod_l+0xbba>
 80068fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068fc:	b1cb      	cbz	r3, 8006932 <_strtod_l+0xb2>
 80068fe:	4642      	mov	r2, r8
 8006900:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006904:	4610      	mov	r0, r2
 8006906:	4619      	mov	r1, r3
 8006908:	b01f      	add	sp, #124	; 0x7c
 800690a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800690e:	2920      	cmp	r1, #32
 8006910:	d1ce      	bne.n	80068b0 <_strtod_l+0x30>
 8006912:	3201      	adds	r2, #1
 8006914:	e7c1      	b.n	800689a <_strtod_l+0x1a>
 8006916:	292d      	cmp	r1, #45	; 0x2d
 8006918:	d1ca      	bne.n	80068b0 <_strtod_l+0x30>
 800691a:	2101      	movs	r1, #1
 800691c:	910e      	str	r1, [sp, #56]	; 0x38
 800691e:	1c51      	adds	r1, r2, #1
 8006920:	9119      	str	r1, [sp, #100]	; 0x64
 8006922:	7852      	ldrb	r2, [r2, #1]
 8006924:	2a00      	cmp	r2, #0
 8006926:	d1c5      	bne.n	80068b4 <_strtod_l+0x34>
 8006928:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800692a:	9519      	str	r5, [sp, #100]	; 0x64
 800692c:	2b00      	cmp	r3, #0
 800692e:	f040 8582 	bne.w	8007436 <_strtod_l+0xbb6>
 8006932:	4642      	mov	r2, r8
 8006934:	464b      	mov	r3, r9
 8006936:	e7e5      	b.n	8006904 <_strtod_l+0x84>
 8006938:	2100      	movs	r1, #0
 800693a:	e7ef      	b.n	800691c <_strtod_l+0x9c>
 800693c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800693e:	b13a      	cbz	r2, 8006950 <_strtod_l+0xd0>
 8006940:	2135      	movs	r1, #53	; 0x35
 8006942:	a81c      	add	r0, sp, #112	; 0x70
 8006944:	f7ff ff34 	bl	80067b0 <__copybits>
 8006948:	4620      	mov	r0, r4
 800694a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800694c:	f7ff fb18 	bl	8005f80 <_Bfree>
 8006950:	3f01      	subs	r7, #1
 8006952:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006954:	2f04      	cmp	r7, #4
 8006956:	d806      	bhi.n	8006966 <_strtod_l+0xe6>
 8006958:	e8df f007 	tbb	[pc, r7]
 800695c:	201d0314 	.word	0x201d0314
 8006960:	14          	.byte	0x14
 8006961:	00          	.byte	0x00
 8006962:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8006966:	05e9      	lsls	r1, r5, #23
 8006968:	bf48      	it	mi
 800696a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800696e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006972:	0d1b      	lsrs	r3, r3, #20
 8006974:	051b      	lsls	r3, r3, #20
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1bb      	bne.n	80068f2 <_strtod_l+0x72>
 800697a:	f7fe fb19 	bl	8004fb0 <__errno>
 800697e:	2322      	movs	r3, #34	; 0x22
 8006980:	6003      	str	r3, [r0, #0]
 8006982:	e7b6      	b.n	80068f2 <_strtod_l+0x72>
 8006984:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006988:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800698c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006990:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006994:	e7e7      	b.n	8006966 <_strtod_l+0xe6>
 8006996:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8006b0c <_strtod_l+0x28c>
 800699a:	e7e4      	b.n	8006966 <_strtod_l+0xe6>
 800699c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80069a0:	f04f 38ff 	mov.w	r8, #4294967295
 80069a4:	e7df      	b.n	8006966 <_strtod_l+0xe6>
 80069a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80069a8:	1c5a      	adds	r2, r3, #1
 80069aa:	9219      	str	r2, [sp, #100]	; 0x64
 80069ac:	785b      	ldrb	r3, [r3, #1]
 80069ae:	2b30      	cmp	r3, #48	; 0x30
 80069b0:	d0f9      	beq.n	80069a6 <_strtod_l+0x126>
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d09d      	beq.n	80068f2 <_strtod_l+0x72>
 80069b6:	2301      	movs	r3, #1
 80069b8:	f04f 0a00 	mov.w	sl, #0
 80069bc:	220a      	movs	r2, #10
 80069be:	46d3      	mov	fp, sl
 80069c0:	9305      	str	r3, [sp, #20]
 80069c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80069c4:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80069c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80069ca:	9819      	ldr	r0, [sp, #100]	; 0x64
 80069cc:	7806      	ldrb	r6, [r0, #0]
 80069ce:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80069d2:	b2d9      	uxtb	r1, r3
 80069d4:	2909      	cmp	r1, #9
 80069d6:	d926      	bls.n	8006a26 <_strtod_l+0x1a6>
 80069d8:	2201      	movs	r2, #1
 80069da:	494d      	ldr	r1, [pc, #308]	; (8006b10 <_strtod_l+0x290>)
 80069dc:	f000 ffe6 	bl	80079ac <strncmp>
 80069e0:	2800      	cmp	r0, #0
 80069e2:	d030      	beq.n	8006a46 <_strtod_l+0x1c6>
 80069e4:	2000      	movs	r0, #0
 80069e6:	4632      	mov	r2, r6
 80069e8:	4603      	mov	r3, r0
 80069ea:	465e      	mov	r6, fp
 80069ec:	9008      	str	r0, [sp, #32]
 80069ee:	2a65      	cmp	r2, #101	; 0x65
 80069f0:	d001      	beq.n	80069f6 <_strtod_l+0x176>
 80069f2:	2a45      	cmp	r2, #69	; 0x45
 80069f4:	d113      	bne.n	8006a1e <_strtod_l+0x19e>
 80069f6:	b91e      	cbnz	r6, 8006a00 <_strtod_l+0x180>
 80069f8:	9a05      	ldr	r2, [sp, #20]
 80069fa:	4302      	orrs	r2, r0
 80069fc:	d094      	beq.n	8006928 <_strtod_l+0xa8>
 80069fe:	2600      	movs	r6, #0
 8006a00:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006a02:	1c6a      	adds	r2, r5, #1
 8006a04:	9219      	str	r2, [sp, #100]	; 0x64
 8006a06:	786a      	ldrb	r2, [r5, #1]
 8006a08:	2a2b      	cmp	r2, #43	; 0x2b
 8006a0a:	d074      	beq.n	8006af6 <_strtod_l+0x276>
 8006a0c:	2a2d      	cmp	r2, #45	; 0x2d
 8006a0e:	d078      	beq.n	8006b02 <_strtod_l+0x282>
 8006a10:	f04f 0c00 	mov.w	ip, #0
 8006a14:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006a18:	2909      	cmp	r1, #9
 8006a1a:	d97f      	bls.n	8006b1c <_strtod_l+0x29c>
 8006a1c:	9519      	str	r5, [sp, #100]	; 0x64
 8006a1e:	2700      	movs	r7, #0
 8006a20:	e09e      	b.n	8006b60 <_strtod_l+0x2e0>
 8006a22:	2300      	movs	r3, #0
 8006a24:	e7c8      	b.n	80069b8 <_strtod_l+0x138>
 8006a26:	f1bb 0f08 	cmp.w	fp, #8
 8006a2a:	bfd8      	it	le
 8006a2c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8006a2e:	f100 0001 	add.w	r0, r0, #1
 8006a32:	bfd6      	itet	le
 8006a34:	fb02 3301 	mlale	r3, r2, r1, r3
 8006a38:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8006a3c:	930a      	strle	r3, [sp, #40]	; 0x28
 8006a3e:	f10b 0b01 	add.w	fp, fp, #1
 8006a42:	9019      	str	r0, [sp, #100]	; 0x64
 8006a44:	e7c1      	b.n	80069ca <_strtod_l+0x14a>
 8006a46:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006a48:	1c5a      	adds	r2, r3, #1
 8006a4a:	9219      	str	r2, [sp, #100]	; 0x64
 8006a4c:	785a      	ldrb	r2, [r3, #1]
 8006a4e:	f1bb 0f00 	cmp.w	fp, #0
 8006a52:	d037      	beq.n	8006ac4 <_strtod_l+0x244>
 8006a54:	465e      	mov	r6, fp
 8006a56:	9008      	str	r0, [sp, #32]
 8006a58:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006a5c:	2b09      	cmp	r3, #9
 8006a5e:	d912      	bls.n	8006a86 <_strtod_l+0x206>
 8006a60:	2301      	movs	r3, #1
 8006a62:	e7c4      	b.n	80069ee <_strtod_l+0x16e>
 8006a64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006a66:	3001      	adds	r0, #1
 8006a68:	1c5a      	adds	r2, r3, #1
 8006a6a:	9219      	str	r2, [sp, #100]	; 0x64
 8006a6c:	785a      	ldrb	r2, [r3, #1]
 8006a6e:	2a30      	cmp	r2, #48	; 0x30
 8006a70:	d0f8      	beq.n	8006a64 <_strtod_l+0x1e4>
 8006a72:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006a76:	2b08      	cmp	r3, #8
 8006a78:	f200 84e4 	bhi.w	8007444 <_strtod_l+0xbc4>
 8006a7c:	9008      	str	r0, [sp, #32]
 8006a7e:	2000      	movs	r0, #0
 8006a80:	4606      	mov	r6, r0
 8006a82:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006a84:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a86:	3a30      	subs	r2, #48	; 0x30
 8006a88:	f100 0301 	add.w	r3, r0, #1
 8006a8c:	d014      	beq.n	8006ab8 <_strtod_l+0x238>
 8006a8e:	9908      	ldr	r1, [sp, #32]
 8006a90:	eb00 0c06 	add.w	ip, r0, r6
 8006a94:	4419      	add	r1, r3
 8006a96:	9108      	str	r1, [sp, #32]
 8006a98:	4633      	mov	r3, r6
 8006a9a:	210a      	movs	r1, #10
 8006a9c:	4563      	cmp	r3, ip
 8006a9e:	d113      	bne.n	8006ac8 <_strtod_l+0x248>
 8006aa0:	1833      	adds	r3, r6, r0
 8006aa2:	2b08      	cmp	r3, #8
 8006aa4:	f106 0601 	add.w	r6, r6, #1
 8006aa8:	4406      	add	r6, r0
 8006aaa:	dc1a      	bgt.n	8006ae2 <_strtod_l+0x262>
 8006aac:	230a      	movs	r3, #10
 8006aae:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ab0:	fb03 2301 	mla	r3, r3, r1, r2
 8006ab4:	930a      	str	r3, [sp, #40]	; 0x28
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006aba:	4618      	mov	r0, r3
 8006abc:	1c51      	adds	r1, r2, #1
 8006abe:	9119      	str	r1, [sp, #100]	; 0x64
 8006ac0:	7852      	ldrb	r2, [r2, #1]
 8006ac2:	e7c9      	b.n	8006a58 <_strtod_l+0x1d8>
 8006ac4:	4658      	mov	r0, fp
 8006ac6:	e7d2      	b.n	8006a6e <_strtod_l+0x1ee>
 8006ac8:	2b08      	cmp	r3, #8
 8006aca:	f103 0301 	add.w	r3, r3, #1
 8006ace:	dc03      	bgt.n	8006ad8 <_strtod_l+0x258>
 8006ad0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006ad2:	434f      	muls	r7, r1
 8006ad4:	970a      	str	r7, [sp, #40]	; 0x28
 8006ad6:	e7e1      	b.n	8006a9c <_strtod_l+0x21c>
 8006ad8:	2b10      	cmp	r3, #16
 8006ada:	bfd8      	it	le
 8006adc:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006ae0:	e7dc      	b.n	8006a9c <_strtod_l+0x21c>
 8006ae2:	2e10      	cmp	r6, #16
 8006ae4:	bfdc      	itt	le
 8006ae6:	230a      	movle	r3, #10
 8006ae8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8006aec:	e7e3      	b.n	8006ab6 <_strtod_l+0x236>
 8006aee:	2300      	movs	r3, #0
 8006af0:	9308      	str	r3, [sp, #32]
 8006af2:	2301      	movs	r3, #1
 8006af4:	e780      	b.n	80069f8 <_strtod_l+0x178>
 8006af6:	f04f 0c00 	mov.w	ip, #0
 8006afa:	1caa      	adds	r2, r5, #2
 8006afc:	9219      	str	r2, [sp, #100]	; 0x64
 8006afe:	78aa      	ldrb	r2, [r5, #2]
 8006b00:	e788      	b.n	8006a14 <_strtod_l+0x194>
 8006b02:	f04f 0c01 	mov.w	ip, #1
 8006b06:	e7f8      	b.n	8006afa <_strtod_l+0x27a>
 8006b08:	08009be0 	.word	0x08009be0
 8006b0c:	7ff00000 	.word	0x7ff00000
 8006b10:	08009bdc 	.word	0x08009bdc
 8006b14:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006b16:	1c51      	adds	r1, r2, #1
 8006b18:	9119      	str	r1, [sp, #100]	; 0x64
 8006b1a:	7852      	ldrb	r2, [r2, #1]
 8006b1c:	2a30      	cmp	r2, #48	; 0x30
 8006b1e:	d0f9      	beq.n	8006b14 <_strtod_l+0x294>
 8006b20:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006b24:	2908      	cmp	r1, #8
 8006b26:	f63f af7a 	bhi.w	8006a1e <_strtod_l+0x19e>
 8006b2a:	3a30      	subs	r2, #48	; 0x30
 8006b2c:	9209      	str	r2, [sp, #36]	; 0x24
 8006b2e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006b30:	920c      	str	r2, [sp, #48]	; 0x30
 8006b32:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006b34:	1c57      	adds	r7, r2, #1
 8006b36:	9719      	str	r7, [sp, #100]	; 0x64
 8006b38:	7852      	ldrb	r2, [r2, #1]
 8006b3a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006b3e:	f1be 0f09 	cmp.w	lr, #9
 8006b42:	d938      	bls.n	8006bb6 <_strtod_l+0x336>
 8006b44:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006b46:	1a7f      	subs	r7, r7, r1
 8006b48:	2f08      	cmp	r7, #8
 8006b4a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006b4e:	dc03      	bgt.n	8006b58 <_strtod_l+0x2d8>
 8006b50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b52:	428f      	cmp	r7, r1
 8006b54:	bfa8      	it	ge
 8006b56:	460f      	movge	r7, r1
 8006b58:	f1bc 0f00 	cmp.w	ip, #0
 8006b5c:	d000      	beq.n	8006b60 <_strtod_l+0x2e0>
 8006b5e:	427f      	negs	r7, r7
 8006b60:	2e00      	cmp	r6, #0
 8006b62:	d14f      	bne.n	8006c04 <_strtod_l+0x384>
 8006b64:	9905      	ldr	r1, [sp, #20]
 8006b66:	4301      	orrs	r1, r0
 8006b68:	f47f aec3 	bne.w	80068f2 <_strtod_l+0x72>
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f47f aedb 	bne.w	8006928 <_strtod_l+0xa8>
 8006b72:	2a69      	cmp	r2, #105	; 0x69
 8006b74:	d029      	beq.n	8006bca <_strtod_l+0x34a>
 8006b76:	dc26      	bgt.n	8006bc6 <_strtod_l+0x346>
 8006b78:	2a49      	cmp	r2, #73	; 0x49
 8006b7a:	d026      	beq.n	8006bca <_strtod_l+0x34a>
 8006b7c:	2a4e      	cmp	r2, #78	; 0x4e
 8006b7e:	f47f aed3 	bne.w	8006928 <_strtod_l+0xa8>
 8006b82:	499a      	ldr	r1, [pc, #616]	; (8006dec <_strtod_l+0x56c>)
 8006b84:	a819      	add	r0, sp, #100	; 0x64
 8006b86:	f001 fa23 	bl	8007fd0 <__match>
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	f43f aecc 	beq.w	8006928 <_strtod_l+0xa8>
 8006b90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	2b28      	cmp	r3, #40	; 0x28
 8006b96:	d12f      	bne.n	8006bf8 <_strtod_l+0x378>
 8006b98:	4995      	ldr	r1, [pc, #596]	; (8006df0 <_strtod_l+0x570>)
 8006b9a:	aa1c      	add	r2, sp, #112	; 0x70
 8006b9c:	a819      	add	r0, sp, #100	; 0x64
 8006b9e:	f001 fa2b 	bl	8007ff8 <__hexnan>
 8006ba2:	2805      	cmp	r0, #5
 8006ba4:	d128      	bne.n	8006bf8 <_strtod_l+0x378>
 8006ba6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006ba8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8006bac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006bb0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006bb4:	e69d      	b.n	80068f2 <_strtod_l+0x72>
 8006bb6:	210a      	movs	r1, #10
 8006bb8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006bba:	fb01 2107 	mla	r1, r1, r7, r2
 8006bbe:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006bc2:	9209      	str	r2, [sp, #36]	; 0x24
 8006bc4:	e7b5      	b.n	8006b32 <_strtod_l+0x2b2>
 8006bc6:	2a6e      	cmp	r2, #110	; 0x6e
 8006bc8:	e7d9      	b.n	8006b7e <_strtod_l+0x2fe>
 8006bca:	498a      	ldr	r1, [pc, #552]	; (8006df4 <_strtod_l+0x574>)
 8006bcc:	a819      	add	r0, sp, #100	; 0x64
 8006bce:	f001 f9ff 	bl	8007fd0 <__match>
 8006bd2:	2800      	cmp	r0, #0
 8006bd4:	f43f aea8 	beq.w	8006928 <_strtod_l+0xa8>
 8006bd8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006bda:	4987      	ldr	r1, [pc, #540]	; (8006df8 <_strtod_l+0x578>)
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	a819      	add	r0, sp, #100	; 0x64
 8006be0:	9319      	str	r3, [sp, #100]	; 0x64
 8006be2:	f001 f9f5 	bl	8007fd0 <__match>
 8006be6:	b910      	cbnz	r0, 8006bee <_strtod_l+0x36e>
 8006be8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006bea:	3301      	adds	r3, #1
 8006bec:	9319      	str	r3, [sp, #100]	; 0x64
 8006bee:	f04f 0800 	mov.w	r8, #0
 8006bf2:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8006dfc <_strtod_l+0x57c>
 8006bf6:	e67c      	b.n	80068f2 <_strtod_l+0x72>
 8006bf8:	4881      	ldr	r0, [pc, #516]	; (8006e00 <_strtod_l+0x580>)
 8006bfa:	f000 ff07 	bl	8007a0c <nan>
 8006bfe:	4680      	mov	r8, r0
 8006c00:	4689      	mov	r9, r1
 8006c02:	e676      	b.n	80068f2 <_strtod_l+0x72>
 8006c04:	9b08      	ldr	r3, [sp, #32]
 8006c06:	f1bb 0f00 	cmp.w	fp, #0
 8006c0a:	bf08      	it	eq
 8006c0c:	46b3      	moveq	fp, r6
 8006c0e:	1afb      	subs	r3, r7, r3
 8006c10:	2e10      	cmp	r6, #16
 8006c12:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006c14:	4635      	mov	r5, r6
 8006c16:	9309      	str	r3, [sp, #36]	; 0x24
 8006c18:	bfa8      	it	ge
 8006c1a:	2510      	movge	r5, #16
 8006c1c:	f7f9 fbe2 	bl	80003e4 <__aeabi_ui2d>
 8006c20:	2e09      	cmp	r6, #9
 8006c22:	4680      	mov	r8, r0
 8006c24:	4689      	mov	r9, r1
 8006c26:	dd13      	ble.n	8006c50 <_strtod_l+0x3d0>
 8006c28:	4b76      	ldr	r3, [pc, #472]	; (8006e04 <_strtod_l+0x584>)
 8006c2a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006c2e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006c32:	f7f9 fc51 	bl	80004d8 <__aeabi_dmul>
 8006c36:	4680      	mov	r8, r0
 8006c38:	4650      	mov	r0, sl
 8006c3a:	4689      	mov	r9, r1
 8006c3c:	f7f9 fbd2 	bl	80003e4 <__aeabi_ui2d>
 8006c40:	4602      	mov	r2, r0
 8006c42:	460b      	mov	r3, r1
 8006c44:	4640      	mov	r0, r8
 8006c46:	4649      	mov	r1, r9
 8006c48:	f7f9 fa90 	bl	800016c <__adddf3>
 8006c4c:	4680      	mov	r8, r0
 8006c4e:	4689      	mov	r9, r1
 8006c50:	2e0f      	cmp	r6, #15
 8006c52:	dc36      	bgt.n	8006cc2 <_strtod_l+0x442>
 8006c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f43f ae4b 	beq.w	80068f2 <_strtod_l+0x72>
 8006c5c:	dd22      	ble.n	8006ca4 <_strtod_l+0x424>
 8006c5e:	2b16      	cmp	r3, #22
 8006c60:	dc09      	bgt.n	8006c76 <_strtod_l+0x3f6>
 8006c62:	4968      	ldr	r1, [pc, #416]	; (8006e04 <_strtod_l+0x584>)
 8006c64:	4642      	mov	r2, r8
 8006c66:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006c6a:	464b      	mov	r3, r9
 8006c6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c70:	f7f9 fc32 	bl	80004d8 <__aeabi_dmul>
 8006c74:	e7c3      	b.n	8006bfe <_strtod_l+0x37e>
 8006c76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c78:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	db20      	blt.n	8006cc2 <_strtod_l+0x442>
 8006c80:	4c60      	ldr	r4, [pc, #384]	; (8006e04 <_strtod_l+0x584>)
 8006c82:	f1c6 060f 	rsb	r6, r6, #15
 8006c86:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8006c8a:	4642      	mov	r2, r8
 8006c8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c90:	464b      	mov	r3, r9
 8006c92:	f7f9 fc21 	bl	80004d8 <__aeabi_dmul>
 8006c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c98:	1b9e      	subs	r6, r3, r6
 8006c9a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8006c9e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006ca2:	e7e5      	b.n	8006c70 <_strtod_l+0x3f0>
 8006ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ca6:	3316      	adds	r3, #22
 8006ca8:	db0b      	blt.n	8006cc2 <_strtod_l+0x442>
 8006caa:	9b08      	ldr	r3, [sp, #32]
 8006cac:	4640      	mov	r0, r8
 8006cae:	1bdf      	subs	r7, r3, r7
 8006cb0:	4b54      	ldr	r3, [pc, #336]	; (8006e04 <_strtod_l+0x584>)
 8006cb2:	4649      	mov	r1, r9
 8006cb4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006cb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cbc:	f7f9 fd36 	bl	800072c <__aeabi_ddiv>
 8006cc0:	e79d      	b.n	8006bfe <_strtod_l+0x37e>
 8006cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cc4:	1b75      	subs	r5, r6, r5
 8006cc6:	441d      	add	r5, r3
 8006cc8:	2d00      	cmp	r5, #0
 8006cca:	dd70      	ble.n	8006dae <_strtod_l+0x52e>
 8006ccc:	f015 030f 	ands.w	r3, r5, #15
 8006cd0:	d00a      	beq.n	8006ce8 <_strtod_l+0x468>
 8006cd2:	494c      	ldr	r1, [pc, #304]	; (8006e04 <_strtod_l+0x584>)
 8006cd4:	4642      	mov	r2, r8
 8006cd6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006cda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cde:	464b      	mov	r3, r9
 8006ce0:	f7f9 fbfa 	bl	80004d8 <__aeabi_dmul>
 8006ce4:	4680      	mov	r8, r0
 8006ce6:	4689      	mov	r9, r1
 8006ce8:	f035 050f 	bics.w	r5, r5, #15
 8006cec:	d04d      	beq.n	8006d8a <_strtod_l+0x50a>
 8006cee:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8006cf2:	dd22      	ble.n	8006d3a <_strtod_l+0x4ba>
 8006cf4:	2600      	movs	r6, #0
 8006cf6:	46b3      	mov	fp, r6
 8006cf8:	960b      	str	r6, [sp, #44]	; 0x2c
 8006cfa:	9608      	str	r6, [sp, #32]
 8006cfc:	2322      	movs	r3, #34	; 0x22
 8006cfe:	f04f 0800 	mov.w	r8, #0
 8006d02:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8006dfc <_strtod_l+0x57c>
 8006d06:	6023      	str	r3, [r4, #0]
 8006d08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f43f adf1 	beq.w	80068f2 <_strtod_l+0x72>
 8006d10:	4620      	mov	r0, r4
 8006d12:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006d14:	f7ff f934 	bl	8005f80 <_Bfree>
 8006d18:	4620      	mov	r0, r4
 8006d1a:	9908      	ldr	r1, [sp, #32]
 8006d1c:	f7ff f930 	bl	8005f80 <_Bfree>
 8006d20:	4659      	mov	r1, fp
 8006d22:	4620      	mov	r0, r4
 8006d24:	f7ff f92c 	bl	8005f80 <_Bfree>
 8006d28:	4620      	mov	r0, r4
 8006d2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d2c:	f7ff f928 	bl	8005f80 <_Bfree>
 8006d30:	4631      	mov	r1, r6
 8006d32:	4620      	mov	r0, r4
 8006d34:	f7ff f924 	bl	8005f80 <_Bfree>
 8006d38:	e5db      	b.n	80068f2 <_strtod_l+0x72>
 8006d3a:	4b33      	ldr	r3, [pc, #204]	; (8006e08 <_strtod_l+0x588>)
 8006d3c:	4640      	mov	r0, r8
 8006d3e:	9305      	str	r3, [sp, #20]
 8006d40:	2300      	movs	r3, #0
 8006d42:	4649      	mov	r1, r9
 8006d44:	469a      	mov	sl, r3
 8006d46:	112d      	asrs	r5, r5, #4
 8006d48:	2d01      	cmp	r5, #1
 8006d4a:	dc21      	bgt.n	8006d90 <_strtod_l+0x510>
 8006d4c:	b10b      	cbz	r3, 8006d52 <_strtod_l+0x4d2>
 8006d4e:	4680      	mov	r8, r0
 8006d50:	4689      	mov	r9, r1
 8006d52:	492d      	ldr	r1, [pc, #180]	; (8006e08 <_strtod_l+0x588>)
 8006d54:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006d58:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006d5c:	4642      	mov	r2, r8
 8006d5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d62:	464b      	mov	r3, r9
 8006d64:	f7f9 fbb8 	bl	80004d8 <__aeabi_dmul>
 8006d68:	4b24      	ldr	r3, [pc, #144]	; (8006dfc <_strtod_l+0x57c>)
 8006d6a:	460a      	mov	r2, r1
 8006d6c:	400b      	ands	r3, r1
 8006d6e:	4927      	ldr	r1, [pc, #156]	; (8006e0c <_strtod_l+0x58c>)
 8006d70:	4680      	mov	r8, r0
 8006d72:	428b      	cmp	r3, r1
 8006d74:	d8be      	bhi.n	8006cf4 <_strtod_l+0x474>
 8006d76:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006d7a:	428b      	cmp	r3, r1
 8006d7c:	bf86      	itte	hi
 8006d7e:	f04f 38ff 	movhi.w	r8, #4294967295
 8006d82:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8006e10 <_strtod_l+0x590>
 8006d86:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	9305      	str	r3, [sp, #20]
 8006d8e:	e07b      	b.n	8006e88 <_strtod_l+0x608>
 8006d90:	07ea      	lsls	r2, r5, #31
 8006d92:	d505      	bpl.n	8006da0 <_strtod_l+0x520>
 8006d94:	9b05      	ldr	r3, [sp, #20]
 8006d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9a:	f7f9 fb9d 	bl	80004d8 <__aeabi_dmul>
 8006d9e:	2301      	movs	r3, #1
 8006da0:	9a05      	ldr	r2, [sp, #20]
 8006da2:	f10a 0a01 	add.w	sl, sl, #1
 8006da6:	3208      	adds	r2, #8
 8006da8:	106d      	asrs	r5, r5, #1
 8006daa:	9205      	str	r2, [sp, #20]
 8006dac:	e7cc      	b.n	8006d48 <_strtod_l+0x4c8>
 8006dae:	d0ec      	beq.n	8006d8a <_strtod_l+0x50a>
 8006db0:	426d      	negs	r5, r5
 8006db2:	f015 020f 	ands.w	r2, r5, #15
 8006db6:	d00a      	beq.n	8006dce <_strtod_l+0x54e>
 8006db8:	4b12      	ldr	r3, [pc, #72]	; (8006e04 <_strtod_l+0x584>)
 8006dba:	4640      	mov	r0, r8
 8006dbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dc0:	4649      	mov	r1, r9
 8006dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc6:	f7f9 fcb1 	bl	800072c <__aeabi_ddiv>
 8006dca:	4680      	mov	r8, r0
 8006dcc:	4689      	mov	r9, r1
 8006dce:	112d      	asrs	r5, r5, #4
 8006dd0:	d0db      	beq.n	8006d8a <_strtod_l+0x50a>
 8006dd2:	2d1f      	cmp	r5, #31
 8006dd4:	dd1e      	ble.n	8006e14 <_strtod_l+0x594>
 8006dd6:	2600      	movs	r6, #0
 8006dd8:	46b3      	mov	fp, r6
 8006dda:	960b      	str	r6, [sp, #44]	; 0x2c
 8006ddc:	9608      	str	r6, [sp, #32]
 8006dde:	2322      	movs	r3, #34	; 0x22
 8006de0:	f04f 0800 	mov.w	r8, #0
 8006de4:	f04f 0900 	mov.w	r9, #0
 8006de8:	6023      	str	r3, [r4, #0]
 8006dea:	e78d      	b.n	8006d08 <_strtod_l+0x488>
 8006dec:	080099c7 	.word	0x080099c7
 8006df0:	08009bf4 	.word	0x08009bf4
 8006df4:	080099bf 	.word	0x080099bf
 8006df8:	080099f6 	.word	0x080099f6
 8006dfc:	7ff00000 	.word	0x7ff00000
 8006e00:	08009d85 	.word	0x08009d85
 8006e04:	08009b08 	.word	0x08009b08
 8006e08:	08009ae0 	.word	0x08009ae0
 8006e0c:	7ca00000 	.word	0x7ca00000
 8006e10:	7fefffff 	.word	0x7fefffff
 8006e14:	f015 0310 	ands.w	r3, r5, #16
 8006e18:	bf18      	it	ne
 8006e1a:	236a      	movne	r3, #106	; 0x6a
 8006e1c:	4640      	mov	r0, r8
 8006e1e:	9305      	str	r3, [sp, #20]
 8006e20:	4649      	mov	r1, r9
 8006e22:	2300      	movs	r3, #0
 8006e24:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 80070f0 <_strtod_l+0x870>
 8006e28:	07ea      	lsls	r2, r5, #31
 8006e2a:	d504      	bpl.n	8006e36 <_strtod_l+0x5b6>
 8006e2c:	e9da 2300 	ldrd	r2, r3, [sl]
 8006e30:	f7f9 fb52 	bl	80004d8 <__aeabi_dmul>
 8006e34:	2301      	movs	r3, #1
 8006e36:	106d      	asrs	r5, r5, #1
 8006e38:	f10a 0a08 	add.w	sl, sl, #8
 8006e3c:	d1f4      	bne.n	8006e28 <_strtod_l+0x5a8>
 8006e3e:	b10b      	cbz	r3, 8006e44 <_strtod_l+0x5c4>
 8006e40:	4680      	mov	r8, r0
 8006e42:	4689      	mov	r9, r1
 8006e44:	9b05      	ldr	r3, [sp, #20]
 8006e46:	b1bb      	cbz	r3, 8006e78 <_strtod_l+0x5f8>
 8006e48:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006e4c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	4649      	mov	r1, r9
 8006e54:	dd10      	ble.n	8006e78 <_strtod_l+0x5f8>
 8006e56:	2b1f      	cmp	r3, #31
 8006e58:	f340 8128 	ble.w	80070ac <_strtod_l+0x82c>
 8006e5c:	2b34      	cmp	r3, #52	; 0x34
 8006e5e:	bfd8      	it	le
 8006e60:	f04f 33ff 	movle.w	r3, #4294967295
 8006e64:	f04f 0800 	mov.w	r8, #0
 8006e68:	bfcf      	iteee	gt
 8006e6a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006e6e:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006e72:	4093      	lslle	r3, r2
 8006e74:	ea03 0901 	andle.w	r9, r3, r1
 8006e78:	2200      	movs	r2, #0
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	4640      	mov	r0, r8
 8006e7e:	4649      	mov	r1, r9
 8006e80:	f7f9 fd92 	bl	80009a8 <__aeabi_dcmpeq>
 8006e84:	2800      	cmp	r0, #0
 8006e86:	d1a6      	bne.n	8006dd6 <_strtod_l+0x556>
 8006e88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e8a:	465a      	mov	r2, fp
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	4620      	mov	r0, r4
 8006e90:	4633      	mov	r3, r6
 8006e92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e94:	f7ff f8dc 	bl	8006050 <__s2b>
 8006e98:	900b      	str	r0, [sp, #44]	; 0x2c
 8006e9a:	2800      	cmp	r0, #0
 8006e9c:	f43f af2a 	beq.w	8006cf4 <_strtod_l+0x474>
 8006ea0:	2600      	movs	r6, #0
 8006ea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ea4:	9b08      	ldr	r3, [sp, #32]
 8006ea6:	2a00      	cmp	r2, #0
 8006ea8:	eba3 0307 	sub.w	r3, r3, r7
 8006eac:	bfa8      	it	ge
 8006eae:	2300      	movge	r3, #0
 8006eb0:	46b3      	mov	fp, r6
 8006eb2:	9312      	str	r3, [sp, #72]	; 0x48
 8006eb4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006eb8:	9316      	str	r3, [sp, #88]	; 0x58
 8006eba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	6859      	ldr	r1, [r3, #4]
 8006ec0:	f7ff f81e 	bl	8005f00 <_Balloc>
 8006ec4:	9008      	str	r0, [sp, #32]
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	f43f af18 	beq.w	8006cfc <_strtod_l+0x47c>
 8006ecc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ece:	300c      	adds	r0, #12
 8006ed0:	691a      	ldr	r2, [r3, #16]
 8006ed2:	f103 010c 	add.w	r1, r3, #12
 8006ed6:	3202      	adds	r2, #2
 8006ed8:	0092      	lsls	r2, r2, #2
 8006eda:	f000 fd89 	bl	80079f0 <memcpy>
 8006ede:	ab1c      	add	r3, sp, #112	; 0x70
 8006ee0:	9301      	str	r3, [sp, #4]
 8006ee2:	ab1b      	add	r3, sp, #108	; 0x6c
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	4642      	mov	r2, r8
 8006ee8:	464b      	mov	r3, r9
 8006eea:	4620      	mov	r0, r4
 8006eec:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8006ef0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8006ef4:	f7ff fbd8 	bl	80066a8 <__d2b>
 8006ef8:	901a      	str	r0, [sp, #104]	; 0x68
 8006efa:	2800      	cmp	r0, #0
 8006efc:	f43f aefe 	beq.w	8006cfc <_strtod_l+0x47c>
 8006f00:	2101      	movs	r1, #1
 8006f02:	4620      	mov	r0, r4
 8006f04:	f7ff f93c 	bl	8006180 <__i2b>
 8006f08:	4683      	mov	fp, r0
 8006f0a:	2800      	cmp	r0, #0
 8006f0c:	f43f aef6 	beq.w	8006cfc <_strtod_l+0x47c>
 8006f10:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8006f12:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006f14:	2f00      	cmp	r7, #0
 8006f16:	bfab      	itete	ge
 8006f18:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8006f1a:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006f1c:	eb07 0a03 	addge.w	sl, r7, r3
 8006f20:	1bdd      	sublt	r5, r3, r7
 8006f22:	9b05      	ldr	r3, [sp, #20]
 8006f24:	bfa8      	it	ge
 8006f26:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8006f28:	eba7 0703 	sub.w	r7, r7, r3
 8006f2c:	4417      	add	r7, r2
 8006f2e:	4b71      	ldr	r3, [pc, #452]	; (80070f4 <_strtod_l+0x874>)
 8006f30:	f107 37ff 	add.w	r7, r7, #4294967295
 8006f34:	bfb8      	it	lt
 8006f36:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8006f3a:	429f      	cmp	r7, r3
 8006f3c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006f40:	f280 80c7 	bge.w	80070d2 <_strtod_l+0x852>
 8006f44:	1bdb      	subs	r3, r3, r7
 8006f46:	2b1f      	cmp	r3, #31
 8006f48:	f04f 0101 	mov.w	r1, #1
 8006f4c:	eba2 0203 	sub.w	r2, r2, r3
 8006f50:	f300 80b3 	bgt.w	80070ba <_strtod_l+0x83a>
 8006f54:	fa01 f303 	lsl.w	r3, r1, r3
 8006f58:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	9310      	str	r3, [sp, #64]	; 0x40
 8006f5e:	eb0a 0702 	add.w	r7, sl, r2
 8006f62:	9b05      	ldr	r3, [sp, #20]
 8006f64:	45ba      	cmp	sl, r7
 8006f66:	4415      	add	r5, r2
 8006f68:	441d      	add	r5, r3
 8006f6a:	4653      	mov	r3, sl
 8006f6c:	bfa8      	it	ge
 8006f6e:	463b      	movge	r3, r7
 8006f70:	42ab      	cmp	r3, r5
 8006f72:	bfa8      	it	ge
 8006f74:	462b      	movge	r3, r5
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	bfc2      	ittt	gt
 8006f7a:	1aff      	subgt	r7, r7, r3
 8006f7c:	1aed      	subgt	r5, r5, r3
 8006f7e:	ebaa 0a03 	subgt.w	sl, sl, r3
 8006f82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	dd17      	ble.n	8006fb8 <_strtod_l+0x738>
 8006f88:	4659      	mov	r1, fp
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	4620      	mov	r0, r4
 8006f8e:	f7ff f9b5 	bl	80062fc <__pow5mult>
 8006f92:	4683      	mov	fp, r0
 8006f94:	2800      	cmp	r0, #0
 8006f96:	f43f aeb1 	beq.w	8006cfc <_strtod_l+0x47c>
 8006f9a:	4601      	mov	r1, r0
 8006f9c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	f7ff f904 	bl	80061ac <__multiply>
 8006fa4:	900a      	str	r0, [sp, #40]	; 0x28
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	f43f aea8 	beq.w	8006cfc <_strtod_l+0x47c>
 8006fac:	4620      	mov	r0, r4
 8006fae:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006fb0:	f7fe ffe6 	bl	8005f80 <_Bfree>
 8006fb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fb6:	931a      	str	r3, [sp, #104]	; 0x68
 8006fb8:	2f00      	cmp	r7, #0
 8006fba:	f300 808f 	bgt.w	80070dc <_strtod_l+0x85c>
 8006fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	dd08      	ble.n	8006fd6 <_strtod_l+0x756>
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006fc8:	9908      	ldr	r1, [sp, #32]
 8006fca:	f7ff f997 	bl	80062fc <__pow5mult>
 8006fce:	9008      	str	r0, [sp, #32]
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	f43f ae93 	beq.w	8006cfc <_strtod_l+0x47c>
 8006fd6:	2d00      	cmp	r5, #0
 8006fd8:	dd08      	ble.n	8006fec <_strtod_l+0x76c>
 8006fda:	462a      	mov	r2, r5
 8006fdc:	4620      	mov	r0, r4
 8006fde:	9908      	ldr	r1, [sp, #32]
 8006fe0:	f7ff f9e6 	bl	80063b0 <__lshift>
 8006fe4:	9008      	str	r0, [sp, #32]
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	f43f ae88 	beq.w	8006cfc <_strtod_l+0x47c>
 8006fec:	f1ba 0f00 	cmp.w	sl, #0
 8006ff0:	dd08      	ble.n	8007004 <_strtod_l+0x784>
 8006ff2:	4659      	mov	r1, fp
 8006ff4:	4652      	mov	r2, sl
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	f7ff f9da 	bl	80063b0 <__lshift>
 8006ffc:	4683      	mov	fp, r0
 8006ffe:	2800      	cmp	r0, #0
 8007000:	f43f ae7c 	beq.w	8006cfc <_strtod_l+0x47c>
 8007004:	4620      	mov	r0, r4
 8007006:	9a08      	ldr	r2, [sp, #32]
 8007008:	991a      	ldr	r1, [sp, #104]	; 0x68
 800700a:	f7ff fa59 	bl	80064c0 <__mdiff>
 800700e:	4606      	mov	r6, r0
 8007010:	2800      	cmp	r0, #0
 8007012:	f43f ae73 	beq.w	8006cfc <_strtod_l+0x47c>
 8007016:	2500      	movs	r5, #0
 8007018:	68c3      	ldr	r3, [r0, #12]
 800701a:	4659      	mov	r1, fp
 800701c:	60c5      	str	r5, [r0, #12]
 800701e:	930a      	str	r3, [sp, #40]	; 0x28
 8007020:	f7ff fa32 	bl	8006488 <__mcmp>
 8007024:	42a8      	cmp	r0, r5
 8007026:	da6b      	bge.n	8007100 <_strtod_l+0x880>
 8007028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800702a:	ea53 0308 	orrs.w	r3, r3, r8
 800702e:	f040 808f 	bne.w	8007150 <_strtod_l+0x8d0>
 8007032:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007036:	2b00      	cmp	r3, #0
 8007038:	f040 808a 	bne.w	8007150 <_strtod_l+0x8d0>
 800703c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007040:	0d1b      	lsrs	r3, r3, #20
 8007042:	051b      	lsls	r3, r3, #20
 8007044:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007048:	f240 8082 	bls.w	8007150 <_strtod_l+0x8d0>
 800704c:	6973      	ldr	r3, [r6, #20]
 800704e:	b913      	cbnz	r3, 8007056 <_strtod_l+0x7d6>
 8007050:	6933      	ldr	r3, [r6, #16]
 8007052:	2b01      	cmp	r3, #1
 8007054:	dd7c      	ble.n	8007150 <_strtod_l+0x8d0>
 8007056:	4631      	mov	r1, r6
 8007058:	2201      	movs	r2, #1
 800705a:	4620      	mov	r0, r4
 800705c:	f7ff f9a8 	bl	80063b0 <__lshift>
 8007060:	4659      	mov	r1, fp
 8007062:	4606      	mov	r6, r0
 8007064:	f7ff fa10 	bl	8006488 <__mcmp>
 8007068:	2800      	cmp	r0, #0
 800706a:	dd71      	ble.n	8007150 <_strtod_l+0x8d0>
 800706c:	9905      	ldr	r1, [sp, #20]
 800706e:	464b      	mov	r3, r9
 8007070:	4a21      	ldr	r2, [pc, #132]	; (80070f8 <_strtod_l+0x878>)
 8007072:	2900      	cmp	r1, #0
 8007074:	f000 808d 	beq.w	8007192 <_strtod_l+0x912>
 8007078:	ea02 0109 	and.w	r1, r2, r9
 800707c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007080:	f300 8087 	bgt.w	8007192 <_strtod_l+0x912>
 8007084:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007088:	f77f aea9 	ble.w	8006dde <_strtod_l+0x55e>
 800708c:	4640      	mov	r0, r8
 800708e:	4649      	mov	r1, r9
 8007090:	4b1a      	ldr	r3, [pc, #104]	; (80070fc <_strtod_l+0x87c>)
 8007092:	2200      	movs	r2, #0
 8007094:	f7f9 fa20 	bl	80004d8 <__aeabi_dmul>
 8007098:	4b17      	ldr	r3, [pc, #92]	; (80070f8 <_strtod_l+0x878>)
 800709a:	4680      	mov	r8, r0
 800709c:	400b      	ands	r3, r1
 800709e:	4689      	mov	r9, r1
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f47f ae35 	bne.w	8006d10 <_strtod_l+0x490>
 80070a6:	2322      	movs	r3, #34	; 0x22
 80070a8:	6023      	str	r3, [r4, #0]
 80070aa:	e631      	b.n	8006d10 <_strtod_l+0x490>
 80070ac:	f04f 32ff 	mov.w	r2, #4294967295
 80070b0:	fa02 f303 	lsl.w	r3, r2, r3
 80070b4:	ea03 0808 	and.w	r8, r3, r8
 80070b8:	e6de      	b.n	8006e78 <_strtod_l+0x5f8>
 80070ba:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 80070be:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 80070c2:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 80070c6:	37e2      	adds	r7, #226	; 0xe2
 80070c8:	fa01 f307 	lsl.w	r3, r1, r7
 80070cc:	9310      	str	r3, [sp, #64]	; 0x40
 80070ce:	9113      	str	r1, [sp, #76]	; 0x4c
 80070d0:	e745      	b.n	8006f5e <_strtod_l+0x6de>
 80070d2:	2300      	movs	r3, #0
 80070d4:	9310      	str	r3, [sp, #64]	; 0x40
 80070d6:	2301      	movs	r3, #1
 80070d8:	9313      	str	r3, [sp, #76]	; 0x4c
 80070da:	e740      	b.n	8006f5e <_strtod_l+0x6de>
 80070dc:	463a      	mov	r2, r7
 80070de:	4620      	mov	r0, r4
 80070e0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80070e2:	f7ff f965 	bl	80063b0 <__lshift>
 80070e6:	901a      	str	r0, [sp, #104]	; 0x68
 80070e8:	2800      	cmp	r0, #0
 80070ea:	f47f af68 	bne.w	8006fbe <_strtod_l+0x73e>
 80070ee:	e605      	b.n	8006cfc <_strtod_l+0x47c>
 80070f0:	08009c08 	.word	0x08009c08
 80070f4:	fffffc02 	.word	0xfffffc02
 80070f8:	7ff00000 	.word	0x7ff00000
 80070fc:	39500000 	.word	0x39500000
 8007100:	46ca      	mov	sl, r9
 8007102:	d165      	bne.n	80071d0 <_strtod_l+0x950>
 8007104:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007106:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800710a:	b352      	cbz	r2, 8007162 <_strtod_l+0x8e2>
 800710c:	4a9e      	ldr	r2, [pc, #632]	; (8007388 <_strtod_l+0xb08>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d12a      	bne.n	8007168 <_strtod_l+0x8e8>
 8007112:	9b05      	ldr	r3, [sp, #20]
 8007114:	4641      	mov	r1, r8
 8007116:	b1fb      	cbz	r3, 8007158 <_strtod_l+0x8d8>
 8007118:	4b9c      	ldr	r3, [pc, #624]	; (800738c <_strtod_l+0xb0c>)
 800711a:	f04f 32ff 	mov.w	r2, #4294967295
 800711e:	ea09 0303 	and.w	r3, r9, r3
 8007122:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007126:	d81a      	bhi.n	800715e <_strtod_l+0x8de>
 8007128:	0d1b      	lsrs	r3, r3, #20
 800712a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800712e:	fa02 f303 	lsl.w	r3, r2, r3
 8007132:	4299      	cmp	r1, r3
 8007134:	d118      	bne.n	8007168 <_strtod_l+0x8e8>
 8007136:	4b96      	ldr	r3, [pc, #600]	; (8007390 <_strtod_l+0xb10>)
 8007138:	459a      	cmp	sl, r3
 800713a:	d102      	bne.n	8007142 <_strtod_l+0x8c2>
 800713c:	3101      	adds	r1, #1
 800713e:	f43f addd 	beq.w	8006cfc <_strtod_l+0x47c>
 8007142:	f04f 0800 	mov.w	r8, #0
 8007146:	4b91      	ldr	r3, [pc, #580]	; (800738c <_strtod_l+0xb0c>)
 8007148:	ea0a 0303 	and.w	r3, sl, r3
 800714c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007150:	9b05      	ldr	r3, [sp, #20]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d19a      	bne.n	800708c <_strtod_l+0x80c>
 8007156:	e5db      	b.n	8006d10 <_strtod_l+0x490>
 8007158:	f04f 33ff 	mov.w	r3, #4294967295
 800715c:	e7e9      	b.n	8007132 <_strtod_l+0x8b2>
 800715e:	4613      	mov	r3, r2
 8007160:	e7e7      	b.n	8007132 <_strtod_l+0x8b2>
 8007162:	ea53 0308 	orrs.w	r3, r3, r8
 8007166:	d081      	beq.n	800706c <_strtod_l+0x7ec>
 8007168:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800716a:	b1e3      	cbz	r3, 80071a6 <_strtod_l+0x926>
 800716c:	ea13 0f0a 	tst.w	r3, sl
 8007170:	d0ee      	beq.n	8007150 <_strtod_l+0x8d0>
 8007172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007174:	4640      	mov	r0, r8
 8007176:	4649      	mov	r1, r9
 8007178:	9a05      	ldr	r2, [sp, #20]
 800717a:	b1c3      	cbz	r3, 80071ae <_strtod_l+0x92e>
 800717c:	f7ff fb5c 	bl	8006838 <sulp>
 8007180:	4602      	mov	r2, r0
 8007182:	460b      	mov	r3, r1
 8007184:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007186:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007188:	f7f8 fff0 	bl	800016c <__adddf3>
 800718c:	4680      	mov	r8, r0
 800718e:	4689      	mov	r9, r1
 8007190:	e7de      	b.n	8007150 <_strtod_l+0x8d0>
 8007192:	4013      	ands	r3, r2
 8007194:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007198:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800719c:	f04f 38ff 	mov.w	r8, #4294967295
 80071a0:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80071a4:	e7d4      	b.n	8007150 <_strtod_l+0x8d0>
 80071a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071a8:	ea13 0f08 	tst.w	r3, r8
 80071ac:	e7e0      	b.n	8007170 <_strtod_l+0x8f0>
 80071ae:	f7ff fb43 	bl	8006838 <sulp>
 80071b2:	4602      	mov	r2, r0
 80071b4:	460b      	mov	r3, r1
 80071b6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80071b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80071ba:	f7f8 ffd5 	bl	8000168 <__aeabi_dsub>
 80071be:	2200      	movs	r2, #0
 80071c0:	2300      	movs	r3, #0
 80071c2:	4680      	mov	r8, r0
 80071c4:	4689      	mov	r9, r1
 80071c6:	f7f9 fbef 	bl	80009a8 <__aeabi_dcmpeq>
 80071ca:	2800      	cmp	r0, #0
 80071cc:	d0c0      	beq.n	8007150 <_strtod_l+0x8d0>
 80071ce:	e606      	b.n	8006dde <_strtod_l+0x55e>
 80071d0:	4659      	mov	r1, fp
 80071d2:	4630      	mov	r0, r6
 80071d4:	f7ff fabe 	bl	8006754 <__ratio>
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80071e0:	2200      	movs	r2, #0
 80071e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80071e6:	f7f9 fbf3 	bl	80009d0 <__aeabi_dcmple>
 80071ea:	2800      	cmp	r0, #0
 80071ec:	d06f      	beq.n	80072ce <_strtod_l+0xa4e>
 80071ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d17c      	bne.n	80072ee <_strtod_l+0xa6e>
 80071f4:	f1b8 0f00 	cmp.w	r8, #0
 80071f8:	d159      	bne.n	80072ae <_strtod_l+0xa2e>
 80071fa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d17b      	bne.n	80072fa <_strtod_l+0xa7a>
 8007202:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007206:	2200      	movs	r2, #0
 8007208:	4b62      	ldr	r3, [pc, #392]	; (8007394 <_strtod_l+0xb14>)
 800720a:	f7f9 fbd7 	bl	80009bc <__aeabi_dcmplt>
 800720e:	2800      	cmp	r0, #0
 8007210:	d15a      	bne.n	80072c8 <_strtod_l+0xa48>
 8007212:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007216:	2200      	movs	r2, #0
 8007218:	4b5f      	ldr	r3, [pc, #380]	; (8007398 <_strtod_l+0xb18>)
 800721a:	f7f9 f95d 	bl	80004d8 <__aeabi_dmul>
 800721e:	4605      	mov	r5, r0
 8007220:	460f      	mov	r7, r1
 8007222:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007226:	9506      	str	r5, [sp, #24]
 8007228:	9307      	str	r3, [sp, #28]
 800722a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800722e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007232:	4b56      	ldr	r3, [pc, #344]	; (800738c <_strtod_l+0xb0c>)
 8007234:	4a55      	ldr	r2, [pc, #340]	; (800738c <_strtod_l+0xb0c>)
 8007236:	ea0a 0303 	and.w	r3, sl, r3
 800723a:	9313      	str	r3, [sp, #76]	; 0x4c
 800723c:	4b57      	ldr	r3, [pc, #348]	; (800739c <_strtod_l+0xb1c>)
 800723e:	ea0a 0202 	and.w	r2, sl, r2
 8007242:	429a      	cmp	r2, r3
 8007244:	f040 80b0 	bne.w	80073a8 <_strtod_l+0xb28>
 8007248:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800724c:	4640      	mov	r0, r8
 800724e:	4649      	mov	r1, r9
 8007250:	f7ff f9c2 	bl	80065d8 <__ulp>
 8007254:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007258:	f7f9 f93e 	bl	80004d8 <__aeabi_dmul>
 800725c:	4642      	mov	r2, r8
 800725e:	464b      	mov	r3, r9
 8007260:	f7f8 ff84 	bl	800016c <__adddf3>
 8007264:	f8df a124 	ldr.w	sl, [pc, #292]	; 800738c <_strtod_l+0xb0c>
 8007268:	4a4d      	ldr	r2, [pc, #308]	; (80073a0 <_strtod_l+0xb20>)
 800726a:	ea01 0a0a 	and.w	sl, r1, sl
 800726e:	4592      	cmp	sl, r2
 8007270:	4680      	mov	r8, r0
 8007272:	d948      	bls.n	8007306 <_strtod_l+0xa86>
 8007274:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007276:	4b46      	ldr	r3, [pc, #280]	; (8007390 <_strtod_l+0xb10>)
 8007278:	429a      	cmp	r2, r3
 800727a:	d103      	bne.n	8007284 <_strtod_l+0xa04>
 800727c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800727e:	3301      	adds	r3, #1
 8007280:	f43f ad3c 	beq.w	8006cfc <_strtod_l+0x47c>
 8007284:	f04f 38ff 	mov.w	r8, #4294967295
 8007288:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8007390 <_strtod_l+0xb10>
 800728c:	4620      	mov	r0, r4
 800728e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007290:	f7fe fe76 	bl	8005f80 <_Bfree>
 8007294:	4620      	mov	r0, r4
 8007296:	9908      	ldr	r1, [sp, #32]
 8007298:	f7fe fe72 	bl	8005f80 <_Bfree>
 800729c:	4659      	mov	r1, fp
 800729e:	4620      	mov	r0, r4
 80072a0:	f7fe fe6e 	bl	8005f80 <_Bfree>
 80072a4:	4631      	mov	r1, r6
 80072a6:	4620      	mov	r0, r4
 80072a8:	f7fe fe6a 	bl	8005f80 <_Bfree>
 80072ac:	e605      	b.n	8006eba <_strtod_l+0x63a>
 80072ae:	f1b8 0f01 	cmp.w	r8, #1
 80072b2:	d103      	bne.n	80072bc <_strtod_l+0xa3c>
 80072b4:	f1b9 0f00 	cmp.w	r9, #0
 80072b8:	f43f ad91 	beq.w	8006dde <_strtod_l+0x55e>
 80072bc:	2200      	movs	r2, #0
 80072be:	4b39      	ldr	r3, [pc, #228]	; (80073a4 <_strtod_l+0xb24>)
 80072c0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80072c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80072c6:	e016      	b.n	80072f6 <_strtod_l+0xa76>
 80072c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80072ca:	4f33      	ldr	r7, [pc, #204]	; (8007398 <_strtod_l+0xb18>)
 80072cc:	e7a9      	b.n	8007222 <_strtod_l+0x9a2>
 80072ce:	4b32      	ldr	r3, [pc, #200]	; (8007398 <_strtod_l+0xb18>)
 80072d0:	2200      	movs	r2, #0
 80072d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80072d6:	f7f9 f8ff 	bl	80004d8 <__aeabi_dmul>
 80072da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072dc:	4605      	mov	r5, r0
 80072de:	460f      	mov	r7, r1
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d09e      	beq.n	8007222 <_strtod_l+0x9a2>
 80072e4:	4602      	mov	r2, r0
 80072e6:	460b      	mov	r3, r1
 80072e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80072ec:	e79d      	b.n	800722a <_strtod_l+0x9aa>
 80072ee:	2200      	movs	r2, #0
 80072f0:	4b28      	ldr	r3, [pc, #160]	; (8007394 <_strtod_l+0xb14>)
 80072f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80072f6:	4f27      	ldr	r7, [pc, #156]	; (8007394 <_strtod_l+0xb14>)
 80072f8:	e797      	b.n	800722a <_strtod_l+0x9aa>
 80072fa:	2200      	movs	r2, #0
 80072fc:	4b29      	ldr	r3, [pc, #164]	; (80073a4 <_strtod_l+0xb24>)
 80072fe:	4645      	mov	r5, r8
 8007300:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007304:	e7f7      	b.n	80072f6 <_strtod_l+0xa76>
 8007306:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800730a:	9b05      	ldr	r3, [sp, #20]
 800730c:	46ca      	mov	sl, r9
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1bc      	bne.n	800728c <_strtod_l+0xa0c>
 8007312:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007316:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007318:	0d1b      	lsrs	r3, r3, #20
 800731a:	051b      	lsls	r3, r3, #20
 800731c:	429a      	cmp	r2, r3
 800731e:	d1b5      	bne.n	800728c <_strtod_l+0xa0c>
 8007320:	4628      	mov	r0, r5
 8007322:	4639      	mov	r1, r7
 8007324:	f7f9 fde6 	bl	8000ef4 <__aeabi_d2lz>
 8007328:	f7f9 f8a8 	bl	800047c <__aeabi_l2d>
 800732c:	4602      	mov	r2, r0
 800732e:	460b      	mov	r3, r1
 8007330:	4628      	mov	r0, r5
 8007332:	4639      	mov	r1, r7
 8007334:	f7f8 ff18 	bl	8000168 <__aeabi_dsub>
 8007338:	460b      	mov	r3, r1
 800733a:	4602      	mov	r2, r0
 800733c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8007340:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007346:	ea4a 0a08 	orr.w	sl, sl, r8
 800734a:	ea5a 0a03 	orrs.w	sl, sl, r3
 800734e:	d06c      	beq.n	800742a <_strtod_l+0xbaa>
 8007350:	a309      	add	r3, pc, #36	; (adr r3, 8007378 <_strtod_l+0xaf8>)
 8007352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007356:	f7f9 fb31 	bl	80009bc <__aeabi_dcmplt>
 800735a:	2800      	cmp	r0, #0
 800735c:	f47f acd8 	bne.w	8006d10 <_strtod_l+0x490>
 8007360:	a307      	add	r3, pc, #28	; (adr r3, 8007380 <_strtod_l+0xb00>)
 8007362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007366:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800736a:	f7f9 fb45 	bl	80009f8 <__aeabi_dcmpgt>
 800736e:	2800      	cmp	r0, #0
 8007370:	d08c      	beq.n	800728c <_strtod_l+0xa0c>
 8007372:	e4cd      	b.n	8006d10 <_strtod_l+0x490>
 8007374:	f3af 8000 	nop.w
 8007378:	94a03595 	.word	0x94a03595
 800737c:	3fdfffff 	.word	0x3fdfffff
 8007380:	35afe535 	.word	0x35afe535
 8007384:	3fe00000 	.word	0x3fe00000
 8007388:	000fffff 	.word	0x000fffff
 800738c:	7ff00000 	.word	0x7ff00000
 8007390:	7fefffff 	.word	0x7fefffff
 8007394:	3ff00000 	.word	0x3ff00000
 8007398:	3fe00000 	.word	0x3fe00000
 800739c:	7fe00000 	.word	0x7fe00000
 80073a0:	7c9fffff 	.word	0x7c9fffff
 80073a4:	bff00000 	.word	0xbff00000
 80073a8:	9b05      	ldr	r3, [sp, #20]
 80073aa:	b333      	cbz	r3, 80073fa <_strtod_l+0xb7a>
 80073ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80073ae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80073b2:	d822      	bhi.n	80073fa <_strtod_l+0xb7a>
 80073b4:	a328      	add	r3, pc, #160	; (adr r3, 8007458 <_strtod_l+0xbd8>)
 80073b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ba:	4628      	mov	r0, r5
 80073bc:	4639      	mov	r1, r7
 80073be:	f7f9 fb07 	bl	80009d0 <__aeabi_dcmple>
 80073c2:	b1a0      	cbz	r0, 80073ee <_strtod_l+0xb6e>
 80073c4:	4639      	mov	r1, r7
 80073c6:	4628      	mov	r0, r5
 80073c8:	f7f9 fb5e 	bl	8000a88 <__aeabi_d2uiz>
 80073cc:	2801      	cmp	r0, #1
 80073ce:	bf38      	it	cc
 80073d0:	2001      	movcc	r0, #1
 80073d2:	f7f9 f807 	bl	80003e4 <__aeabi_ui2d>
 80073d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073d8:	4605      	mov	r5, r0
 80073da:	460f      	mov	r7, r1
 80073dc:	bb03      	cbnz	r3, 8007420 <_strtod_l+0xba0>
 80073de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80073e2:	9014      	str	r0, [sp, #80]	; 0x50
 80073e4:	9315      	str	r3, [sp, #84]	; 0x54
 80073e6:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80073ea:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80073ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80073f2:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80073f6:	1a9b      	subs	r3, r3, r2
 80073f8:	9311      	str	r3, [sp, #68]	; 0x44
 80073fa:	980c      	ldr	r0, [sp, #48]	; 0x30
 80073fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80073fe:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8007402:	f7ff f8e9 	bl	80065d8 <__ulp>
 8007406:	4602      	mov	r2, r0
 8007408:	460b      	mov	r3, r1
 800740a:	4640      	mov	r0, r8
 800740c:	4649      	mov	r1, r9
 800740e:	f7f9 f863 	bl	80004d8 <__aeabi_dmul>
 8007412:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007414:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007416:	f7f8 fea9 	bl	800016c <__adddf3>
 800741a:	4680      	mov	r8, r0
 800741c:	4689      	mov	r9, r1
 800741e:	e774      	b.n	800730a <_strtod_l+0xa8a>
 8007420:	4602      	mov	r2, r0
 8007422:	460b      	mov	r3, r1
 8007424:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007428:	e7dd      	b.n	80073e6 <_strtod_l+0xb66>
 800742a:	a30d      	add	r3, pc, #52	; (adr r3, 8007460 <_strtod_l+0xbe0>)
 800742c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007430:	f7f9 fac4 	bl	80009bc <__aeabi_dcmplt>
 8007434:	e79b      	b.n	800736e <_strtod_l+0xaee>
 8007436:	2300      	movs	r3, #0
 8007438:	930e      	str	r3, [sp, #56]	; 0x38
 800743a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800743c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800743e:	6013      	str	r3, [r2, #0]
 8007440:	f7ff ba5b 	b.w	80068fa <_strtod_l+0x7a>
 8007444:	2a65      	cmp	r2, #101	; 0x65
 8007446:	f43f ab52 	beq.w	8006aee <_strtod_l+0x26e>
 800744a:	2a45      	cmp	r2, #69	; 0x45
 800744c:	f43f ab4f 	beq.w	8006aee <_strtod_l+0x26e>
 8007450:	2301      	movs	r3, #1
 8007452:	f7ff bb87 	b.w	8006b64 <_strtod_l+0x2e4>
 8007456:	bf00      	nop
 8007458:	ffc00000 	.word	0xffc00000
 800745c:	41dfffff 	.word	0x41dfffff
 8007460:	94a03595 	.word	0x94a03595
 8007464:	3fcfffff 	.word	0x3fcfffff

08007468 <_strtod_r>:
 8007468:	4b01      	ldr	r3, [pc, #4]	; (8007470 <_strtod_r+0x8>)
 800746a:	f7ff ba09 	b.w	8006880 <_strtod_l>
 800746e:	bf00      	nop
 8007470:	20000068 	.word	0x20000068

08007474 <_strtol_l.constprop.0>:
 8007474:	2b01      	cmp	r3, #1
 8007476:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800747a:	4686      	mov	lr, r0
 800747c:	4690      	mov	r8, r2
 800747e:	d001      	beq.n	8007484 <_strtol_l.constprop.0+0x10>
 8007480:	2b24      	cmp	r3, #36	; 0x24
 8007482:	d906      	bls.n	8007492 <_strtol_l.constprop.0+0x1e>
 8007484:	f7fd fd94 	bl	8004fb0 <__errno>
 8007488:	2316      	movs	r3, #22
 800748a:	6003      	str	r3, [r0, #0]
 800748c:	2000      	movs	r0, #0
 800748e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007492:	460d      	mov	r5, r1
 8007494:	4835      	ldr	r0, [pc, #212]	; (800756c <_strtol_l.constprop.0+0xf8>)
 8007496:	462a      	mov	r2, r5
 8007498:	f815 4b01 	ldrb.w	r4, [r5], #1
 800749c:	5d06      	ldrb	r6, [r0, r4]
 800749e:	f016 0608 	ands.w	r6, r6, #8
 80074a2:	d1f8      	bne.n	8007496 <_strtol_l.constprop.0+0x22>
 80074a4:	2c2d      	cmp	r4, #45	; 0x2d
 80074a6:	d12e      	bne.n	8007506 <_strtol_l.constprop.0+0x92>
 80074a8:	2601      	movs	r6, #1
 80074aa:	782c      	ldrb	r4, [r5, #0]
 80074ac:	1c95      	adds	r5, r2, #2
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d057      	beq.n	8007562 <_strtol_l.constprop.0+0xee>
 80074b2:	2b10      	cmp	r3, #16
 80074b4:	d109      	bne.n	80074ca <_strtol_l.constprop.0+0x56>
 80074b6:	2c30      	cmp	r4, #48	; 0x30
 80074b8:	d107      	bne.n	80074ca <_strtol_l.constprop.0+0x56>
 80074ba:	782a      	ldrb	r2, [r5, #0]
 80074bc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80074c0:	2a58      	cmp	r2, #88	; 0x58
 80074c2:	d149      	bne.n	8007558 <_strtol_l.constprop.0+0xe4>
 80074c4:	2310      	movs	r3, #16
 80074c6:	786c      	ldrb	r4, [r5, #1]
 80074c8:	3502      	adds	r5, #2
 80074ca:	2200      	movs	r2, #0
 80074cc:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80074d0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80074d4:	fbbc f9f3 	udiv	r9, ip, r3
 80074d8:	4610      	mov	r0, r2
 80074da:	fb03 ca19 	mls	sl, r3, r9, ip
 80074de:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80074e2:	2f09      	cmp	r7, #9
 80074e4:	d814      	bhi.n	8007510 <_strtol_l.constprop.0+0x9c>
 80074e6:	463c      	mov	r4, r7
 80074e8:	42a3      	cmp	r3, r4
 80074ea:	dd20      	ble.n	800752e <_strtol_l.constprop.0+0xba>
 80074ec:	1c57      	adds	r7, r2, #1
 80074ee:	d007      	beq.n	8007500 <_strtol_l.constprop.0+0x8c>
 80074f0:	4581      	cmp	r9, r0
 80074f2:	d319      	bcc.n	8007528 <_strtol_l.constprop.0+0xb4>
 80074f4:	d101      	bne.n	80074fa <_strtol_l.constprop.0+0x86>
 80074f6:	45a2      	cmp	sl, r4
 80074f8:	db16      	blt.n	8007528 <_strtol_l.constprop.0+0xb4>
 80074fa:	2201      	movs	r2, #1
 80074fc:	fb00 4003 	mla	r0, r0, r3, r4
 8007500:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007504:	e7eb      	b.n	80074de <_strtol_l.constprop.0+0x6a>
 8007506:	2c2b      	cmp	r4, #43	; 0x2b
 8007508:	bf04      	itt	eq
 800750a:	782c      	ldrbeq	r4, [r5, #0]
 800750c:	1c95      	addeq	r5, r2, #2
 800750e:	e7ce      	b.n	80074ae <_strtol_l.constprop.0+0x3a>
 8007510:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007514:	2f19      	cmp	r7, #25
 8007516:	d801      	bhi.n	800751c <_strtol_l.constprop.0+0xa8>
 8007518:	3c37      	subs	r4, #55	; 0x37
 800751a:	e7e5      	b.n	80074e8 <_strtol_l.constprop.0+0x74>
 800751c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007520:	2f19      	cmp	r7, #25
 8007522:	d804      	bhi.n	800752e <_strtol_l.constprop.0+0xba>
 8007524:	3c57      	subs	r4, #87	; 0x57
 8007526:	e7df      	b.n	80074e8 <_strtol_l.constprop.0+0x74>
 8007528:	f04f 32ff 	mov.w	r2, #4294967295
 800752c:	e7e8      	b.n	8007500 <_strtol_l.constprop.0+0x8c>
 800752e:	1c53      	adds	r3, r2, #1
 8007530:	d108      	bne.n	8007544 <_strtol_l.constprop.0+0xd0>
 8007532:	2322      	movs	r3, #34	; 0x22
 8007534:	4660      	mov	r0, ip
 8007536:	f8ce 3000 	str.w	r3, [lr]
 800753a:	f1b8 0f00 	cmp.w	r8, #0
 800753e:	d0a6      	beq.n	800748e <_strtol_l.constprop.0+0x1a>
 8007540:	1e69      	subs	r1, r5, #1
 8007542:	e006      	b.n	8007552 <_strtol_l.constprop.0+0xde>
 8007544:	b106      	cbz	r6, 8007548 <_strtol_l.constprop.0+0xd4>
 8007546:	4240      	negs	r0, r0
 8007548:	f1b8 0f00 	cmp.w	r8, #0
 800754c:	d09f      	beq.n	800748e <_strtol_l.constprop.0+0x1a>
 800754e:	2a00      	cmp	r2, #0
 8007550:	d1f6      	bne.n	8007540 <_strtol_l.constprop.0+0xcc>
 8007552:	f8c8 1000 	str.w	r1, [r8]
 8007556:	e79a      	b.n	800748e <_strtol_l.constprop.0+0x1a>
 8007558:	2430      	movs	r4, #48	; 0x30
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1b5      	bne.n	80074ca <_strtol_l.constprop.0+0x56>
 800755e:	2308      	movs	r3, #8
 8007560:	e7b3      	b.n	80074ca <_strtol_l.constprop.0+0x56>
 8007562:	2c30      	cmp	r4, #48	; 0x30
 8007564:	d0a9      	beq.n	80074ba <_strtol_l.constprop.0+0x46>
 8007566:	230a      	movs	r3, #10
 8007568:	e7af      	b.n	80074ca <_strtol_l.constprop.0+0x56>
 800756a:	bf00      	nop
 800756c:	08009c31 	.word	0x08009c31

08007570 <_strtol_r>:
 8007570:	f7ff bf80 	b.w	8007474 <_strtol_l.constprop.0>

08007574 <__ssputs_r>:
 8007574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007578:	461f      	mov	r7, r3
 800757a:	688e      	ldr	r6, [r1, #8]
 800757c:	4682      	mov	sl, r0
 800757e:	42be      	cmp	r6, r7
 8007580:	460c      	mov	r4, r1
 8007582:	4690      	mov	r8, r2
 8007584:	680b      	ldr	r3, [r1, #0]
 8007586:	d82c      	bhi.n	80075e2 <__ssputs_r+0x6e>
 8007588:	898a      	ldrh	r2, [r1, #12]
 800758a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800758e:	d026      	beq.n	80075de <__ssputs_r+0x6a>
 8007590:	6965      	ldr	r5, [r4, #20]
 8007592:	6909      	ldr	r1, [r1, #16]
 8007594:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007598:	eba3 0901 	sub.w	r9, r3, r1
 800759c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80075a0:	1c7b      	adds	r3, r7, #1
 80075a2:	444b      	add	r3, r9
 80075a4:	106d      	asrs	r5, r5, #1
 80075a6:	429d      	cmp	r5, r3
 80075a8:	bf38      	it	cc
 80075aa:	461d      	movcc	r5, r3
 80075ac:	0553      	lsls	r3, r2, #21
 80075ae:	d527      	bpl.n	8007600 <__ssputs_r+0x8c>
 80075b0:	4629      	mov	r1, r5
 80075b2:	f7fe fc19 	bl	8005de8 <_malloc_r>
 80075b6:	4606      	mov	r6, r0
 80075b8:	b360      	cbz	r0, 8007614 <__ssputs_r+0xa0>
 80075ba:	464a      	mov	r2, r9
 80075bc:	6921      	ldr	r1, [r4, #16]
 80075be:	f000 fa17 	bl	80079f0 <memcpy>
 80075c2:	89a3      	ldrh	r3, [r4, #12]
 80075c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80075c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075cc:	81a3      	strh	r3, [r4, #12]
 80075ce:	6126      	str	r6, [r4, #16]
 80075d0:	444e      	add	r6, r9
 80075d2:	6026      	str	r6, [r4, #0]
 80075d4:	463e      	mov	r6, r7
 80075d6:	6165      	str	r5, [r4, #20]
 80075d8:	eba5 0509 	sub.w	r5, r5, r9
 80075dc:	60a5      	str	r5, [r4, #8]
 80075de:	42be      	cmp	r6, r7
 80075e0:	d900      	bls.n	80075e4 <__ssputs_r+0x70>
 80075e2:	463e      	mov	r6, r7
 80075e4:	4632      	mov	r2, r6
 80075e6:	4641      	mov	r1, r8
 80075e8:	6820      	ldr	r0, [r4, #0]
 80075ea:	f000 f9c5 	bl	8007978 <memmove>
 80075ee:	2000      	movs	r0, #0
 80075f0:	68a3      	ldr	r3, [r4, #8]
 80075f2:	1b9b      	subs	r3, r3, r6
 80075f4:	60a3      	str	r3, [r4, #8]
 80075f6:	6823      	ldr	r3, [r4, #0]
 80075f8:	4433      	add	r3, r6
 80075fa:	6023      	str	r3, [r4, #0]
 80075fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007600:	462a      	mov	r2, r5
 8007602:	f000 fda6 	bl	8008152 <_realloc_r>
 8007606:	4606      	mov	r6, r0
 8007608:	2800      	cmp	r0, #0
 800760a:	d1e0      	bne.n	80075ce <__ssputs_r+0x5a>
 800760c:	4650      	mov	r0, sl
 800760e:	6921      	ldr	r1, [r4, #16]
 8007610:	f7fe fb7a 	bl	8005d08 <_free_r>
 8007614:	230c      	movs	r3, #12
 8007616:	f8ca 3000 	str.w	r3, [sl]
 800761a:	89a3      	ldrh	r3, [r4, #12]
 800761c:	f04f 30ff 	mov.w	r0, #4294967295
 8007620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007624:	81a3      	strh	r3, [r4, #12]
 8007626:	e7e9      	b.n	80075fc <__ssputs_r+0x88>

08007628 <_svfiprintf_r>:
 8007628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800762c:	4698      	mov	r8, r3
 800762e:	898b      	ldrh	r3, [r1, #12]
 8007630:	4607      	mov	r7, r0
 8007632:	061b      	lsls	r3, r3, #24
 8007634:	460d      	mov	r5, r1
 8007636:	4614      	mov	r4, r2
 8007638:	b09d      	sub	sp, #116	; 0x74
 800763a:	d50e      	bpl.n	800765a <_svfiprintf_r+0x32>
 800763c:	690b      	ldr	r3, [r1, #16]
 800763e:	b963      	cbnz	r3, 800765a <_svfiprintf_r+0x32>
 8007640:	2140      	movs	r1, #64	; 0x40
 8007642:	f7fe fbd1 	bl	8005de8 <_malloc_r>
 8007646:	6028      	str	r0, [r5, #0]
 8007648:	6128      	str	r0, [r5, #16]
 800764a:	b920      	cbnz	r0, 8007656 <_svfiprintf_r+0x2e>
 800764c:	230c      	movs	r3, #12
 800764e:	603b      	str	r3, [r7, #0]
 8007650:	f04f 30ff 	mov.w	r0, #4294967295
 8007654:	e0d0      	b.n	80077f8 <_svfiprintf_r+0x1d0>
 8007656:	2340      	movs	r3, #64	; 0x40
 8007658:	616b      	str	r3, [r5, #20]
 800765a:	2300      	movs	r3, #0
 800765c:	9309      	str	r3, [sp, #36]	; 0x24
 800765e:	2320      	movs	r3, #32
 8007660:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007664:	2330      	movs	r3, #48	; 0x30
 8007666:	f04f 0901 	mov.w	r9, #1
 800766a:	f8cd 800c 	str.w	r8, [sp, #12]
 800766e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007810 <_svfiprintf_r+0x1e8>
 8007672:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007676:	4623      	mov	r3, r4
 8007678:	469a      	mov	sl, r3
 800767a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800767e:	b10a      	cbz	r2, 8007684 <_svfiprintf_r+0x5c>
 8007680:	2a25      	cmp	r2, #37	; 0x25
 8007682:	d1f9      	bne.n	8007678 <_svfiprintf_r+0x50>
 8007684:	ebba 0b04 	subs.w	fp, sl, r4
 8007688:	d00b      	beq.n	80076a2 <_svfiprintf_r+0x7a>
 800768a:	465b      	mov	r3, fp
 800768c:	4622      	mov	r2, r4
 800768e:	4629      	mov	r1, r5
 8007690:	4638      	mov	r0, r7
 8007692:	f7ff ff6f 	bl	8007574 <__ssputs_r>
 8007696:	3001      	adds	r0, #1
 8007698:	f000 80a9 	beq.w	80077ee <_svfiprintf_r+0x1c6>
 800769c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800769e:	445a      	add	r2, fp
 80076a0:	9209      	str	r2, [sp, #36]	; 0x24
 80076a2:	f89a 3000 	ldrb.w	r3, [sl]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f000 80a1 	beq.w	80077ee <_svfiprintf_r+0x1c6>
 80076ac:	2300      	movs	r3, #0
 80076ae:	f04f 32ff 	mov.w	r2, #4294967295
 80076b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076b6:	f10a 0a01 	add.w	sl, sl, #1
 80076ba:	9304      	str	r3, [sp, #16]
 80076bc:	9307      	str	r3, [sp, #28]
 80076be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076c2:	931a      	str	r3, [sp, #104]	; 0x68
 80076c4:	4654      	mov	r4, sl
 80076c6:	2205      	movs	r2, #5
 80076c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076cc:	4850      	ldr	r0, [pc, #320]	; (8007810 <_svfiprintf_r+0x1e8>)
 80076ce:	f7fd fc9b 	bl	8005008 <memchr>
 80076d2:	9a04      	ldr	r2, [sp, #16]
 80076d4:	b9d8      	cbnz	r0, 800770e <_svfiprintf_r+0xe6>
 80076d6:	06d0      	lsls	r0, r2, #27
 80076d8:	bf44      	itt	mi
 80076da:	2320      	movmi	r3, #32
 80076dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076e0:	0711      	lsls	r1, r2, #28
 80076e2:	bf44      	itt	mi
 80076e4:	232b      	movmi	r3, #43	; 0x2b
 80076e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076ea:	f89a 3000 	ldrb.w	r3, [sl]
 80076ee:	2b2a      	cmp	r3, #42	; 0x2a
 80076f0:	d015      	beq.n	800771e <_svfiprintf_r+0xf6>
 80076f2:	4654      	mov	r4, sl
 80076f4:	2000      	movs	r0, #0
 80076f6:	f04f 0c0a 	mov.w	ip, #10
 80076fa:	9a07      	ldr	r2, [sp, #28]
 80076fc:	4621      	mov	r1, r4
 80076fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007702:	3b30      	subs	r3, #48	; 0x30
 8007704:	2b09      	cmp	r3, #9
 8007706:	d94d      	bls.n	80077a4 <_svfiprintf_r+0x17c>
 8007708:	b1b0      	cbz	r0, 8007738 <_svfiprintf_r+0x110>
 800770a:	9207      	str	r2, [sp, #28]
 800770c:	e014      	b.n	8007738 <_svfiprintf_r+0x110>
 800770e:	eba0 0308 	sub.w	r3, r0, r8
 8007712:	fa09 f303 	lsl.w	r3, r9, r3
 8007716:	4313      	orrs	r3, r2
 8007718:	46a2      	mov	sl, r4
 800771a:	9304      	str	r3, [sp, #16]
 800771c:	e7d2      	b.n	80076c4 <_svfiprintf_r+0x9c>
 800771e:	9b03      	ldr	r3, [sp, #12]
 8007720:	1d19      	adds	r1, r3, #4
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	9103      	str	r1, [sp, #12]
 8007726:	2b00      	cmp	r3, #0
 8007728:	bfbb      	ittet	lt
 800772a:	425b      	neglt	r3, r3
 800772c:	f042 0202 	orrlt.w	r2, r2, #2
 8007730:	9307      	strge	r3, [sp, #28]
 8007732:	9307      	strlt	r3, [sp, #28]
 8007734:	bfb8      	it	lt
 8007736:	9204      	strlt	r2, [sp, #16]
 8007738:	7823      	ldrb	r3, [r4, #0]
 800773a:	2b2e      	cmp	r3, #46	; 0x2e
 800773c:	d10c      	bne.n	8007758 <_svfiprintf_r+0x130>
 800773e:	7863      	ldrb	r3, [r4, #1]
 8007740:	2b2a      	cmp	r3, #42	; 0x2a
 8007742:	d134      	bne.n	80077ae <_svfiprintf_r+0x186>
 8007744:	9b03      	ldr	r3, [sp, #12]
 8007746:	3402      	adds	r4, #2
 8007748:	1d1a      	adds	r2, r3, #4
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	9203      	str	r2, [sp, #12]
 800774e:	2b00      	cmp	r3, #0
 8007750:	bfb8      	it	lt
 8007752:	f04f 33ff 	movlt.w	r3, #4294967295
 8007756:	9305      	str	r3, [sp, #20]
 8007758:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007814 <_svfiprintf_r+0x1ec>
 800775c:	2203      	movs	r2, #3
 800775e:	4650      	mov	r0, sl
 8007760:	7821      	ldrb	r1, [r4, #0]
 8007762:	f7fd fc51 	bl	8005008 <memchr>
 8007766:	b138      	cbz	r0, 8007778 <_svfiprintf_r+0x150>
 8007768:	2240      	movs	r2, #64	; 0x40
 800776a:	9b04      	ldr	r3, [sp, #16]
 800776c:	eba0 000a 	sub.w	r0, r0, sl
 8007770:	4082      	lsls	r2, r0
 8007772:	4313      	orrs	r3, r2
 8007774:	3401      	adds	r4, #1
 8007776:	9304      	str	r3, [sp, #16]
 8007778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800777c:	2206      	movs	r2, #6
 800777e:	4826      	ldr	r0, [pc, #152]	; (8007818 <_svfiprintf_r+0x1f0>)
 8007780:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007784:	f7fd fc40 	bl	8005008 <memchr>
 8007788:	2800      	cmp	r0, #0
 800778a:	d038      	beq.n	80077fe <_svfiprintf_r+0x1d6>
 800778c:	4b23      	ldr	r3, [pc, #140]	; (800781c <_svfiprintf_r+0x1f4>)
 800778e:	bb1b      	cbnz	r3, 80077d8 <_svfiprintf_r+0x1b0>
 8007790:	9b03      	ldr	r3, [sp, #12]
 8007792:	3307      	adds	r3, #7
 8007794:	f023 0307 	bic.w	r3, r3, #7
 8007798:	3308      	adds	r3, #8
 800779a:	9303      	str	r3, [sp, #12]
 800779c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800779e:	4433      	add	r3, r6
 80077a0:	9309      	str	r3, [sp, #36]	; 0x24
 80077a2:	e768      	b.n	8007676 <_svfiprintf_r+0x4e>
 80077a4:	460c      	mov	r4, r1
 80077a6:	2001      	movs	r0, #1
 80077a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80077ac:	e7a6      	b.n	80076fc <_svfiprintf_r+0xd4>
 80077ae:	2300      	movs	r3, #0
 80077b0:	f04f 0c0a 	mov.w	ip, #10
 80077b4:	4619      	mov	r1, r3
 80077b6:	3401      	adds	r4, #1
 80077b8:	9305      	str	r3, [sp, #20]
 80077ba:	4620      	mov	r0, r4
 80077bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077c0:	3a30      	subs	r2, #48	; 0x30
 80077c2:	2a09      	cmp	r2, #9
 80077c4:	d903      	bls.n	80077ce <_svfiprintf_r+0x1a6>
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d0c6      	beq.n	8007758 <_svfiprintf_r+0x130>
 80077ca:	9105      	str	r1, [sp, #20]
 80077cc:	e7c4      	b.n	8007758 <_svfiprintf_r+0x130>
 80077ce:	4604      	mov	r4, r0
 80077d0:	2301      	movs	r3, #1
 80077d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80077d6:	e7f0      	b.n	80077ba <_svfiprintf_r+0x192>
 80077d8:	ab03      	add	r3, sp, #12
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	462a      	mov	r2, r5
 80077de:	4638      	mov	r0, r7
 80077e0:	4b0f      	ldr	r3, [pc, #60]	; (8007820 <_svfiprintf_r+0x1f8>)
 80077e2:	a904      	add	r1, sp, #16
 80077e4:	f7fc fcae 	bl	8004144 <_printf_float>
 80077e8:	1c42      	adds	r2, r0, #1
 80077ea:	4606      	mov	r6, r0
 80077ec:	d1d6      	bne.n	800779c <_svfiprintf_r+0x174>
 80077ee:	89ab      	ldrh	r3, [r5, #12]
 80077f0:	065b      	lsls	r3, r3, #25
 80077f2:	f53f af2d 	bmi.w	8007650 <_svfiprintf_r+0x28>
 80077f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077f8:	b01d      	add	sp, #116	; 0x74
 80077fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077fe:	ab03      	add	r3, sp, #12
 8007800:	9300      	str	r3, [sp, #0]
 8007802:	462a      	mov	r2, r5
 8007804:	4638      	mov	r0, r7
 8007806:	4b06      	ldr	r3, [pc, #24]	; (8007820 <_svfiprintf_r+0x1f8>)
 8007808:	a904      	add	r1, sp, #16
 800780a:	f7fc ff3b 	bl	8004684 <_printf_i>
 800780e:	e7eb      	b.n	80077e8 <_svfiprintf_r+0x1c0>
 8007810:	08009d31 	.word	0x08009d31
 8007814:	08009d37 	.word	0x08009d37
 8007818:	08009d3b 	.word	0x08009d3b
 800781c:	08004145 	.word	0x08004145
 8007820:	08007575 	.word	0x08007575

08007824 <__sflush_r>:
 8007824:	898a      	ldrh	r2, [r1, #12]
 8007826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007828:	4605      	mov	r5, r0
 800782a:	0710      	lsls	r0, r2, #28
 800782c:	460c      	mov	r4, r1
 800782e:	d457      	bmi.n	80078e0 <__sflush_r+0xbc>
 8007830:	684b      	ldr	r3, [r1, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	dc04      	bgt.n	8007840 <__sflush_r+0x1c>
 8007836:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007838:	2b00      	cmp	r3, #0
 800783a:	dc01      	bgt.n	8007840 <__sflush_r+0x1c>
 800783c:	2000      	movs	r0, #0
 800783e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007840:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007842:	2e00      	cmp	r6, #0
 8007844:	d0fa      	beq.n	800783c <__sflush_r+0x18>
 8007846:	2300      	movs	r3, #0
 8007848:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800784c:	682f      	ldr	r7, [r5, #0]
 800784e:	6a21      	ldr	r1, [r4, #32]
 8007850:	602b      	str	r3, [r5, #0]
 8007852:	d032      	beq.n	80078ba <__sflush_r+0x96>
 8007854:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007856:	89a3      	ldrh	r3, [r4, #12]
 8007858:	075a      	lsls	r2, r3, #29
 800785a:	d505      	bpl.n	8007868 <__sflush_r+0x44>
 800785c:	6863      	ldr	r3, [r4, #4]
 800785e:	1ac0      	subs	r0, r0, r3
 8007860:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007862:	b10b      	cbz	r3, 8007868 <__sflush_r+0x44>
 8007864:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007866:	1ac0      	subs	r0, r0, r3
 8007868:	2300      	movs	r3, #0
 800786a:	4602      	mov	r2, r0
 800786c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800786e:	4628      	mov	r0, r5
 8007870:	6a21      	ldr	r1, [r4, #32]
 8007872:	47b0      	blx	r6
 8007874:	1c43      	adds	r3, r0, #1
 8007876:	89a3      	ldrh	r3, [r4, #12]
 8007878:	d106      	bne.n	8007888 <__sflush_r+0x64>
 800787a:	6829      	ldr	r1, [r5, #0]
 800787c:	291d      	cmp	r1, #29
 800787e:	d82b      	bhi.n	80078d8 <__sflush_r+0xb4>
 8007880:	4a28      	ldr	r2, [pc, #160]	; (8007924 <__sflush_r+0x100>)
 8007882:	410a      	asrs	r2, r1
 8007884:	07d6      	lsls	r6, r2, #31
 8007886:	d427      	bmi.n	80078d8 <__sflush_r+0xb4>
 8007888:	2200      	movs	r2, #0
 800788a:	6062      	str	r2, [r4, #4]
 800788c:	6922      	ldr	r2, [r4, #16]
 800788e:	04d9      	lsls	r1, r3, #19
 8007890:	6022      	str	r2, [r4, #0]
 8007892:	d504      	bpl.n	800789e <__sflush_r+0x7a>
 8007894:	1c42      	adds	r2, r0, #1
 8007896:	d101      	bne.n	800789c <__sflush_r+0x78>
 8007898:	682b      	ldr	r3, [r5, #0]
 800789a:	b903      	cbnz	r3, 800789e <__sflush_r+0x7a>
 800789c:	6560      	str	r0, [r4, #84]	; 0x54
 800789e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078a0:	602f      	str	r7, [r5, #0]
 80078a2:	2900      	cmp	r1, #0
 80078a4:	d0ca      	beq.n	800783c <__sflush_r+0x18>
 80078a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078aa:	4299      	cmp	r1, r3
 80078ac:	d002      	beq.n	80078b4 <__sflush_r+0x90>
 80078ae:	4628      	mov	r0, r5
 80078b0:	f7fe fa2a 	bl	8005d08 <_free_r>
 80078b4:	2000      	movs	r0, #0
 80078b6:	6360      	str	r0, [r4, #52]	; 0x34
 80078b8:	e7c1      	b.n	800783e <__sflush_r+0x1a>
 80078ba:	2301      	movs	r3, #1
 80078bc:	4628      	mov	r0, r5
 80078be:	47b0      	blx	r6
 80078c0:	1c41      	adds	r1, r0, #1
 80078c2:	d1c8      	bne.n	8007856 <__sflush_r+0x32>
 80078c4:	682b      	ldr	r3, [r5, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d0c5      	beq.n	8007856 <__sflush_r+0x32>
 80078ca:	2b1d      	cmp	r3, #29
 80078cc:	d001      	beq.n	80078d2 <__sflush_r+0xae>
 80078ce:	2b16      	cmp	r3, #22
 80078d0:	d101      	bne.n	80078d6 <__sflush_r+0xb2>
 80078d2:	602f      	str	r7, [r5, #0]
 80078d4:	e7b2      	b.n	800783c <__sflush_r+0x18>
 80078d6:	89a3      	ldrh	r3, [r4, #12]
 80078d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078dc:	81a3      	strh	r3, [r4, #12]
 80078de:	e7ae      	b.n	800783e <__sflush_r+0x1a>
 80078e0:	690f      	ldr	r7, [r1, #16]
 80078e2:	2f00      	cmp	r7, #0
 80078e4:	d0aa      	beq.n	800783c <__sflush_r+0x18>
 80078e6:	0793      	lsls	r3, r2, #30
 80078e8:	bf18      	it	ne
 80078ea:	2300      	movne	r3, #0
 80078ec:	680e      	ldr	r6, [r1, #0]
 80078ee:	bf08      	it	eq
 80078f0:	694b      	ldreq	r3, [r1, #20]
 80078f2:	1bf6      	subs	r6, r6, r7
 80078f4:	600f      	str	r7, [r1, #0]
 80078f6:	608b      	str	r3, [r1, #8]
 80078f8:	2e00      	cmp	r6, #0
 80078fa:	dd9f      	ble.n	800783c <__sflush_r+0x18>
 80078fc:	4633      	mov	r3, r6
 80078fe:	463a      	mov	r2, r7
 8007900:	4628      	mov	r0, r5
 8007902:	6a21      	ldr	r1, [r4, #32]
 8007904:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007908:	47e0      	blx	ip
 800790a:	2800      	cmp	r0, #0
 800790c:	dc06      	bgt.n	800791c <__sflush_r+0xf8>
 800790e:	89a3      	ldrh	r3, [r4, #12]
 8007910:	f04f 30ff 	mov.w	r0, #4294967295
 8007914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007918:	81a3      	strh	r3, [r4, #12]
 800791a:	e790      	b.n	800783e <__sflush_r+0x1a>
 800791c:	4407      	add	r7, r0
 800791e:	1a36      	subs	r6, r6, r0
 8007920:	e7ea      	b.n	80078f8 <__sflush_r+0xd4>
 8007922:	bf00      	nop
 8007924:	dfbffffe 	.word	0xdfbffffe

08007928 <_fflush_r>:
 8007928:	b538      	push	{r3, r4, r5, lr}
 800792a:	690b      	ldr	r3, [r1, #16]
 800792c:	4605      	mov	r5, r0
 800792e:	460c      	mov	r4, r1
 8007930:	b913      	cbnz	r3, 8007938 <_fflush_r+0x10>
 8007932:	2500      	movs	r5, #0
 8007934:	4628      	mov	r0, r5
 8007936:	bd38      	pop	{r3, r4, r5, pc}
 8007938:	b118      	cbz	r0, 8007942 <_fflush_r+0x1a>
 800793a:	6a03      	ldr	r3, [r0, #32]
 800793c:	b90b      	cbnz	r3, 8007942 <_fflush_r+0x1a>
 800793e:	f7fd fa4b 	bl	8004dd8 <__sinit>
 8007942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d0f3      	beq.n	8007932 <_fflush_r+0xa>
 800794a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800794c:	07d0      	lsls	r0, r2, #31
 800794e:	d404      	bmi.n	800795a <_fflush_r+0x32>
 8007950:	0599      	lsls	r1, r3, #22
 8007952:	d402      	bmi.n	800795a <_fflush_r+0x32>
 8007954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007956:	f7fd fb55 	bl	8005004 <__retarget_lock_acquire_recursive>
 800795a:	4628      	mov	r0, r5
 800795c:	4621      	mov	r1, r4
 800795e:	f7ff ff61 	bl	8007824 <__sflush_r>
 8007962:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007964:	4605      	mov	r5, r0
 8007966:	07da      	lsls	r2, r3, #31
 8007968:	d4e4      	bmi.n	8007934 <_fflush_r+0xc>
 800796a:	89a3      	ldrh	r3, [r4, #12]
 800796c:	059b      	lsls	r3, r3, #22
 800796e:	d4e1      	bmi.n	8007934 <_fflush_r+0xc>
 8007970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007972:	f7fd fb48 	bl	8005006 <__retarget_lock_release_recursive>
 8007976:	e7dd      	b.n	8007934 <_fflush_r+0xc>

08007978 <memmove>:
 8007978:	4288      	cmp	r0, r1
 800797a:	b510      	push	{r4, lr}
 800797c:	eb01 0402 	add.w	r4, r1, r2
 8007980:	d902      	bls.n	8007988 <memmove+0x10>
 8007982:	4284      	cmp	r4, r0
 8007984:	4623      	mov	r3, r4
 8007986:	d807      	bhi.n	8007998 <memmove+0x20>
 8007988:	1e43      	subs	r3, r0, #1
 800798a:	42a1      	cmp	r1, r4
 800798c:	d008      	beq.n	80079a0 <memmove+0x28>
 800798e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007992:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007996:	e7f8      	b.n	800798a <memmove+0x12>
 8007998:	4601      	mov	r1, r0
 800799a:	4402      	add	r2, r0
 800799c:	428a      	cmp	r2, r1
 800799e:	d100      	bne.n	80079a2 <memmove+0x2a>
 80079a0:	bd10      	pop	{r4, pc}
 80079a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079aa:	e7f7      	b.n	800799c <memmove+0x24>

080079ac <strncmp>:
 80079ac:	b510      	push	{r4, lr}
 80079ae:	b16a      	cbz	r2, 80079cc <strncmp+0x20>
 80079b0:	3901      	subs	r1, #1
 80079b2:	1884      	adds	r4, r0, r2
 80079b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079b8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80079bc:	429a      	cmp	r2, r3
 80079be:	d103      	bne.n	80079c8 <strncmp+0x1c>
 80079c0:	42a0      	cmp	r0, r4
 80079c2:	d001      	beq.n	80079c8 <strncmp+0x1c>
 80079c4:	2a00      	cmp	r2, #0
 80079c6:	d1f5      	bne.n	80079b4 <strncmp+0x8>
 80079c8:	1ad0      	subs	r0, r2, r3
 80079ca:	bd10      	pop	{r4, pc}
 80079cc:	4610      	mov	r0, r2
 80079ce:	e7fc      	b.n	80079ca <strncmp+0x1e>

080079d0 <_sbrk_r>:
 80079d0:	b538      	push	{r3, r4, r5, lr}
 80079d2:	2300      	movs	r3, #0
 80079d4:	4d05      	ldr	r5, [pc, #20]	; (80079ec <_sbrk_r+0x1c>)
 80079d6:	4604      	mov	r4, r0
 80079d8:	4608      	mov	r0, r1
 80079da:	602b      	str	r3, [r5, #0]
 80079dc:	f7f9 ffb6 	bl	800194c <_sbrk>
 80079e0:	1c43      	adds	r3, r0, #1
 80079e2:	d102      	bne.n	80079ea <_sbrk_r+0x1a>
 80079e4:	682b      	ldr	r3, [r5, #0]
 80079e6:	b103      	cbz	r3, 80079ea <_sbrk_r+0x1a>
 80079e8:	6023      	str	r3, [r4, #0]
 80079ea:	bd38      	pop	{r3, r4, r5, pc}
 80079ec:	20000414 	.word	0x20000414

080079f0 <memcpy>:
 80079f0:	440a      	add	r2, r1
 80079f2:	4291      	cmp	r1, r2
 80079f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80079f8:	d100      	bne.n	80079fc <memcpy+0xc>
 80079fa:	4770      	bx	lr
 80079fc:	b510      	push	{r4, lr}
 80079fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a02:	4291      	cmp	r1, r2
 8007a04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a08:	d1f9      	bne.n	80079fe <memcpy+0xe>
 8007a0a:	bd10      	pop	{r4, pc}

08007a0c <nan>:
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	4901      	ldr	r1, [pc, #4]	; (8007a14 <nan+0x8>)
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	7ff80000 	.word	0x7ff80000

08007a18 <__assert_func>:
 8007a18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a1a:	4614      	mov	r4, r2
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	4b09      	ldr	r3, [pc, #36]	; (8007a44 <__assert_func+0x2c>)
 8007a20:	4605      	mov	r5, r0
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68d8      	ldr	r0, [r3, #12]
 8007a26:	b14c      	cbz	r4, 8007a3c <__assert_func+0x24>
 8007a28:	4b07      	ldr	r3, [pc, #28]	; (8007a48 <__assert_func+0x30>)
 8007a2a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a2e:	9100      	str	r1, [sp, #0]
 8007a30:	462b      	mov	r3, r5
 8007a32:	4906      	ldr	r1, [pc, #24]	; (8007a4c <__assert_func+0x34>)
 8007a34:	f000 fbca 	bl	80081cc <fiprintf>
 8007a38:	f000 fbda 	bl	80081f0 <abort>
 8007a3c:	4b04      	ldr	r3, [pc, #16]	; (8007a50 <__assert_func+0x38>)
 8007a3e:	461c      	mov	r4, r3
 8007a40:	e7f3      	b.n	8007a2a <__assert_func+0x12>
 8007a42:	bf00      	nop
 8007a44:	20000064 	.word	0x20000064
 8007a48:	08009d4a 	.word	0x08009d4a
 8007a4c:	08009d57 	.word	0x08009d57
 8007a50:	08009d85 	.word	0x08009d85

08007a54 <_calloc_r>:
 8007a54:	b570      	push	{r4, r5, r6, lr}
 8007a56:	fba1 5402 	umull	r5, r4, r1, r2
 8007a5a:	b934      	cbnz	r4, 8007a6a <_calloc_r+0x16>
 8007a5c:	4629      	mov	r1, r5
 8007a5e:	f7fe f9c3 	bl	8005de8 <_malloc_r>
 8007a62:	4606      	mov	r6, r0
 8007a64:	b928      	cbnz	r0, 8007a72 <_calloc_r+0x1e>
 8007a66:	4630      	mov	r0, r6
 8007a68:	bd70      	pop	{r4, r5, r6, pc}
 8007a6a:	220c      	movs	r2, #12
 8007a6c:	2600      	movs	r6, #0
 8007a6e:	6002      	str	r2, [r0, #0]
 8007a70:	e7f9      	b.n	8007a66 <_calloc_r+0x12>
 8007a72:	462a      	mov	r2, r5
 8007a74:	4621      	mov	r1, r4
 8007a76:	f7fd fa48 	bl	8004f0a <memset>
 8007a7a:	e7f4      	b.n	8007a66 <_calloc_r+0x12>

08007a7c <rshift>:
 8007a7c:	6903      	ldr	r3, [r0, #16]
 8007a7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a82:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007a86:	f100 0414 	add.w	r4, r0, #20
 8007a8a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007a8e:	dd46      	ble.n	8007b1e <rshift+0xa2>
 8007a90:	f011 011f 	ands.w	r1, r1, #31
 8007a94:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007a98:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007a9c:	d10c      	bne.n	8007ab8 <rshift+0x3c>
 8007a9e:	4629      	mov	r1, r5
 8007aa0:	f100 0710 	add.w	r7, r0, #16
 8007aa4:	42b1      	cmp	r1, r6
 8007aa6:	d335      	bcc.n	8007b14 <rshift+0x98>
 8007aa8:	1a9b      	subs	r3, r3, r2
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	1eea      	subs	r2, r5, #3
 8007aae:	4296      	cmp	r6, r2
 8007ab0:	bf38      	it	cc
 8007ab2:	2300      	movcc	r3, #0
 8007ab4:	4423      	add	r3, r4
 8007ab6:	e015      	b.n	8007ae4 <rshift+0x68>
 8007ab8:	46a1      	mov	r9, r4
 8007aba:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007abe:	f1c1 0820 	rsb	r8, r1, #32
 8007ac2:	40cf      	lsrs	r7, r1
 8007ac4:	f105 0e04 	add.w	lr, r5, #4
 8007ac8:	4576      	cmp	r6, lr
 8007aca:	46f4      	mov	ip, lr
 8007acc:	d816      	bhi.n	8007afc <rshift+0x80>
 8007ace:	1a9a      	subs	r2, r3, r2
 8007ad0:	0092      	lsls	r2, r2, #2
 8007ad2:	3a04      	subs	r2, #4
 8007ad4:	3501      	adds	r5, #1
 8007ad6:	42ae      	cmp	r6, r5
 8007ad8:	bf38      	it	cc
 8007ada:	2200      	movcc	r2, #0
 8007adc:	18a3      	adds	r3, r4, r2
 8007ade:	50a7      	str	r7, [r4, r2]
 8007ae0:	b107      	cbz	r7, 8007ae4 <rshift+0x68>
 8007ae2:	3304      	adds	r3, #4
 8007ae4:	42a3      	cmp	r3, r4
 8007ae6:	eba3 0204 	sub.w	r2, r3, r4
 8007aea:	bf08      	it	eq
 8007aec:	2300      	moveq	r3, #0
 8007aee:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007af2:	6102      	str	r2, [r0, #16]
 8007af4:	bf08      	it	eq
 8007af6:	6143      	streq	r3, [r0, #20]
 8007af8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007afc:	f8dc c000 	ldr.w	ip, [ip]
 8007b00:	fa0c fc08 	lsl.w	ip, ip, r8
 8007b04:	ea4c 0707 	orr.w	r7, ip, r7
 8007b08:	f849 7b04 	str.w	r7, [r9], #4
 8007b0c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007b10:	40cf      	lsrs	r7, r1
 8007b12:	e7d9      	b.n	8007ac8 <rshift+0x4c>
 8007b14:	f851 cb04 	ldr.w	ip, [r1], #4
 8007b18:	f847 cf04 	str.w	ip, [r7, #4]!
 8007b1c:	e7c2      	b.n	8007aa4 <rshift+0x28>
 8007b1e:	4623      	mov	r3, r4
 8007b20:	e7e0      	b.n	8007ae4 <rshift+0x68>

08007b22 <__hexdig_fun>:
 8007b22:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007b26:	2b09      	cmp	r3, #9
 8007b28:	d802      	bhi.n	8007b30 <__hexdig_fun+0xe>
 8007b2a:	3820      	subs	r0, #32
 8007b2c:	b2c0      	uxtb	r0, r0
 8007b2e:	4770      	bx	lr
 8007b30:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007b34:	2b05      	cmp	r3, #5
 8007b36:	d801      	bhi.n	8007b3c <__hexdig_fun+0x1a>
 8007b38:	3847      	subs	r0, #71	; 0x47
 8007b3a:	e7f7      	b.n	8007b2c <__hexdig_fun+0xa>
 8007b3c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007b40:	2b05      	cmp	r3, #5
 8007b42:	d801      	bhi.n	8007b48 <__hexdig_fun+0x26>
 8007b44:	3827      	subs	r0, #39	; 0x27
 8007b46:	e7f1      	b.n	8007b2c <__hexdig_fun+0xa>
 8007b48:	2000      	movs	r0, #0
 8007b4a:	4770      	bx	lr

08007b4c <__gethex>:
 8007b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b50:	4681      	mov	r9, r0
 8007b52:	468a      	mov	sl, r1
 8007b54:	4617      	mov	r7, r2
 8007b56:	680a      	ldr	r2, [r1, #0]
 8007b58:	b085      	sub	sp, #20
 8007b5a:	f102 0b02 	add.w	fp, r2, #2
 8007b5e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007b62:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007b66:	9302      	str	r3, [sp, #8]
 8007b68:	32fe      	adds	r2, #254	; 0xfe
 8007b6a:	eb02 030b 	add.w	r3, r2, fp
 8007b6e:	46d8      	mov	r8, fp
 8007b70:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8007b74:	9301      	str	r3, [sp, #4]
 8007b76:	2830      	cmp	r0, #48	; 0x30
 8007b78:	d0f7      	beq.n	8007b6a <__gethex+0x1e>
 8007b7a:	f7ff ffd2 	bl	8007b22 <__hexdig_fun>
 8007b7e:	4604      	mov	r4, r0
 8007b80:	2800      	cmp	r0, #0
 8007b82:	d138      	bne.n	8007bf6 <__gethex+0xaa>
 8007b84:	2201      	movs	r2, #1
 8007b86:	4640      	mov	r0, r8
 8007b88:	49a7      	ldr	r1, [pc, #668]	; (8007e28 <__gethex+0x2dc>)
 8007b8a:	f7ff ff0f 	bl	80079ac <strncmp>
 8007b8e:	4606      	mov	r6, r0
 8007b90:	2800      	cmp	r0, #0
 8007b92:	d169      	bne.n	8007c68 <__gethex+0x11c>
 8007b94:	f898 0001 	ldrb.w	r0, [r8, #1]
 8007b98:	465d      	mov	r5, fp
 8007b9a:	f7ff ffc2 	bl	8007b22 <__hexdig_fun>
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	d064      	beq.n	8007c6c <__gethex+0x120>
 8007ba2:	465a      	mov	r2, fp
 8007ba4:	7810      	ldrb	r0, [r2, #0]
 8007ba6:	4690      	mov	r8, r2
 8007ba8:	2830      	cmp	r0, #48	; 0x30
 8007baa:	f102 0201 	add.w	r2, r2, #1
 8007bae:	d0f9      	beq.n	8007ba4 <__gethex+0x58>
 8007bb0:	f7ff ffb7 	bl	8007b22 <__hexdig_fun>
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	fab0 f480 	clz	r4, r0
 8007bba:	465e      	mov	r6, fp
 8007bbc:	0964      	lsrs	r4, r4, #5
 8007bbe:	9301      	str	r3, [sp, #4]
 8007bc0:	4642      	mov	r2, r8
 8007bc2:	4615      	mov	r5, r2
 8007bc4:	7828      	ldrb	r0, [r5, #0]
 8007bc6:	3201      	adds	r2, #1
 8007bc8:	f7ff ffab 	bl	8007b22 <__hexdig_fun>
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	d1f8      	bne.n	8007bc2 <__gethex+0x76>
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	4628      	mov	r0, r5
 8007bd4:	4994      	ldr	r1, [pc, #592]	; (8007e28 <__gethex+0x2dc>)
 8007bd6:	f7ff fee9 	bl	80079ac <strncmp>
 8007bda:	b978      	cbnz	r0, 8007bfc <__gethex+0xb0>
 8007bdc:	b946      	cbnz	r6, 8007bf0 <__gethex+0xa4>
 8007bde:	1c6e      	adds	r6, r5, #1
 8007be0:	4632      	mov	r2, r6
 8007be2:	4615      	mov	r5, r2
 8007be4:	7828      	ldrb	r0, [r5, #0]
 8007be6:	3201      	adds	r2, #1
 8007be8:	f7ff ff9b 	bl	8007b22 <__hexdig_fun>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	d1f8      	bne.n	8007be2 <__gethex+0x96>
 8007bf0:	1b73      	subs	r3, r6, r5
 8007bf2:	009e      	lsls	r6, r3, #2
 8007bf4:	e004      	b.n	8007c00 <__gethex+0xb4>
 8007bf6:	2400      	movs	r4, #0
 8007bf8:	4626      	mov	r6, r4
 8007bfa:	e7e1      	b.n	8007bc0 <__gethex+0x74>
 8007bfc:	2e00      	cmp	r6, #0
 8007bfe:	d1f7      	bne.n	8007bf0 <__gethex+0xa4>
 8007c00:	782b      	ldrb	r3, [r5, #0]
 8007c02:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007c06:	2b50      	cmp	r3, #80	; 0x50
 8007c08:	d13d      	bne.n	8007c86 <__gethex+0x13a>
 8007c0a:	786b      	ldrb	r3, [r5, #1]
 8007c0c:	2b2b      	cmp	r3, #43	; 0x2b
 8007c0e:	d02f      	beq.n	8007c70 <__gethex+0x124>
 8007c10:	2b2d      	cmp	r3, #45	; 0x2d
 8007c12:	d031      	beq.n	8007c78 <__gethex+0x12c>
 8007c14:	f04f 0b00 	mov.w	fp, #0
 8007c18:	1c69      	adds	r1, r5, #1
 8007c1a:	7808      	ldrb	r0, [r1, #0]
 8007c1c:	f7ff ff81 	bl	8007b22 <__hexdig_fun>
 8007c20:	1e42      	subs	r2, r0, #1
 8007c22:	b2d2      	uxtb	r2, r2
 8007c24:	2a18      	cmp	r2, #24
 8007c26:	d82e      	bhi.n	8007c86 <__gethex+0x13a>
 8007c28:	f1a0 0210 	sub.w	r2, r0, #16
 8007c2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007c30:	f7ff ff77 	bl	8007b22 <__hexdig_fun>
 8007c34:	f100 3cff 	add.w	ip, r0, #4294967295
 8007c38:	fa5f fc8c 	uxtb.w	ip, ip
 8007c3c:	f1bc 0f18 	cmp.w	ip, #24
 8007c40:	d91d      	bls.n	8007c7e <__gethex+0x132>
 8007c42:	f1bb 0f00 	cmp.w	fp, #0
 8007c46:	d000      	beq.n	8007c4a <__gethex+0xfe>
 8007c48:	4252      	negs	r2, r2
 8007c4a:	4416      	add	r6, r2
 8007c4c:	f8ca 1000 	str.w	r1, [sl]
 8007c50:	b1dc      	cbz	r4, 8007c8a <__gethex+0x13e>
 8007c52:	9b01      	ldr	r3, [sp, #4]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	bf14      	ite	ne
 8007c58:	f04f 0800 	movne.w	r8, #0
 8007c5c:	f04f 0806 	moveq.w	r8, #6
 8007c60:	4640      	mov	r0, r8
 8007c62:	b005      	add	sp, #20
 8007c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c68:	4645      	mov	r5, r8
 8007c6a:	4626      	mov	r6, r4
 8007c6c:	2401      	movs	r4, #1
 8007c6e:	e7c7      	b.n	8007c00 <__gethex+0xb4>
 8007c70:	f04f 0b00 	mov.w	fp, #0
 8007c74:	1ca9      	adds	r1, r5, #2
 8007c76:	e7d0      	b.n	8007c1a <__gethex+0xce>
 8007c78:	f04f 0b01 	mov.w	fp, #1
 8007c7c:	e7fa      	b.n	8007c74 <__gethex+0x128>
 8007c7e:	230a      	movs	r3, #10
 8007c80:	fb03 0002 	mla	r0, r3, r2, r0
 8007c84:	e7d0      	b.n	8007c28 <__gethex+0xdc>
 8007c86:	4629      	mov	r1, r5
 8007c88:	e7e0      	b.n	8007c4c <__gethex+0x100>
 8007c8a:	4621      	mov	r1, r4
 8007c8c:	eba5 0308 	sub.w	r3, r5, r8
 8007c90:	3b01      	subs	r3, #1
 8007c92:	2b07      	cmp	r3, #7
 8007c94:	dc0a      	bgt.n	8007cac <__gethex+0x160>
 8007c96:	4648      	mov	r0, r9
 8007c98:	f7fe f932 	bl	8005f00 <_Balloc>
 8007c9c:	4604      	mov	r4, r0
 8007c9e:	b940      	cbnz	r0, 8007cb2 <__gethex+0x166>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	21e4      	movs	r1, #228	; 0xe4
 8007ca4:	4b61      	ldr	r3, [pc, #388]	; (8007e2c <__gethex+0x2e0>)
 8007ca6:	4862      	ldr	r0, [pc, #392]	; (8007e30 <__gethex+0x2e4>)
 8007ca8:	f7ff feb6 	bl	8007a18 <__assert_func>
 8007cac:	3101      	adds	r1, #1
 8007cae:	105b      	asrs	r3, r3, #1
 8007cb0:	e7ef      	b.n	8007c92 <__gethex+0x146>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	469b      	mov	fp, r3
 8007cb6:	f100 0a14 	add.w	sl, r0, #20
 8007cba:	f8cd a004 	str.w	sl, [sp, #4]
 8007cbe:	45a8      	cmp	r8, r5
 8007cc0:	d344      	bcc.n	8007d4c <__gethex+0x200>
 8007cc2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007cc6:	4658      	mov	r0, fp
 8007cc8:	f848 bb04 	str.w	fp, [r8], #4
 8007ccc:	eba8 080a 	sub.w	r8, r8, sl
 8007cd0:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8007cd4:	6122      	str	r2, [r4, #16]
 8007cd6:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8007cda:	f7fe fa03 	bl	80060e4 <__hi0bits>
 8007cde:	683d      	ldr	r5, [r7, #0]
 8007ce0:	eba8 0800 	sub.w	r8, r8, r0
 8007ce4:	45a8      	cmp	r8, r5
 8007ce6:	dd59      	ble.n	8007d9c <__gethex+0x250>
 8007ce8:	eba8 0805 	sub.w	r8, r8, r5
 8007cec:	4641      	mov	r1, r8
 8007cee:	4620      	mov	r0, r4
 8007cf0:	f7fe fd81 	bl	80067f6 <__any_on>
 8007cf4:	4683      	mov	fp, r0
 8007cf6:	b1b8      	cbz	r0, 8007d28 <__gethex+0x1dc>
 8007cf8:	f04f 0b01 	mov.w	fp, #1
 8007cfc:	f108 33ff 	add.w	r3, r8, #4294967295
 8007d00:	1159      	asrs	r1, r3, #5
 8007d02:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007d06:	f003 021f 	and.w	r2, r3, #31
 8007d0a:	fa0b f202 	lsl.w	r2, fp, r2
 8007d0e:	420a      	tst	r2, r1
 8007d10:	d00a      	beq.n	8007d28 <__gethex+0x1dc>
 8007d12:	455b      	cmp	r3, fp
 8007d14:	dd06      	ble.n	8007d24 <__gethex+0x1d8>
 8007d16:	4620      	mov	r0, r4
 8007d18:	f1a8 0102 	sub.w	r1, r8, #2
 8007d1c:	f7fe fd6b 	bl	80067f6 <__any_on>
 8007d20:	2800      	cmp	r0, #0
 8007d22:	d138      	bne.n	8007d96 <__gethex+0x24a>
 8007d24:	f04f 0b02 	mov.w	fp, #2
 8007d28:	4641      	mov	r1, r8
 8007d2a:	4620      	mov	r0, r4
 8007d2c:	f7ff fea6 	bl	8007a7c <rshift>
 8007d30:	4446      	add	r6, r8
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	42b3      	cmp	r3, r6
 8007d36:	da41      	bge.n	8007dbc <__gethex+0x270>
 8007d38:	4621      	mov	r1, r4
 8007d3a:	4648      	mov	r0, r9
 8007d3c:	f7fe f920 	bl	8005f80 <_Bfree>
 8007d40:	2300      	movs	r3, #0
 8007d42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d44:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8007d48:	6013      	str	r3, [r2, #0]
 8007d4a:	e789      	b.n	8007c60 <__gethex+0x114>
 8007d4c:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8007d50:	2a2e      	cmp	r2, #46	; 0x2e
 8007d52:	d014      	beq.n	8007d7e <__gethex+0x232>
 8007d54:	2b20      	cmp	r3, #32
 8007d56:	d106      	bne.n	8007d66 <__gethex+0x21a>
 8007d58:	9b01      	ldr	r3, [sp, #4]
 8007d5a:	f843 bb04 	str.w	fp, [r3], #4
 8007d5e:	f04f 0b00 	mov.w	fp, #0
 8007d62:	9301      	str	r3, [sp, #4]
 8007d64:	465b      	mov	r3, fp
 8007d66:	7828      	ldrb	r0, [r5, #0]
 8007d68:	9303      	str	r3, [sp, #12]
 8007d6a:	f7ff feda 	bl	8007b22 <__hexdig_fun>
 8007d6e:	9b03      	ldr	r3, [sp, #12]
 8007d70:	f000 000f 	and.w	r0, r0, #15
 8007d74:	4098      	lsls	r0, r3
 8007d76:	ea4b 0b00 	orr.w	fp, fp, r0
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	e79f      	b.n	8007cbe <__gethex+0x172>
 8007d7e:	45a8      	cmp	r8, r5
 8007d80:	d8e8      	bhi.n	8007d54 <__gethex+0x208>
 8007d82:	2201      	movs	r2, #1
 8007d84:	4628      	mov	r0, r5
 8007d86:	4928      	ldr	r1, [pc, #160]	; (8007e28 <__gethex+0x2dc>)
 8007d88:	9303      	str	r3, [sp, #12]
 8007d8a:	f7ff fe0f 	bl	80079ac <strncmp>
 8007d8e:	9b03      	ldr	r3, [sp, #12]
 8007d90:	2800      	cmp	r0, #0
 8007d92:	d1df      	bne.n	8007d54 <__gethex+0x208>
 8007d94:	e793      	b.n	8007cbe <__gethex+0x172>
 8007d96:	f04f 0b03 	mov.w	fp, #3
 8007d9a:	e7c5      	b.n	8007d28 <__gethex+0x1dc>
 8007d9c:	da0b      	bge.n	8007db6 <__gethex+0x26a>
 8007d9e:	eba5 0808 	sub.w	r8, r5, r8
 8007da2:	4621      	mov	r1, r4
 8007da4:	4642      	mov	r2, r8
 8007da6:	4648      	mov	r0, r9
 8007da8:	f7fe fb02 	bl	80063b0 <__lshift>
 8007dac:	4604      	mov	r4, r0
 8007dae:	eba6 0608 	sub.w	r6, r6, r8
 8007db2:	f100 0a14 	add.w	sl, r0, #20
 8007db6:	f04f 0b00 	mov.w	fp, #0
 8007dba:	e7ba      	b.n	8007d32 <__gethex+0x1e6>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	42b3      	cmp	r3, r6
 8007dc0:	dd74      	ble.n	8007eac <__gethex+0x360>
 8007dc2:	1b9e      	subs	r6, r3, r6
 8007dc4:	42b5      	cmp	r5, r6
 8007dc6:	dc35      	bgt.n	8007e34 <__gethex+0x2e8>
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d023      	beq.n	8007e16 <__gethex+0x2ca>
 8007dce:	2b03      	cmp	r3, #3
 8007dd0:	d025      	beq.n	8007e1e <__gethex+0x2d2>
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d115      	bne.n	8007e02 <__gethex+0x2b6>
 8007dd6:	42b5      	cmp	r5, r6
 8007dd8:	d113      	bne.n	8007e02 <__gethex+0x2b6>
 8007dda:	2d01      	cmp	r5, #1
 8007ddc:	d10b      	bne.n	8007df6 <__gethex+0x2aa>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	9a02      	ldr	r2, [sp, #8]
 8007de2:	f04f 0862 	mov.w	r8, #98	; 0x62
 8007de6:	6013      	str	r3, [r2, #0]
 8007de8:	2301      	movs	r3, #1
 8007dea:	6123      	str	r3, [r4, #16]
 8007dec:	f8ca 3000 	str.w	r3, [sl]
 8007df0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007df2:	601c      	str	r4, [r3, #0]
 8007df4:	e734      	b.n	8007c60 <__gethex+0x114>
 8007df6:	4620      	mov	r0, r4
 8007df8:	1e69      	subs	r1, r5, #1
 8007dfa:	f7fe fcfc 	bl	80067f6 <__any_on>
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	d1ed      	bne.n	8007dde <__gethex+0x292>
 8007e02:	4621      	mov	r1, r4
 8007e04:	4648      	mov	r0, r9
 8007e06:	f7fe f8bb 	bl	8005f80 <_Bfree>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e0e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8007e12:	6013      	str	r3, [r2, #0]
 8007e14:	e724      	b.n	8007c60 <__gethex+0x114>
 8007e16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d1f2      	bne.n	8007e02 <__gethex+0x2b6>
 8007e1c:	e7df      	b.n	8007dde <__gethex+0x292>
 8007e1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d1dc      	bne.n	8007dde <__gethex+0x292>
 8007e24:	e7ed      	b.n	8007e02 <__gethex+0x2b6>
 8007e26:	bf00      	nop
 8007e28:	08009bdc 	.word	0x08009bdc
 8007e2c:	08009a6f 	.word	0x08009a6f
 8007e30:	08009d86 	.word	0x08009d86
 8007e34:	f106 38ff 	add.w	r8, r6, #4294967295
 8007e38:	f1bb 0f00 	cmp.w	fp, #0
 8007e3c:	d133      	bne.n	8007ea6 <__gethex+0x35a>
 8007e3e:	f1b8 0f00 	cmp.w	r8, #0
 8007e42:	d004      	beq.n	8007e4e <__gethex+0x302>
 8007e44:	4641      	mov	r1, r8
 8007e46:	4620      	mov	r0, r4
 8007e48:	f7fe fcd5 	bl	80067f6 <__any_on>
 8007e4c:	4683      	mov	fp, r0
 8007e4e:	2301      	movs	r3, #1
 8007e50:	ea4f 1268 	mov.w	r2, r8, asr #5
 8007e54:	f008 081f 	and.w	r8, r8, #31
 8007e58:	fa03 f308 	lsl.w	r3, r3, r8
 8007e5c:	f04f 0802 	mov.w	r8, #2
 8007e60:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007e64:	4631      	mov	r1, r6
 8007e66:	4213      	tst	r3, r2
 8007e68:	4620      	mov	r0, r4
 8007e6a:	bf18      	it	ne
 8007e6c:	f04b 0b02 	orrne.w	fp, fp, #2
 8007e70:	1bad      	subs	r5, r5, r6
 8007e72:	f7ff fe03 	bl	8007a7c <rshift>
 8007e76:	687e      	ldr	r6, [r7, #4]
 8007e78:	f1bb 0f00 	cmp.w	fp, #0
 8007e7c:	d04a      	beq.n	8007f14 <__gethex+0x3c8>
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	d016      	beq.n	8007eb2 <__gethex+0x366>
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d018      	beq.n	8007eba <__gethex+0x36e>
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d109      	bne.n	8007ea0 <__gethex+0x354>
 8007e8c:	f01b 0f02 	tst.w	fp, #2
 8007e90:	d006      	beq.n	8007ea0 <__gethex+0x354>
 8007e92:	f8da 3000 	ldr.w	r3, [sl]
 8007e96:	ea4b 0b03 	orr.w	fp, fp, r3
 8007e9a:	f01b 0f01 	tst.w	fp, #1
 8007e9e:	d10f      	bne.n	8007ec0 <__gethex+0x374>
 8007ea0:	f048 0810 	orr.w	r8, r8, #16
 8007ea4:	e036      	b.n	8007f14 <__gethex+0x3c8>
 8007ea6:	f04f 0b01 	mov.w	fp, #1
 8007eaa:	e7d0      	b.n	8007e4e <__gethex+0x302>
 8007eac:	f04f 0801 	mov.w	r8, #1
 8007eb0:	e7e2      	b.n	8007e78 <__gethex+0x32c>
 8007eb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007eb4:	f1c3 0301 	rsb	r3, r3, #1
 8007eb8:	930f      	str	r3, [sp, #60]	; 0x3c
 8007eba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d0ef      	beq.n	8007ea0 <__gethex+0x354>
 8007ec0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007ec4:	f104 0214 	add.w	r2, r4, #20
 8007ec8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8007ecc:	9301      	str	r3, [sp, #4]
 8007ece:	2300      	movs	r3, #0
 8007ed0:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8007ed4:	4694      	mov	ip, r2
 8007ed6:	f852 1b04 	ldr.w	r1, [r2], #4
 8007eda:	f1b1 3fff 	cmp.w	r1, #4294967295
 8007ede:	d01e      	beq.n	8007f1e <__gethex+0x3d2>
 8007ee0:	3101      	adds	r1, #1
 8007ee2:	f8cc 1000 	str.w	r1, [ip]
 8007ee6:	f1b8 0f02 	cmp.w	r8, #2
 8007eea:	f104 0214 	add.w	r2, r4, #20
 8007eee:	d13d      	bne.n	8007f6c <__gethex+0x420>
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	42ab      	cmp	r3, r5
 8007ef6:	d10b      	bne.n	8007f10 <__gethex+0x3c4>
 8007ef8:	2301      	movs	r3, #1
 8007efa:	1169      	asrs	r1, r5, #5
 8007efc:	f005 051f 	and.w	r5, r5, #31
 8007f00:	fa03 f505 	lsl.w	r5, r3, r5
 8007f04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f08:	421d      	tst	r5, r3
 8007f0a:	bf18      	it	ne
 8007f0c:	f04f 0801 	movne.w	r8, #1
 8007f10:	f048 0820 	orr.w	r8, r8, #32
 8007f14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f16:	601c      	str	r4, [r3, #0]
 8007f18:	9b02      	ldr	r3, [sp, #8]
 8007f1a:	601e      	str	r6, [r3, #0]
 8007f1c:	e6a0      	b.n	8007c60 <__gethex+0x114>
 8007f1e:	4290      	cmp	r0, r2
 8007f20:	f842 3c04 	str.w	r3, [r2, #-4]
 8007f24:	d8d6      	bhi.n	8007ed4 <__gethex+0x388>
 8007f26:	68a2      	ldr	r2, [r4, #8]
 8007f28:	4593      	cmp	fp, r2
 8007f2a:	db17      	blt.n	8007f5c <__gethex+0x410>
 8007f2c:	6861      	ldr	r1, [r4, #4]
 8007f2e:	4648      	mov	r0, r9
 8007f30:	3101      	adds	r1, #1
 8007f32:	f7fd ffe5 	bl	8005f00 <_Balloc>
 8007f36:	4682      	mov	sl, r0
 8007f38:	b918      	cbnz	r0, 8007f42 <__gethex+0x3f6>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	2184      	movs	r1, #132	; 0x84
 8007f3e:	4b1a      	ldr	r3, [pc, #104]	; (8007fa8 <__gethex+0x45c>)
 8007f40:	e6b1      	b.n	8007ca6 <__gethex+0x15a>
 8007f42:	6922      	ldr	r2, [r4, #16]
 8007f44:	f104 010c 	add.w	r1, r4, #12
 8007f48:	3202      	adds	r2, #2
 8007f4a:	0092      	lsls	r2, r2, #2
 8007f4c:	300c      	adds	r0, #12
 8007f4e:	f7ff fd4f 	bl	80079f0 <memcpy>
 8007f52:	4621      	mov	r1, r4
 8007f54:	4648      	mov	r0, r9
 8007f56:	f7fe f813 	bl	8005f80 <_Bfree>
 8007f5a:	4654      	mov	r4, sl
 8007f5c:	6922      	ldr	r2, [r4, #16]
 8007f5e:	1c51      	adds	r1, r2, #1
 8007f60:	6121      	str	r1, [r4, #16]
 8007f62:	2101      	movs	r1, #1
 8007f64:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007f68:	6151      	str	r1, [r2, #20]
 8007f6a:	e7bc      	b.n	8007ee6 <__gethex+0x39a>
 8007f6c:	6921      	ldr	r1, [r4, #16]
 8007f6e:	4559      	cmp	r1, fp
 8007f70:	dd0b      	ble.n	8007f8a <__gethex+0x43e>
 8007f72:	2101      	movs	r1, #1
 8007f74:	4620      	mov	r0, r4
 8007f76:	f7ff fd81 	bl	8007a7c <rshift>
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	3601      	adds	r6, #1
 8007f7e:	42b3      	cmp	r3, r6
 8007f80:	f6ff aeda 	blt.w	8007d38 <__gethex+0x1ec>
 8007f84:	f04f 0801 	mov.w	r8, #1
 8007f88:	e7c2      	b.n	8007f10 <__gethex+0x3c4>
 8007f8a:	f015 051f 	ands.w	r5, r5, #31
 8007f8e:	d0f9      	beq.n	8007f84 <__gethex+0x438>
 8007f90:	9b01      	ldr	r3, [sp, #4]
 8007f92:	f1c5 0520 	rsb	r5, r5, #32
 8007f96:	441a      	add	r2, r3
 8007f98:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8007f9c:	f7fe f8a2 	bl	80060e4 <__hi0bits>
 8007fa0:	42a8      	cmp	r0, r5
 8007fa2:	dbe6      	blt.n	8007f72 <__gethex+0x426>
 8007fa4:	e7ee      	b.n	8007f84 <__gethex+0x438>
 8007fa6:	bf00      	nop
 8007fa8:	08009a6f 	.word	0x08009a6f

08007fac <L_shift>:
 8007fac:	f1c2 0208 	rsb	r2, r2, #8
 8007fb0:	0092      	lsls	r2, r2, #2
 8007fb2:	b570      	push	{r4, r5, r6, lr}
 8007fb4:	f1c2 0620 	rsb	r6, r2, #32
 8007fb8:	6843      	ldr	r3, [r0, #4]
 8007fba:	6804      	ldr	r4, [r0, #0]
 8007fbc:	fa03 f506 	lsl.w	r5, r3, r6
 8007fc0:	432c      	orrs	r4, r5
 8007fc2:	40d3      	lsrs	r3, r2
 8007fc4:	6004      	str	r4, [r0, #0]
 8007fc6:	f840 3f04 	str.w	r3, [r0, #4]!
 8007fca:	4288      	cmp	r0, r1
 8007fcc:	d3f4      	bcc.n	8007fb8 <L_shift+0xc>
 8007fce:	bd70      	pop	{r4, r5, r6, pc}

08007fd0 <__match>:
 8007fd0:	b530      	push	{r4, r5, lr}
 8007fd2:	6803      	ldr	r3, [r0, #0]
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fda:	b914      	cbnz	r4, 8007fe2 <__match+0x12>
 8007fdc:	6003      	str	r3, [r0, #0]
 8007fde:	2001      	movs	r0, #1
 8007fe0:	bd30      	pop	{r4, r5, pc}
 8007fe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fe6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007fea:	2d19      	cmp	r5, #25
 8007fec:	bf98      	it	ls
 8007fee:	3220      	addls	r2, #32
 8007ff0:	42a2      	cmp	r2, r4
 8007ff2:	d0f0      	beq.n	8007fd6 <__match+0x6>
 8007ff4:	2000      	movs	r0, #0
 8007ff6:	e7f3      	b.n	8007fe0 <__match+0x10>

08007ff8 <__hexnan>:
 8007ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ffc:	2500      	movs	r5, #0
 8007ffe:	680b      	ldr	r3, [r1, #0]
 8008000:	4682      	mov	sl, r0
 8008002:	115e      	asrs	r6, r3, #5
 8008004:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008008:	f013 031f 	ands.w	r3, r3, #31
 800800c:	bf18      	it	ne
 800800e:	3604      	addne	r6, #4
 8008010:	1f37      	subs	r7, r6, #4
 8008012:	4690      	mov	r8, r2
 8008014:	46b9      	mov	r9, r7
 8008016:	463c      	mov	r4, r7
 8008018:	46ab      	mov	fp, r5
 800801a:	b087      	sub	sp, #28
 800801c:	6801      	ldr	r1, [r0, #0]
 800801e:	9301      	str	r3, [sp, #4]
 8008020:	f846 5c04 	str.w	r5, [r6, #-4]
 8008024:	9502      	str	r5, [sp, #8]
 8008026:	784a      	ldrb	r2, [r1, #1]
 8008028:	1c4b      	adds	r3, r1, #1
 800802a:	9303      	str	r3, [sp, #12]
 800802c:	b342      	cbz	r2, 8008080 <__hexnan+0x88>
 800802e:	4610      	mov	r0, r2
 8008030:	9105      	str	r1, [sp, #20]
 8008032:	9204      	str	r2, [sp, #16]
 8008034:	f7ff fd75 	bl	8007b22 <__hexdig_fun>
 8008038:	2800      	cmp	r0, #0
 800803a:	d14f      	bne.n	80080dc <__hexnan+0xe4>
 800803c:	9a04      	ldr	r2, [sp, #16]
 800803e:	9905      	ldr	r1, [sp, #20]
 8008040:	2a20      	cmp	r2, #32
 8008042:	d818      	bhi.n	8008076 <__hexnan+0x7e>
 8008044:	9b02      	ldr	r3, [sp, #8]
 8008046:	459b      	cmp	fp, r3
 8008048:	dd13      	ble.n	8008072 <__hexnan+0x7a>
 800804a:	454c      	cmp	r4, r9
 800804c:	d206      	bcs.n	800805c <__hexnan+0x64>
 800804e:	2d07      	cmp	r5, #7
 8008050:	dc04      	bgt.n	800805c <__hexnan+0x64>
 8008052:	462a      	mov	r2, r5
 8008054:	4649      	mov	r1, r9
 8008056:	4620      	mov	r0, r4
 8008058:	f7ff ffa8 	bl	8007fac <L_shift>
 800805c:	4544      	cmp	r4, r8
 800805e:	d950      	bls.n	8008102 <__hexnan+0x10a>
 8008060:	2300      	movs	r3, #0
 8008062:	f1a4 0904 	sub.w	r9, r4, #4
 8008066:	f844 3c04 	str.w	r3, [r4, #-4]
 800806a:	461d      	mov	r5, r3
 800806c:	464c      	mov	r4, r9
 800806e:	f8cd b008 	str.w	fp, [sp, #8]
 8008072:	9903      	ldr	r1, [sp, #12]
 8008074:	e7d7      	b.n	8008026 <__hexnan+0x2e>
 8008076:	2a29      	cmp	r2, #41	; 0x29
 8008078:	d155      	bne.n	8008126 <__hexnan+0x12e>
 800807a:	3102      	adds	r1, #2
 800807c:	f8ca 1000 	str.w	r1, [sl]
 8008080:	f1bb 0f00 	cmp.w	fp, #0
 8008084:	d04f      	beq.n	8008126 <__hexnan+0x12e>
 8008086:	454c      	cmp	r4, r9
 8008088:	d206      	bcs.n	8008098 <__hexnan+0xa0>
 800808a:	2d07      	cmp	r5, #7
 800808c:	dc04      	bgt.n	8008098 <__hexnan+0xa0>
 800808e:	462a      	mov	r2, r5
 8008090:	4649      	mov	r1, r9
 8008092:	4620      	mov	r0, r4
 8008094:	f7ff ff8a 	bl	8007fac <L_shift>
 8008098:	4544      	cmp	r4, r8
 800809a:	d934      	bls.n	8008106 <__hexnan+0x10e>
 800809c:	4623      	mov	r3, r4
 800809e:	f1a8 0204 	sub.w	r2, r8, #4
 80080a2:	f853 1b04 	ldr.w	r1, [r3], #4
 80080a6:	429f      	cmp	r7, r3
 80080a8:	f842 1f04 	str.w	r1, [r2, #4]!
 80080ac:	d2f9      	bcs.n	80080a2 <__hexnan+0xaa>
 80080ae:	1b3b      	subs	r3, r7, r4
 80080b0:	f023 0303 	bic.w	r3, r3, #3
 80080b4:	3304      	adds	r3, #4
 80080b6:	3e03      	subs	r6, #3
 80080b8:	3401      	adds	r4, #1
 80080ba:	42a6      	cmp	r6, r4
 80080bc:	bf38      	it	cc
 80080be:	2304      	movcc	r3, #4
 80080c0:	2200      	movs	r2, #0
 80080c2:	4443      	add	r3, r8
 80080c4:	f843 2b04 	str.w	r2, [r3], #4
 80080c8:	429f      	cmp	r7, r3
 80080ca:	d2fb      	bcs.n	80080c4 <__hexnan+0xcc>
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	b91b      	cbnz	r3, 80080d8 <__hexnan+0xe0>
 80080d0:	4547      	cmp	r7, r8
 80080d2:	d126      	bne.n	8008122 <__hexnan+0x12a>
 80080d4:	2301      	movs	r3, #1
 80080d6:	603b      	str	r3, [r7, #0]
 80080d8:	2005      	movs	r0, #5
 80080da:	e025      	b.n	8008128 <__hexnan+0x130>
 80080dc:	3501      	adds	r5, #1
 80080de:	2d08      	cmp	r5, #8
 80080e0:	f10b 0b01 	add.w	fp, fp, #1
 80080e4:	dd06      	ble.n	80080f4 <__hexnan+0xfc>
 80080e6:	4544      	cmp	r4, r8
 80080e8:	d9c3      	bls.n	8008072 <__hexnan+0x7a>
 80080ea:	2300      	movs	r3, #0
 80080ec:	2501      	movs	r5, #1
 80080ee:	f844 3c04 	str.w	r3, [r4, #-4]
 80080f2:	3c04      	subs	r4, #4
 80080f4:	6822      	ldr	r2, [r4, #0]
 80080f6:	f000 000f 	and.w	r0, r0, #15
 80080fa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80080fe:	6020      	str	r0, [r4, #0]
 8008100:	e7b7      	b.n	8008072 <__hexnan+0x7a>
 8008102:	2508      	movs	r5, #8
 8008104:	e7b5      	b.n	8008072 <__hexnan+0x7a>
 8008106:	9b01      	ldr	r3, [sp, #4]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d0df      	beq.n	80080cc <__hexnan+0xd4>
 800810c:	f04f 32ff 	mov.w	r2, #4294967295
 8008110:	f1c3 0320 	rsb	r3, r3, #32
 8008114:	40da      	lsrs	r2, r3
 8008116:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800811a:	4013      	ands	r3, r2
 800811c:	f846 3c04 	str.w	r3, [r6, #-4]
 8008120:	e7d4      	b.n	80080cc <__hexnan+0xd4>
 8008122:	3f04      	subs	r7, #4
 8008124:	e7d2      	b.n	80080cc <__hexnan+0xd4>
 8008126:	2004      	movs	r0, #4
 8008128:	b007      	add	sp, #28
 800812a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800812e <__ascii_mbtowc>:
 800812e:	b082      	sub	sp, #8
 8008130:	b901      	cbnz	r1, 8008134 <__ascii_mbtowc+0x6>
 8008132:	a901      	add	r1, sp, #4
 8008134:	b142      	cbz	r2, 8008148 <__ascii_mbtowc+0x1a>
 8008136:	b14b      	cbz	r3, 800814c <__ascii_mbtowc+0x1e>
 8008138:	7813      	ldrb	r3, [r2, #0]
 800813a:	600b      	str	r3, [r1, #0]
 800813c:	7812      	ldrb	r2, [r2, #0]
 800813e:	1e10      	subs	r0, r2, #0
 8008140:	bf18      	it	ne
 8008142:	2001      	movne	r0, #1
 8008144:	b002      	add	sp, #8
 8008146:	4770      	bx	lr
 8008148:	4610      	mov	r0, r2
 800814a:	e7fb      	b.n	8008144 <__ascii_mbtowc+0x16>
 800814c:	f06f 0001 	mvn.w	r0, #1
 8008150:	e7f8      	b.n	8008144 <__ascii_mbtowc+0x16>

08008152 <_realloc_r>:
 8008152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008156:	4680      	mov	r8, r0
 8008158:	4614      	mov	r4, r2
 800815a:	460e      	mov	r6, r1
 800815c:	b921      	cbnz	r1, 8008168 <_realloc_r+0x16>
 800815e:	4611      	mov	r1, r2
 8008160:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008164:	f7fd be40 	b.w	8005de8 <_malloc_r>
 8008168:	b92a      	cbnz	r2, 8008176 <_realloc_r+0x24>
 800816a:	f7fd fdcd 	bl	8005d08 <_free_r>
 800816e:	4625      	mov	r5, r4
 8008170:	4628      	mov	r0, r5
 8008172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008176:	f000 f842 	bl	80081fe <_malloc_usable_size_r>
 800817a:	4284      	cmp	r4, r0
 800817c:	4607      	mov	r7, r0
 800817e:	d802      	bhi.n	8008186 <_realloc_r+0x34>
 8008180:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008184:	d812      	bhi.n	80081ac <_realloc_r+0x5a>
 8008186:	4621      	mov	r1, r4
 8008188:	4640      	mov	r0, r8
 800818a:	f7fd fe2d 	bl	8005de8 <_malloc_r>
 800818e:	4605      	mov	r5, r0
 8008190:	2800      	cmp	r0, #0
 8008192:	d0ed      	beq.n	8008170 <_realloc_r+0x1e>
 8008194:	42bc      	cmp	r4, r7
 8008196:	4622      	mov	r2, r4
 8008198:	4631      	mov	r1, r6
 800819a:	bf28      	it	cs
 800819c:	463a      	movcs	r2, r7
 800819e:	f7ff fc27 	bl	80079f0 <memcpy>
 80081a2:	4631      	mov	r1, r6
 80081a4:	4640      	mov	r0, r8
 80081a6:	f7fd fdaf 	bl	8005d08 <_free_r>
 80081aa:	e7e1      	b.n	8008170 <_realloc_r+0x1e>
 80081ac:	4635      	mov	r5, r6
 80081ae:	e7df      	b.n	8008170 <_realloc_r+0x1e>

080081b0 <__ascii_wctomb>:
 80081b0:	4603      	mov	r3, r0
 80081b2:	4608      	mov	r0, r1
 80081b4:	b141      	cbz	r1, 80081c8 <__ascii_wctomb+0x18>
 80081b6:	2aff      	cmp	r2, #255	; 0xff
 80081b8:	d904      	bls.n	80081c4 <__ascii_wctomb+0x14>
 80081ba:	228a      	movs	r2, #138	; 0x8a
 80081bc:	f04f 30ff 	mov.w	r0, #4294967295
 80081c0:	601a      	str	r2, [r3, #0]
 80081c2:	4770      	bx	lr
 80081c4:	2001      	movs	r0, #1
 80081c6:	700a      	strb	r2, [r1, #0]
 80081c8:	4770      	bx	lr
	...

080081cc <fiprintf>:
 80081cc:	b40e      	push	{r1, r2, r3}
 80081ce:	b503      	push	{r0, r1, lr}
 80081d0:	4601      	mov	r1, r0
 80081d2:	ab03      	add	r3, sp, #12
 80081d4:	4805      	ldr	r0, [pc, #20]	; (80081ec <fiprintf+0x20>)
 80081d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80081da:	6800      	ldr	r0, [r0, #0]
 80081dc:	9301      	str	r3, [sp, #4]
 80081de:	f000 f83d 	bl	800825c <_vfiprintf_r>
 80081e2:	b002      	add	sp, #8
 80081e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80081e8:	b003      	add	sp, #12
 80081ea:	4770      	bx	lr
 80081ec:	20000064 	.word	0x20000064

080081f0 <abort>:
 80081f0:	2006      	movs	r0, #6
 80081f2:	b508      	push	{r3, lr}
 80081f4:	f000 fa0a 	bl	800860c <raise>
 80081f8:	2001      	movs	r0, #1
 80081fa:	f7f9 fb34 	bl	8001866 <_exit>

080081fe <_malloc_usable_size_r>:
 80081fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008202:	1f18      	subs	r0, r3, #4
 8008204:	2b00      	cmp	r3, #0
 8008206:	bfbc      	itt	lt
 8008208:	580b      	ldrlt	r3, [r1, r0]
 800820a:	18c0      	addlt	r0, r0, r3
 800820c:	4770      	bx	lr

0800820e <__sfputc_r>:
 800820e:	6893      	ldr	r3, [r2, #8]
 8008210:	b410      	push	{r4}
 8008212:	3b01      	subs	r3, #1
 8008214:	2b00      	cmp	r3, #0
 8008216:	6093      	str	r3, [r2, #8]
 8008218:	da07      	bge.n	800822a <__sfputc_r+0x1c>
 800821a:	6994      	ldr	r4, [r2, #24]
 800821c:	42a3      	cmp	r3, r4
 800821e:	db01      	blt.n	8008224 <__sfputc_r+0x16>
 8008220:	290a      	cmp	r1, #10
 8008222:	d102      	bne.n	800822a <__sfputc_r+0x1c>
 8008224:	bc10      	pop	{r4}
 8008226:	f000 b933 	b.w	8008490 <__swbuf_r>
 800822a:	6813      	ldr	r3, [r2, #0]
 800822c:	1c58      	adds	r0, r3, #1
 800822e:	6010      	str	r0, [r2, #0]
 8008230:	7019      	strb	r1, [r3, #0]
 8008232:	4608      	mov	r0, r1
 8008234:	bc10      	pop	{r4}
 8008236:	4770      	bx	lr

08008238 <__sfputs_r>:
 8008238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800823a:	4606      	mov	r6, r0
 800823c:	460f      	mov	r7, r1
 800823e:	4614      	mov	r4, r2
 8008240:	18d5      	adds	r5, r2, r3
 8008242:	42ac      	cmp	r4, r5
 8008244:	d101      	bne.n	800824a <__sfputs_r+0x12>
 8008246:	2000      	movs	r0, #0
 8008248:	e007      	b.n	800825a <__sfputs_r+0x22>
 800824a:	463a      	mov	r2, r7
 800824c:	4630      	mov	r0, r6
 800824e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008252:	f7ff ffdc 	bl	800820e <__sfputc_r>
 8008256:	1c43      	adds	r3, r0, #1
 8008258:	d1f3      	bne.n	8008242 <__sfputs_r+0xa>
 800825a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800825c <_vfiprintf_r>:
 800825c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008260:	460d      	mov	r5, r1
 8008262:	4614      	mov	r4, r2
 8008264:	4698      	mov	r8, r3
 8008266:	4606      	mov	r6, r0
 8008268:	b09d      	sub	sp, #116	; 0x74
 800826a:	b118      	cbz	r0, 8008274 <_vfiprintf_r+0x18>
 800826c:	6a03      	ldr	r3, [r0, #32]
 800826e:	b90b      	cbnz	r3, 8008274 <_vfiprintf_r+0x18>
 8008270:	f7fc fdb2 	bl	8004dd8 <__sinit>
 8008274:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008276:	07d9      	lsls	r1, r3, #31
 8008278:	d405      	bmi.n	8008286 <_vfiprintf_r+0x2a>
 800827a:	89ab      	ldrh	r3, [r5, #12]
 800827c:	059a      	lsls	r2, r3, #22
 800827e:	d402      	bmi.n	8008286 <_vfiprintf_r+0x2a>
 8008280:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008282:	f7fc febf 	bl	8005004 <__retarget_lock_acquire_recursive>
 8008286:	89ab      	ldrh	r3, [r5, #12]
 8008288:	071b      	lsls	r3, r3, #28
 800828a:	d501      	bpl.n	8008290 <_vfiprintf_r+0x34>
 800828c:	692b      	ldr	r3, [r5, #16]
 800828e:	b99b      	cbnz	r3, 80082b8 <_vfiprintf_r+0x5c>
 8008290:	4629      	mov	r1, r5
 8008292:	4630      	mov	r0, r6
 8008294:	f000 f93a 	bl	800850c <__swsetup_r>
 8008298:	b170      	cbz	r0, 80082b8 <_vfiprintf_r+0x5c>
 800829a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800829c:	07dc      	lsls	r4, r3, #31
 800829e:	d504      	bpl.n	80082aa <_vfiprintf_r+0x4e>
 80082a0:	f04f 30ff 	mov.w	r0, #4294967295
 80082a4:	b01d      	add	sp, #116	; 0x74
 80082a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082aa:	89ab      	ldrh	r3, [r5, #12]
 80082ac:	0598      	lsls	r0, r3, #22
 80082ae:	d4f7      	bmi.n	80082a0 <_vfiprintf_r+0x44>
 80082b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082b2:	f7fc fea8 	bl	8005006 <__retarget_lock_release_recursive>
 80082b6:	e7f3      	b.n	80082a0 <_vfiprintf_r+0x44>
 80082b8:	2300      	movs	r3, #0
 80082ba:	9309      	str	r3, [sp, #36]	; 0x24
 80082bc:	2320      	movs	r3, #32
 80082be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082c2:	2330      	movs	r3, #48	; 0x30
 80082c4:	f04f 0901 	mov.w	r9, #1
 80082c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80082cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800847c <_vfiprintf_r+0x220>
 80082d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082d4:	4623      	mov	r3, r4
 80082d6:	469a      	mov	sl, r3
 80082d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082dc:	b10a      	cbz	r2, 80082e2 <_vfiprintf_r+0x86>
 80082de:	2a25      	cmp	r2, #37	; 0x25
 80082e0:	d1f9      	bne.n	80082d6 <_vfiprintf_r+0x7a>
 80082e2:	ebba 0b04 	subs.w	fp, sl, r4
 80082e6:	d00b      	beq.n	8008300 <_vfiprintf_r+0xa4>
 80082e8:	465b      	mov	r3, fp
 80082ea:	4622      	mov	r2, r4
 80082ec:	4629      	mov	r1, r5
 80082ee:	4630      	mov	r0, r6
 80082f0:	f7ff ffa2 	bl	8008238 <__sfputs_r>
 80082f4:	3001      	adds	r0, #1
 80082f6:	f000 80a9 	beq.w	800844c <_vfiprintf_r+0x1f0>
 80082fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082fc:	445a      	add	r2, fp
 80082fe:	9209      	str	r2, [sp, #36]	; 0x24
 8008300:	f89a 3000 	ldrb.w	r3, [sl]
 8008304:	2b00      	cmp	r3, #0
 8008306:	f000 80a1 	beq.w	800844c <_vfiprintf_r+0x1f0>
 800830a:	2300      	movs	r3, #0
 800830c:	f04f 32ff 	mov.w	r2, #4294967295
 8008310:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008314:	f10a 0a01 	add.w	sl, sl, #1
 8008318:	9304      	str	r3, [sp, #16]
 800831a:	9307      	str	r3, [sp, #28]
 800831c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008320:	931a      	str	r3, [sp, #104]	; 0x68
 8008322:	4654      	mov	r4, sl
 8008324:	2205      	movs	r2, #5
 8008326:	f814 1b01 	ldrb.w	r1, [r4], #1
 800832a:	4854      	ldr	r0, [pc, #336]	; (800847c <_vfiprintf_r+0x220>)
 800832c:	f7fc fe6c 	bl	8005008 <memchr>
 8008330:	9a04      	ldr	r2, [sp, #16]
 8008332:	b9d8      	cbnz	r0, 800836c <_vfiprintf_r+0x110>
 8008334:	06d1      	lsls	r1, r2, #27
 8008336:	bf44      	itt	mi
 8008338:	2320      	movmi	r3, #32
 800833a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800833e:	0713      	lsls	r3, r2, #28
 8008340:	bf44      	itt	mi
 8008342:	232b      	movmi	r3, #43	; 0x2b
 8008344:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008348:	f89a 3000 	ldrb.w	r3, [sl]
 800834c:	2b2a      	cmp	r3, #42	; 0x2a
 800834e:	d015      	beq.n	800837c <_vfiprintf_r+0x120>
 8008350:	4654      	mov	r4, sl
 8008352:	2000      	movs	r0, #0
 8008354:	f04f 0c0a 	mov.w	ip, #10
 8008358:	9a07      	ldr	r2, [sp, #28]
 800835a:	4621      	mov	r1, r4
 800835c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008360:	3b30      	subs	r3, #48	; 0x30
 8008362:	2b09      	cmp	r3, #9
 8008364:	d94d      	bls.n	8008402 <_vfiprintf_r+0x1a6>
 8008366:	b1b0      	cbz	r0, 8008396 <_vfiprintf_r+0x13a>
 8008368:	9207      	str	r2, [sp, #28]
 800836a:	e014      	b.n	8008396 <_vfiprintf_r+0x13a>
 800836c:	eba0 0308 	sub.w	r3, r0, r8
 8008370:	fa09 f303 	lsl.w	r3, r9, r3
 8008374:	4313      	orrs	r3, r2
 8008376:	46a2      	mov	sl, r4
 8008378:	9304      	str	r3, [sp, #16]
 800837a:	e7d2      	b.n	8008322 <_vfiprintf_r+0xc6>
 800837c:	9b03      	ldr	r3, [sp, #12]
 800837e:	1d19      	adds	r1, r3, #4
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	9103      	str	r1, [sp, #12]
 8008384:	2b00      	cmp	r3, #0
 8008386:	bfbb      	ittet	lt
 8008388:	425b      	neglt	r3, r3
 800838a:	f042 0202 	orrlt.w	r2, r2, #2
 800838e:	9307      	strge	r3, [sp, #28]
 8008390:	9307      	strlt	r3, [sp, #28]
 8008392:	bfb8      	it	lt
 8008394:	9204      	strlt	r2, [sp, #16]
 8008396:	7823      	ldrb	r3, [r4, #0]
 8008398:	2b2e      	cmp	r3, #46	; 0x2e
 800839a:	d10c      	bne.n	80083b6 <_vfiprintf_r+0x15a>
 800839c:	7863      	ldrb	r3, [r4, #1]
 800839e:	2b2a      	cmp	r3, #42	; 0x2a
 80083a0:	d134      	bne.n	800840c <_vfiprintf_r+0x1b0>
 80083a2:	9b03      	ldr	r3, [sp, #12]
 80083a4:	3402      	adds	r4, #2
 80083a6:	1d1a      	adds	r2, r3, #4
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	9203      	str	r2, [sp, #12]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	bfb8      	it	lt
 80083b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80083b4:	9305      	str	r3, [sp, #20]
 80083b6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008480 <_vfiprintf_r+0x224>
 80083ba:	2203      	movs	r2, #3
 80083bc:	4650      	mov	r0, sl
 80083be:	7821      	ldrb	r1, [r4, #0]
 80083c0:	f7fc fe22 	bl	8005008 <memchr>
 80083c4:	b138      	cbz	r0, 80083d6 <_vfiprintf_r+0x17a>
 80083c6:	2240      	movs	r2, #64	; 0x40
 80083c8:	9b04      	ldr	r3, [sp, #16]
 80083ca:	eba0 000a 	sub.w	r0, r0, sl
 80083ce:	4082      	lsls	r2, r0
 80083d0:	4313      	orrs	r3, r2
 80083d2:	3401      	adds	r4, #1
 80083d4:	9304      	str	r3, [sp, #16]
 80083d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083da:	2206      	movs	r2, #6
 80083dc:	4829      	ldr	r0, [pc, #164]	; (8008484 <_vfiprintf_r+0x228>)
 80083de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083e2:	f7fc fe11 	bl	8005008 <memchr>
 80083e6:	2800      	cmp	r0, #0
 80083e8:	d03f      	beq.n	800846a <_vfiprintf_r+0x20e>
 80083ea:	4b27      	ldr	r3, [pc, #156]	; (8008488 <_vfiprintf_r+0x22c>)
 80083ec:	bb1b      	cbnz	r3, 8008436 <_vfiprintf_r+0x1da>
 80083ee:	9b03      	ldr	r3, [sp, #12]
 80083f0:	3307      	adds	r3, #7
 80083f2:	f023 0307 	bic.w	r3, r3, #7
 80083f6:	3308      	adds	r3, #8
 80083f8:	9303      	str	r3, [sp, #12]
 80083fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083fc:	443b      	add	r3, r7
 80083fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008400:	e768      	b.n	80082d4 <_vfiprintf_r+0x78>
 8008402:	460c      	mov	r4, r1
 8008404:	2001      	movs	r0, #1
 8008406:	fb0c 3202 	mla	r2, ip, r2, r3
 800840a:	e7a6      	b.n	800835a <_vfiprintf_r+0xfe>
 800840c:	2300      	movs	r3, #0
 800840e:	f04f 0c0a 	mov.w	ip, #10
 8008412:	4619      	mov	r1, r3
 8008414:	3401      	adds	r4, #1
 8008416:	9305      	str	r3, [sp, #20]
 8008418:	4620      	mov	r0, r4
 800841a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800841e:	3a30      	subs	r2, #48	; 0x30
 8008420:	2a09      	cmp	r2, #9
 8008422:	d903      	bls.n	800842c <_vfiprintf_r+0x1d0>
 8008424:	2b00      	cmp	r3, #0
 8008426:	d0c6      	beq.n	80083b6 <_vfiprintf_r+0x15a>
 8008428:	9105      	str	r1, [sp, #20]
 800842a:	e7c4      	b.n	80083b6 <_vfiprintf_r+0x15a>
 800842c:	4604      	mov	r4, r0
 800842e:	2301      	movs	r3, #1
 8008430:	fb0c 2101 	mla	r1, ip, r1, r2
 8008434:	e7f0      	b.n	8008418 <_vfiprintf_r+0x1bc>
 8008436:	ab03      	add	r3, sp, #12
 8008438:	9300      	str	r3, [sp, #0]
 800843a:	462a      	mov	r2, r5
 800843c:	4630      	mov	r0, r6
 800843e:	4b13      	ldr	r3, [pc, #76]	; (800848c <_vfiprintf_r+0x230>)
 8008440:	a904      	add	r1, sp, #16
 8008442:	f7fb fe7f 	bl	8004144 <_printf_float>
 8008446:	4607      	mov	r7, r0
 8008448:	1c78      	adds	r0, r7, #1
 800844a:	d1d6      	bne.n	80083fa <_vfiprintf_r+0x19e>
 800844c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800844e:	07d9      	lsls	r1, r3, #31
 8008450:	d405      	bmi.n	800845e <_vfiprintf_r+0x202>
 8008452:	89ab      	ldrh	r3, [r5, #12]
 8008454:	059a      	lsls	r2, r3, #22
 8008456:	d402      	bmi.n	800845e <_vfiprintf_r+0x202>
 8008458:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800845a:	f7fc fdd4 	bl	8005006 <__retarget_lock_release_recursive>
 800845e:	89ab      	ldrh	r3, [r5, #12]
 8008460:	065b      	lsls	r3, r3, #25
 8008462:	f53f af1d 	bmi.w	80082a0 <_vfiprintf_r+0x44>
 8008466:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008468:	e71c      	b.n	80082a4 <_vfiprintf_r+0x48>
 800846a:	ab03      	add	r3, sp, #12
 800846c:	9300      	str	r3, [sp, #0]
 800846e:	462a      	mov	r2, r5
 8008470:	4630      	mov	r0, r6
 8008472:	4b06      	ldr	r3, [pc, #24]	; (800848c <_vfiprintf_r+0x230>)
 8008474:	a904      	add	r1, sp, #16
 8008476:	f7fc f905 	bl	8004684 <_printf_i>
 800847a:	e7e4      	b.n	8008446 <_vfiprintf_r+0x1ea>
 800847c:	08009d31 	.word	0x08009d31
 8008480:	08009d37 	.word	0x08009d37
 8008484:	08009d3b 	.word	0x08009d3b
 8008488:	08004145 	.word	0x08004145
 800848c:	08008239 	.word	0x08008239

08008490 <__swbuf_r>:
 8008490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008492:	460e      	mov	r6, r1
 8008494:	4614      	mov	r4, r2
 8008496:	4605      	mov	r5, r0
 8008498:	b118      	cbz	r0, 80084a2 <__swbuf_r+0x12>
 800849a:	6a03      	ldr	r3, [r0, #32]
 800849c:	b90b      	cbnz	r3, 80084a2 <__swbuf_r+0x12>
 800849e:	f7fc fc9b 	bl	8004dd8 <__sinit>
 80084a2:	69a3      	ldr	r3, [r4, #24]
 80084a4:	60a3      	str	r3, [r4, #8]
 80084a6:	89a3      	ldrh	r3, [r4, #12]
 80084a8:	071a      	lsls	r2, r3, #28
 80084aa:	d525      	bpl.n	80084f8 <__swbuf_r+0x68>
 80084ac:	6923      	ldr	r3, [r4, #16]
 80084ae:	b31b      	cbz	r3, 80084f8 <__swbuf_r+0x68>
 80084b0:	6823      	ldr	r3, [r4, #0]
 80084b2:	6922      	ldr	r2, [r4, #16]
 80084b4:	b2f6      	uxtb	r6, r6
 80084b6:	1a98      	subs	r0, r3, r2
 80084b8:	6963      	ldr	r3, [r4, #20]
 80084ba:	4637      	mov	r7, r6
 80084bc:	4283      	cmp	r3, r0
 80084be:	dc04      	bgt.n	80084ca <__swbuf_r+0x3a>
 80084c0:	4621      	mov	r1, r4
 80084c2:	4628      	mov	r0, r5
 80084c4:	f7ff fa30 	bl	8007928 <_fflush_r>
 80084c8:	b9e0      	cbnz	r0, 8008504 <__swbuf_r+0x74>
 80084ca:	68a3      	ldr	r3, [r4, #8]
 80084cc:	3b01      	subs	r3, #1
 80084ce:	60a3      	str	r3, [r4, #8]
 80084d0:	6823      	ldr	r3, [r4, #0]
 80084d2:	1c5a      	adds	r2, r3, #1
 80084d4:	6022      	str	r2, [r4, #0]
 80084d6:	701e      	strb	r6, [r3, #0]
 80084d8:	6962      	ldr	r2, [r4, #20]
 80084da:	1c43      	adds	r3, r0, #1
 80084dc:	429a      	cmp	r2, r3
 80084de:	d004      	beq.n	80084ea <__swbuf_r+0x5a>
 80084e0:	89a3      	ldrh	r3, [r4, #12]
 80084e2:	07db      	lsls	r3, r3, #31
 80084e4:	d506      	bpl.n	80084f4 <__swbuf_r+0x64>
 80084e6:	2e0a      	cmp	r6, #10
 80084e8:	d104      	bne.n	80084f4 <__swbuf_r+0x64>
 80084ea:	4621      	mov	r1, r4
 80084ec:	4628      	mov	r0, r5
 80084ee:	f7ff fa1b 	bl	8007928 <_fflush_r>
 80084f2:	b938      	cbnz	r0, 8008504 <__swbuf_r+0x74>
 80084f4:	4638      	mov	r0, r7
 80084f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084f8:	4621      	mov	r1, r4
 80084fa:	4628      	mov	r0, r5
 80084fc:	f000 f806 	bl	800850c <__swsetup_r>
 8008500:	2800      	cmp	r0, #0
 8008502:	d0d5      	beq.n	80084b0 <__swbuf_r+0x20>
 8008504:	f04f 37ff 	mov.w	r7, #4294967295
 8008508:	e7f4      	b.n	80084f4 <__swbuf_r+0x64>
	...

0800850c <__swsetup_r>:
 800850c:	b538      	push	{r3, r4, r5, lr}
 800850e:	4b2a      	ldr	r3, [pc, #168]	; (80085b8 <__swsetup_r+0xac>)
 8008510:	4605      	mov	r5, r0
 8008512:	6818      	ldr	r0, [r3, #0]
 8008514:	460c      	mov	r4, r1
 8008516:	b118      	cbz	r0, 8008520 <__swsetup_r+0x14>
 8008518:	6a03      	ldr	r3, [r0, #32]
 800851a:	b90b      	cbnz	r3, 8008520 <__swsetup_r+0x14>
 800851c:	f7fc fc5c 	bl	8004dd8 <__sinit>
 8008520:	89a3      	ldrh	r3, [r4, #12]
 8008522:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008526:	0718      	lsls	r0, r3, #28
 8008528:	d422      	bmi.n	8008570 <__swsetup_r+0x64>
 800852a:	06d9      	lsls	r1, r3, #27
 800852c:	d407      	bmi.n	800853e <__swsetup_r+0x32>
 800852e:	2309      	movs	r3, #9
 8008530:	602b      	str	r3, [r5, #0]
 8008532:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008536:	f04f 30ff 	mov.w	r0, #4294967295
 800853a:	81a3      	strh	r3, [r4, #12]
 800853c:	e034      	b.n	80085a8 <__swsetup_r+0x9c>
 800853e:	0758      	lsls	r0, r3, #29
 8008540:	d512      	bpl.n	8008568 <__swsetup_r+0x5c>
 8008542:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008544:	b141      	cbz	r1, 8008558 <__swsetup_r+0x4c>
 8008546:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800854a:	4299      	cmp	r1, r3
 800854c:	d002      	beq.n	8008554 <__swsetup_r+0x48>
 800854e:	4628      	mov	r0, r5
 8008550:	f7fd fbda 	bl	8005d08 <_free_r>
 8008554:	2300      	movs	r3, #0
 8008556:	6363      	str	r3, [r4, #52]	; 0x34
 8008558:	89a3      	ldrh	r3, [r4, #12]
 800855a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800855e:	81a3      	strh	r3, [r4, #12]
 8008560:	2300      	movs	r3, #0
 8008562:	6063      	str	r3, [r4, #4]
 8008564:	6923      	ldr	r3, [r4, #16]
 8008566:	6023      	str	r3, [r4, #0]
 8008568:	89a3      	ldrh	r3, [r4, #12]
 800856a:	f043 0308 	orr.w	r3, r3, #8
 800856e:	81a3      	strh	r3, [r4, #12]
 8008570:	6923      	ldr	r3, [r4, #16]
 8008572:	b94b      	cbnz	r3, 8008588 <__swsetup_r+0x7c>
 8008574:	89a3      	ldrh	r3, [r4, #12]
 8008576:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800857a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800857e:	d003      	beq.n	8008588 <__swsetup_r+0x7c>
 8008580:	4621      	mov	r1, r4
 8008582:	4628      	mov	r0, r5
 8008584:	f000 f883 	bl	800868e <__smakebuf_r>
 8008588:	89a0      	ldrh	r0, [r4, #12]
 800858a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800858e:	f010 0301 	ands.w	r3, r0, #1
 8008592:	d00a      	beq.n	80085aa <__swsetup_r+0x9e>
 8008594:	2300      	movs	r3, #0
 8008596:	60a3      	str	r3, [r4, #8]
 8008598:	6963      	ldr	r3, [r4, #20]
 800859a:	425b      	negs	r3, r3
 800859c:	61a3      	str	r3, [r4, #24]
 800859e:	6923      	ldr	r3, [r4, #16]
 80085a0:	b943      	cbnz	r3, 80085b4 <__swsetup_r+0xa8>
 80085a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80085a6:	d1c4      	bne.n	8008532 <__swsetup_r+0x26>
 80085a8:	bd38      	pop	{r3, r4, r5, pc}
 80085aa:	0781      	lsls	r1, r0, #30
 80085ac:	bf58      	it	pl
 80085ae:	6963      	ldrpl	r3, [r4, #20]
 80085b0:	60a3      	str	r3, [r4, #8]
 80085b2:	e7f4      	b.n	800859e <__swsetup_r+0x92>
 80085b4:	2000      	movs	r0, #0
 80085b6:	e7f7      	b.n	80085a8 <__swsetup_r+0x9c>
 80085b8:	20000064 	.word	0x20000064

080085bc <_raise_r>:
 80085bc:	291f      	cmp	r1, #31
 80085be:	b538      	push	{r3, r4, r5, lr}
 80085c0:	4604      	mov	r4, r0
 80085c2:	460d      	mov	r5, r1
 80085c4:	d904      	bls.n	80085d0 <_raise_r+0x14>
 80085c6:	2316      	movs	r3, #22
 80085c8:	6003      	str	r3, [r0, #0]
 80085ca:	f04f 30ff 	mov.w	r0, #4294967295
 80085ce:	bd38      	pop	{r3, r4, r5, pc}
 80085d0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80085d2:	b112      	cbz	r2, 80085da <_raise_r+0x1e>
 80085d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80085d8:	b94b      	cbnz	r3, 80085ee <_raise_r+0x32>
 80085da:	4620      	mov	r0, r4
 80085dc:	f000 f830 	bl	8008640 <_getpid_r>
 80085e0:	462a      	mov	r2, r5
 80085e2:	4601      	mov	r1, r0
 80085e4:	4620      	mov	r0, r4
 80085e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085ea:	f000 b817 	b.w	800861c <_kill_r>
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d00a      	beq.n	8008608 <_raise_r+0x4c>
 80085f2:	1c59      	adds	r1, r3, #1
 80085f4:	d103      	bne.n	80085fe <_raise_r+0x42>
 80085f6:	2316      	movs	r3, #22
 80085f8:	6003      	str	r3, [r0, #0]
 80085fa:	2001      	movs	r0, #1
 80085fc:	e7e7      	b.n	80085ce <_raise_r+0x12>
 80085fe:	2400      	movs	r4, #0
 8008600:	4628      	mov	r0, r5
 8008602:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008606:	4798      	blx	r3
 8008608:	2000      	movs	r0, #0
 800860a:	e7e0      	b.n	80085ce <_raise_r+0x12>

0800860c <raise>:
 800860c:	4b02      	ldr	r3, [pc, #8]	; (8008618 <raise+0xc>)
 800860e:	4601      	mov	r1, r0
 8008610:	6818      	ldr	r0, [r3, #0]
 8008612:	f7ff bfd3 	b.w	80085bc <_raise_r>
 8008616:	bf00      	nop
 8008618:	20000064 	.word	0x20000064

0800861c <_kill_r>:
 800861c:	b538      	push	{r3, r4, r5, lr}
 800861e:	2300      	movs	r3, #0
 8008620:	4d06      	ldr	r5, [pc, #24]	; (800863c <_kill_r+0x20>)
 8008622:	4604      	mov	r4, r0
 8008624:	4608      	mov	r0, r1
 8008626:	4611      	mov	r1, r2
 8008628:	602b      	str	r3, [r5, #0]
 800862a:	f7f9 f90c 	bl	8001846 <_kill>
 800862e:	1c43      	adds	r3, r0, #1
 8008630:	d102      	bne.n	8008638 <_kill_r+0x1c>
 8008632:	682b      	ldr	r3, [r5, #0]
 8008634:	b103      	cbz	r3, 8008638 <_kill_r+0x1c>
 8008636:	6023      	str	r3, [r4, #0]
 8008638:	bd38      	pop	{r3, r4, r5, pc}
 800863a:	bf00      	nop
 800863c:	20000414 	.word	0x20000414

08008640 <_getpid_r>:
 8008640:	f7f9 b8fa 	b.w	8001838 <_getpid>

08008644 <__swhatbuf_r>:
 8008644:	b570      	push	{r4, r5, r6, lr}
 8008646:	460c      	mov	r4, r1
 8008648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800864c:	4615      	mov	r5, r2
 800864e:	2900      	cmp	r1, #0
 8008650:	461e      	mov	r6, r3
 8008652:	b096      	sub	sp, #88	; 0x58
 8008654:	da0c      	bge.n	8008670 <__swhatbuf_r+0x2c>
 8008656:	89a3      	ldrh	r3, [r4, #12]
 8008658:	2100      	movs	r1, #0
 800865a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800865e:	bf0c      	ite	eq
 8008660:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008664:	2340      	movne	r3, #64	; 0x40
 8008666:	2000      	movs	r0, #0
 8008668:	6031      	str	r1, [r6, #0]
 800866a:	602b      	str	r3, [r5, #0]
 800866c:	b016      	add	sp, #88	; 0x58
 800866e:	bd70      	pop	{r4, r5, r6, pc}
 8008670:	466a      	mov	r2, sp
 8008672:	f000 f849 	bl	8008708 <_fstat_r>
 8008676:	2800      	cmp	r0, #0
 8008678:	dbed      	blt.n	8008656 <__swhatbuf_r+0x12>
 800867a:	9901      	ldr	r1, [sp, #4]
 800867c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008680:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008684:	4259      	negs	r1, r3
 8008686:	4159      	adcs	r1, r3
 8008688:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800868c:	e7eb      	b.n	8008666 <__swhatbuf_r+0x22>

0800868e <__smakebuf_r>:
 800868e:	898b      	ldrh	r3, [r1, #12]
 8008690:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008692:	079d      	lsls	r5, r3, #30
 8008694:	4606      	mov	r6, r0
 8008696:	460c      	mov	r4, r1
 8008698:	d507      	bpl.n	80086aa <__smakebuf_r+0x1c>
 800869a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800869e:	6023      	str	r3, [r4, #0]
 80086a0:	6123      	str	r3, [r4, #16]
 80086a2:	2301      	movs	r3, #1
 80086a4:	6163      	str	r3, [r4, #20]
 80086a6:	b002      	add	sp, #8
 80086a8:	bd70      	pop	{r4, r5, r6, pc}
 80086aa:	466a      	mov	r2, sp
 80086ac:	ab01      	add	r3, sp, #4
 80086ae:	f7ff ffc9 	bl	8008644 <__swhatbuf_r>
 80086b2:	9900      	ldr	r1, [sp, #0]
 80086b4:	4605      	mov	r5, r0
 80086b6:	4630      	mov	r0, r6
 80086b8:	f7fd fb96 	bl	8005de8 <_malloc_r>
 80086bc:	b948      	cbnz	r0, 80086d2 <__smakebuf_r+0x44>
 80086be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086c2:	059a      	lsls	r2, r3, #22
 80086c4:	d4ef      	bmi.n	80086a6 <__smakebuf_r+0x18>
 80086c6:	f023 0303 	bic.w	r3, r3, #3
 80086ca:	f043 0302 	orr.w	r3, r3, #2
 80086ce:	81a3      	strh	r3, [r4, #12]
 80086d0:	e7e3      	b.n	800869a <__smakebuf_r+0xc>
 80086d2:	89a3      	ldrh	r3, [r4, #12]
 80086d4:	6020      	str	r0, [r4, #0]
 80086d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086da:	81a3      	strh	r3, [r4, #12]
 80086dc:	9b00      	ldr	r3, [sp, #0]
 80086de:	6120      	str	r0, [r4, #16]
 80086e0:	6163      	str	r3, [r4, #20]
 80086e2:	9b01      	ldr	r3, [sp, #4]
 80086e4:	b15b      	cbz	r3, 80086fe <__smakebuf_r+0x70>
 80086e6:	4630      	mov	r0, r6
 80086e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086ec:	f000 f81e 	bl	800872c <_isatty_r>
 80086f0:	b128      	cbz	r0, 80086fe <__smakebuf_r+0x70>
 80086f2:	89a3      	ldrh	r3, [r4, #12]
 80086f4:	f023 0303 	bic.w	r3, r3, #3
 80086f8:	f043 0301 	orr.w	r3, r3, #1
 80086fc:	81a3      	strh	r3, [r4, #12]
 80086fe:	89a3      	ldrh	r3, [r4, #12]
 8008700:	431d      	orrs	r5, r3
 8008702:	81a5      	strh	r5, [r4, #12]
 8008704:	e7cf      	b.n	80086a6 <__smakebuf_r+0x18>
	...

08008708 <_fstat_r>:
 8008708:	b538      	push	{r3, r4, r5, lr}
 800870a:	2300      	movs	r3, #0
 800870c:	4d06      	ldr	r5, [pc, #24]	; (8008728 <_fstat_r+0x20>)
 800870e:	4604      	mov	r4, r0
 8008710:	4608      	mov	r0, r1
 8008712:	4611      	mov	r1, r2
 8008714:	602b      	str	r3, [r5, #0]
 8008716:	f7f9 f8f4 	bl	8001902 <_fstat>
 800871a:	1c43      	adds	r3, r0, #1
 800871c:	d102      	bne.n	8008724 <_fstat_r+0x1c>
 800871e:	682b      	ldr	r3, [r5, #0]
 8008720:	b103      	cbz	r3, 8008724 <_fstat_r+0x1c>
 8008722:	6023      	str	r3, [r4, #0]
 8008724:	bd38      	pop	{r3, r4, r5, pc}
 8008726:	bf00      	nop
 8008728:	20000414 	.word	0x20000414

0800872c <_isatty_r>:
 800872c:	b538      	push	{r3, r4, r5, lr}
 800872e:	2300      	movs	r3, #0
 8008730:	4d05      	ldr	r5, [pc, #20]	; (8008748 <_isatty_r+0x1c>)
 8008732:	4604      	mov	r4, r0
 8008734:	4608      	mov	r0, r1
 8008736:	602b      	str	r3, [r5, #0]
 8008738:	f7f9 f8f2 	bl	8001920 <_isatty>
 800873c:	1c43      	adds	r3, r0, #1
 800873e:	d102      	bne.n	8008746 <_isatty_r+0x1a>
 8008740:	682b      	ldr	r3, [r5, #0]
 8008742:	b103      	cbz	r3, 8008746 <_isatty_r+0x1a>
 8008744:	6023      	str	r3, [r4, #0]
 8008746:	bd38      	pop	{r3, r4, r5, pc}
 8008748:	20000414 	.word	0x20000414

0800874c <log>:
 800874c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800874e:	4604      	mov	r4, r0
 8008750:	460d      	mov	r5, r1
 8008752:	f000 f89d 	bl	8008890 <__ieee754_log>
 8008756:	4622      	mov	r2, r4
 8008758:	4606      	mov	r6, r0
 800875a:	460f      	mov	r7, r1
 800875c:	462b      	mov	r3, r5
 800875e:	4620      	mov	r0, r4
 8008760:	4629      	mov	r1, r5
 8008762:	f7f8 f953 	bl	8000a0c <__aeabi_dcmpun>
 8008766:	b998      	cbnz	r0, 8008790 <log+0x44>
 8008768:	2200      	movs	r2, #0
 800876a:	2300      	movs	r3, #0
 800876c:	4620      	mov	r0, r4
 800876e:	4629      	mov	r1, r5
 8008770:	f7f8 f942 	bl	80009f8 <__aeabi_dcmpgt>
 8008774:	b960      	cbnz	r0, 8008790 <log+0x44>
 8008776:	2200      	movs	r2, #0
 8008778:	2300      	movs	r3, #0
 800877a:	4620      	mov	r0, r4
 800877c:	4629      	mov	r1, r5
 800877e:	f7f8 f913 	bl	80009a8 <__aeabi_dcmpeq>
 8008782:	b140      	cbz	r0, 8008796 <log+0x4a>
 8008784:	f7fc fc14 	bl	8004fb0 <__errno>
 8008788:	2322      	movs	r3, #34	; 0x22
 800878a:	2600      	movs	r6, #0
 800878c:	4f06      	ldr	r7, [pc, #24]	; (80087a8 <log+0x5c>)
 800878e:	6003      	str	r3, [r0, #0]
 8008790:	4630      	mov	r0, r6
 8008792:	4639      	mov	r1, r7
 8008794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008796:	f7fc fc0b 	bl	8004fb0 <__errno>
 800879a:	2321      	movs	r3, #33	; 0x21
 800879c:	6003      	str	r3, [r0, #0]
 800879e:	4803      	ldr	r0, [pc, #12]	; (80087ac <log+0x60>)
 80087a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80087a4:	f7ff b932 	b.w	8007a0c <nan>
 80087a8:	fff00000 	.word	0xfff00000
 80087ac:	08009d85 	.word	0x08009d85

080087b0 <pow>:
 80087b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087b4:	4614      	mov	r4, r2
 80087b6:	461d      	mov	r5, r3
 80087b8:	4680      	mov	r8, r0
 80087ba:	4689      	mov	r9, r1
 80087bc:	f000 fa1c 	bl	8008bf8 <__ieee754_pow>
 80087c0:	4622      	mov	r2, r4
 80087c2:	4606      	mov	r6, r0
 80087c4:	460f      	mov	r7, r1
 80087c6:	462b      	mov	r3, r5
 80087c8:	4620      	mov	r0, r4
 80087ca:	4629      	mov	r1, r5
 80087cc:	f7f8 f91e 	bl	8000a0c <__aeabi_dcmpun>
 80087d0:	bbc8      	cbnz	r0, 8008846 <pow+0x96>
 80087d2:	2200      	movs	r2, #0
 80087d4:	2300      	movs	r3, #0
 80087d6:	4640      	mov	r0, r8
 80087d8:	4649      	mov	r1, r9
 80087da:	f7f8 f8e5 	bl	80009a8 <__aeabi_dcmpeq>
 80087de:	b1b8      	cbz	r0, 8008810 <pow+0x60>
 80087e0:	2200      	movs	r2, #0
 80087e2:	2300      	movs	r3, #0
 80087e4:	4620      	mov	r0, r4
 80087e6:	4629      	mov	r1, r5
 80087e8:	f7f8 f8de 	bl	80009a8 <__aeabi_dcmpeq>
 80087ec:	2800      	cmp	r0, #0
 80087ee:	d141      	bne.n	8008874 <pow+0xc4>
 80087f0:	4620      	mov	r0, r4
 80087f2:	4629      	mov	r1, r5
 80087f4:	f000 f844 	bl	8008880 <finite>
 80087f8:	b328      	cbz	r0, 8008846 <pow+0x96>
 80087fa:	2200      	movs	r2, #0
 80087fc:	2300      	movs	r3, #0
 80087fe:	4620      	mov	r0, r4
 8008800:	4629      	mov	r1, r5
 8008802:	f7f8 f8db 	bl	80009bc <__aeabi_dcmplt>
 8008806:	b1f0      	cbz	r0, 8008846 <pow+0x96>
 8008808:	f7fc fbd2 	bl	8004fb0 <__errno>
 800880c:	2322      	movs	r3, #34	; 0x22
 800880e:	e019      	b.n	8008844 <pow+0x94>
 8008810:	4630      	mov	r0, r6
 8008812:	4639      	mov	r1, r7
 8008814:	f000 f834 	bl	8008880 <finite>
 8008818:	b9c8      	cbnz	r0, 800884e <pow+0x9e>
 800881a:	4640      	mov	r0, r8
 800881c:	4649      	mov	r1, r9
 800881e:	f000 f82f 	bl	8008880 <finite>
 8008822:	b1a0      	cbz	r0, 800884e <pow+0x9e>
 8008824:	4620      	mov	r0, r4
 8008826:	4629      	mov	r1, r5
 8008828:	f000 f82a 	bl	8008880 <finite>
 800882c:	b178      	cbz	r0, 800884e <pow+0x9e>
 800882e:	4632      	mov	r2, r6
 8008830:	463b      	mov	r3, r7
 8008832:	4630      	mov	r0, r6
 8008834:	4639      	mov	r1, r7
 8008836:	f7f8 f8e9 	bl	8000a0c <__aeabi_dcmpun>
 800883a:	2800      	cmp	r0, #0
 800883c:	d0e4      	beq.n	8008808 <pow+0x58>
 800883e:	f7fc fbb7 	bl	8004fb0 <__errno>
 8008842:	2321      	movs	r3, #33	; 0x21
 8008844:	6003      	str	r3, [r0, #0]
 8008846:	4630      	mov	r0, r6
 8008848:	4639      	mov	r1, r7
 800884a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800884e:	2200      	movs	r2, #0
 8008850:	2300      	movs	r3, #0
 8008852:	4630      	mov	r0, r6
 8008854:	4639      	mov	r1, r7
 8008856:	f7f8 f8a7 	bl	80009a8 <__aeabi_dcmpeq>
 800885a:	2800      	cmp	r0, #0
 800885c:	d0f3      	beq.n	8008846 <pow+0x96>
 800885e:	4640      	mov	r0, r8
 8008860:	4649      	mov	r1, r9
 8008862:	f000 f80d 	bl	8008880 <finite>
 8008866:	2800      	cmp	r0, #0
 8008868:	d0ed      	beq.n	8008846 <pow+0x96>
 800886a:	4620      	mov	r0, r4
 800886c:	4629      	mov	r1, r5
 800886e:	f000 f807 	bl	8008880 <finite>
 8008872:	e7c8      	b.n	8008806 <pow+0x56>
 8008874:	2600      	movs	r6, #0
 8008876:	4f01      	ldr	r7, [pc, #4]	; (800887c <pow+0xcc>)
 8008878:	e7e5      	b.n	8008846 <pow+0x96>
 800887a:	bf00      	nop
 800887c:	3ff00000 	.word	0x3ff00000

08008880 <finite>:
 8008880:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8008884:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008888:	0fc0      	lsrs	r0, r0, #31
 800888a:	4770      	bx	lr
 800888c:	0000      	movs	r0, r0
	...

08008890 <__ieee754_log>:
 8008890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008894:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008898:	4602      	mov	r2, r0
 800889a:	460b      	mov	r3, r1
 800889c:	460d      	mov	r5, r1
 800889e:	b087      	sub	sp, #28
 80088a0:	da24      	bge.n	80088ec <__ieee754_log+0x5c>
 80088a2:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80088a6:	4304      	orrs	r4, r0
 80088a8:	d108      	bne.n	80088bc <__ieee754_log+0x2c>
 80088aa:	2200      	movs	r2, #0
 80088ac:	2300      	movs	r3, #0
 80088ae:	2000      	movs	r0, #0
 80088b0:	49cb      	ldr	r1, [pc, #812]	; (8008be0 <__ieee754_log+0x350>)
 80088b2:	f7f7 ff3b 	bl	800072c <__aeabi_ddiv>
 80088b6:	b007      	add	sp, #28
 80088b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088bc:	2900      	cmp	r1, #0
 80088be:	da04      	bge.n	80088ca <__ieee754_log+0x3a>
 80088c0:	f7f7 fc52 	bl	8000168 <__aeabi_dsub>
 80088c4:	2200      	movs	r2, #0
 80088c6:	2300      	movs	r3, #0
 80088c8:	e7f3      	b.n	80088b2 <__ieee754_log+0x22>
 80088ca:	2200      	movs	r2, #0
 80088cc:	4bc5      	ldr	r3, [pc, #788]	; (8008be4 <__ieee754_log+0x354>)
 80088ce:	f7f7 fe03 	bl	80004d8 <__aeabi_dmul>
 80088d2:	460b      	mov	r3, r1
 80088d4:	460d      	mov	r5, r1
 80088d6:	4602      	mov	r2, r0
 80088d8:	f06f 0135 	mvn.w	r1, #53	; 0x35
 80088dc:	48c2      	ldr	r0, [pc, #776]	; (8008be8 <__ieee754_log+0x358>)
 80088de:	4285      	cmp	r5, r0
 80088e0:	dd06      	ble.n	80088f0 <__ieee754_log+0x60>
 80088e2:	4610      	mov	r0, r2
 80088e4:	4619      	mov	r1, r3
 80088e6:	f7f7 fc41 	bl	800016c <__adddf3>
 80088ea:	e7e4      	b.n	80088b6 <__ieee754_log+0x26>
 80088ec:	2100      	movs	r1, #0
 80088ee:	e7f5      	b.n	80088dc <__ieee754_log+0x4c>
 80088f0:	152c      	asrs	r4, r5, #20
 80088f2:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80088f6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80088fa:	440c      	add	r4, r1
 80088fc:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 8008900:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 8008904:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
 8008908:	f086 517f 	eor.w	r1, r6, #1069547520	; 0x3fc00000
 800890c:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 8008910:	ea41 0305 	orr.w	r3, r1, r5
 8008914:	4610      	mov	r0, r2
 8008916:	4619      	mov	r1, r3
 8008918:	2200      	movs	r2, #0
 800891a:	4bb4      	ldr	r3, [pc, #720]	; (8008bec <__ieee754_log+0x35c>)
 800891c:	f7f7 fc24 	bl	8000168 <__aeabi_dsub>
 8008920:	1cab      	adds	r3, r5, #2
 8008922:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008926:	2b02      	cmp	r3, #2
 8008928:	4682      	mov	sl, r0
 800892a:	468b      	mov	fp, r1
 800892c:	f04f 0200 	mov.w	r2, #0
 8008930:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 8008934:	dc53      	bgt.n	80089de <__ieee754_log+0x14e>
 8008936:	2300      	movs	r3, #0
 8008938:	f7f8 f836 	bl	80009a8 <__aeabi_dcmpeq>
 800893c:	b1d0      	cbz	r0, 8008974 <__ieee754_log+0xe4>
 800893e:	2c00      	cmp	r4, #0
 8008940:	f000 8122 	beq.w	8008b88 <__ieee754_log+0x2f8>
 8008944:	4620      	mov	r0, r4
 8008946:	f7f7 fd5d 	bl	8000404 <__aeabi_i2d>
 800894a:	a391      	add	r3, pc, #580	; (adr r3, 8008b90 <__ieee754_log+0x300>)
 800894c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008950:	4606      	mov	r6, r0
 8008952:	460f      	mov	r7, r1
 8008954:	f7f7 fdc0 	bl	80004d8 <__aeabi_dmul>
 8008958:	a38f      	add	r3, pc, #572	; (adr r3, 8008b98 <__ieee754_log+0x308>)
 800895a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895e:	4604      	mov	r4, r0
 8008960:	460d      	mov	r5, r1
 8008962:	4630      	mov	r0, r6
 8008964:	4639      	mov	r1, r7
 8008966:	f7f7 fdb7 	bl	80004d8 <__aeabi_dmul>
 800896a:	4602      	mov	r2, r0
 800896c:	460b      	mov	r3, r1
 800896e:	4620      	mov	r0, r4
 8008970:	4629      	mov	r1, r5
 8008972:	e7b8      	b.n	80088e6 <__ieee754_log+0x56>
 8008974:	a38a      	add	r3, pc, #552	; (adr r3, 8008ba0 <__ieee754_log+0x310>)
 8008976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800897a:	4650      	mov	r0, sl
 800897c:	4659      	mov	r1, fp
 800897e:	f7f7 fdab 	bl	80004d8 <__aeabi_dmul>
 8008982:	4602      	mov	r2, r0
 8008984:	460b      	mov	r3, r1
 8008986:	2000      	movs	r0, #0
 8008988:	4999      	ldr	r1, [pc, #612]	; (8008bf0 <__ieee754_log+0x360>)
 800898a:	f7f7 fbed 	bl	8000168 <__aeabi_dsub>
 800898e:	4652      	mov	r2, sl
 8008990:	4606      	mov	r6, r0
 8008992:	460f      	mov	r7, r1
 8008994:	465b      	mov	r3, fp
 8008996:	4650      	mov	r0, sl
 8008998:	4659      	mov	r1, fp
 800899a:	f7f7 fd9d 	bl	80004d8 <__aeabi_dmul>
 800899e:	4602      	mov	r2, r0
 80089a0:	460b      	mov	r3, r1
 80089a2:	4630      	mov	r0, r6
 80089a4:	4639      	mov	r1, r7
 80089a6:	f7f7 fd97 	bl	80004d8 <__aeabi_dmul>
 80089aa:	4606      	mov	r6, r0
 80089ac:	460f      	mov	r7, r1
 80089ae:	b914      	cbnz	r4, 80089b6 <__ieee754_log+0x126>
 80089b0:	4632      	mov	r2, r6
 80089b2:	463b      	mov	r3, r7
 80089b4:	e0a2      	b.n	8008afc <__ieee754_log+0x26c>
 80089b6:	4620      	mov	r0, r4
 80089b8:	f7f7 fd24 	bl	8000404 <__aeabi_i2d>
 80089bc:	a374      	add	r3, pc, #464	; (adr r3, 8008b90 <__ieee754_log+0x300>)
 80089be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c2:	4680      	mov	r8, r0
 80089c4:	4689      	mov	r9, r1
 80089c6:	f7f7 fd87 	bl	80004d8 <__aeabi_dmul>
 80089ca:	a373      	add	r3, pc, #460	; (adr r3, 8008b98 <__ieee754_log+0x308>)
 80089cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d0:	4604      	mov	r4, r0
 80089d2:	460d      	mov	r5, r1
 80089d4:	4640      	mov	r0, r8
 80089d6:	4649      	mov	r1, r9
 80089d8:	f7f7 fd7e 	bl	80004d8 <__aeabi_dmul>
 80089dc:	e0a7      	b.n	8008b2e <__ieee754_log+0x29e>
 80089de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80089e2:	f7f7 fbc3 	bl	800016c <__adddf3>
 80089e6:	4602      	mov	r2, r0
 80089e8:	460b      	mov	r3, r1
 80089ea:	4650      	mov	r0, sl
 80089ec:	4659      	mov	r1, fp
 80089ee:	f7f7 fe9d 	bl	800072c <__aeabi_ddiv>
 80089f2:	e9cd 0100 	strd	r0, r1, [sp]
 80089f6:	4620      	mov	r0, r4
 80089f8:	f7f7 fd04 	bl	8000404 <__aeabi_i2d>
 80089fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a04:	4610      	mov	r0, r2
 8008a06:	4619      	mov	r1, r3
 8008a08:	f7f7 fd66 	bl	80004d8 <__aeabi_dmul>
 8008a0c:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8008a10:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8008a14:	4602      	mov	r2, r0
 8008a16:	9305      	str	r3, [sp, #20]
 8008a18:	460b      	mov	r3, r1
 8008a1a:	4606      	mov	r6, r0
 8008a1c:	460f      	mov	r7, r1
 8008a1e:	f7f7 fd5b 	bl	80004d8 <__aeabi_dmul>
 8008a22:	a361      	add	r3, pc, #388	; (adr r3, 8008ba8 <__ieee754_log+0x318>)
 8008a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a28:	4680      	mov	r8, r0
 8008a2a:	4689      	mov	r9, r1
 8008a2c:	f7f7 fd54 	bl	80004d8 <__aeabi_dmul>
 8008a30:	a35f      	add	r3, pc, #380	; (adr r3, 8008bb0 <__ieee754_log+0x320>)
 8008a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a36:	f7f7 fb99 	bl	800016c <__adddf3>
 8008a3a:	4642      	mov	r2, r8
 8008a3c:	464b      	mov	r3, r9
 8008a3e:	f7f7 fd4b 	bl	80004d8 <__aeabi_dmul>
 8008a42:	a35d      	add	r3, pc, #372	; (adr r3, 8008bb8 <__ieee754_log+0x328>)
 8008a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a48:	f7f7 fb90 	bl	800016c <__adddf3>
 8008a4c:	4642      	mov	r2, r8
 8008a4e:	464b      	mov	r3, r9
 8008a50:	f7f7 fd42 	bl	80004d8 <__aeabi_dmul>
 8008a54:	a35a      	add	r3, pc, #360	; (adr r3, 8008bc0 <__ieee754_log+0x330>)
 8008a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5a:	f7f7 fb87 	bl	800016c <__adddf3>
 8008a5e:	4632      	mov	r2, r6
 8008a60:	463b      	mov	r3, r7
 8008a62:	f7f7 fd39 	bl	80004d8 <__aeabi_dmul>
 8008a66:	a358      	add	r3, pc, #352	; (adr r3, 8008bc8 <__ieee754_log+0x338>)
 8008a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6c:	4606      	mov	r6, r0
 8008a6e:	460f      	mov	r7, r1
 8008a70:	4640      	mov	r0, r8
 8008a72:	4649      	mov	r1, r9
 8008a74:	f7f7 fd30 	bl	80004d8 <__aeabi_dmul>
 8008a78:	a355      	add	r3, pc, #340	; (adr r3, 8008bd0 <__ieee754_log+0x340>)
 8008a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7e:	f7f7 fb75 	bl	800016c <__adddf3>
 8008a82:	4642      	mov	r2, r8
 8008a84:	464b      	mov	r3, r9
 8008a86:	f7f7 fd27 	bl	80004d8 <__aeabi_dmul>
 8008a8a:	a353      	add	r3, pc, #332	; (adr r3, 8008bd8 <__ieee754_log+0x348>)
 8008a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a90:	f7f7 fb6c 	bl	800016c <__adddf3>
 8008a94:	4642      	mov	r2, r8
 8008a96:	464b      	mov	r3, r9
 8008a98:	f7f7 fd1e 	bl	80004d8 <__aeabi_dmul>
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	4639      	mov	r1, r7
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	f7f7 fb62 	bl	800016c <__adddf3>
 8008aa8:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8008aac:	9b05      	ldr	r3, [sp, #20]
 8008aae:	3551      	adds	r5, #81	; 0x51
 8008ab0:	431d      	orrs	r5, r3
 8008ab2:	2d00      	cmp	r5, #0
 8008ab4:	4680      	mov	r8, r0
 8008ab6:	4689      	mov	r9, r1
 8008ab8:	dd48      	ble.n	8008b4c <__ieee754_log+0x2bc>
 8008aba:	2200      	movs	r2, #0
 8008abc:	4b4c      	ldr	r3, [pc, #304]	; (8008bf0 <__ieee754_log+0x360>)
 8008abe:	4650      	mov	r0, sl
 8008ac0:	4659      	mov	r1, fp
 8008ac2:	f7f7 fd09 	bl	80004d8 <__aeabi_dmul>
 8008ac6:	4652      	mov	r2, sl
 8008ac8:	465b      	mov	r3, fp
 8008aca:	f7f7 fd05 	bl	80004d8 <__aeabi_dmul>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	4606      	mov	r6, r0
 8008ad4:	460f      	mov	r7, r1
 8008ad6:	4640      	mov	r0, r8
 8008ad8:	4649      	mov	r1, r9
 8008ada:	f7f7 fb47 	bl	800016c <__adddf3>
 8008ade:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ae2:	f7f7 fcf9 	bl	80004d8 <__aeabi_dmul>
 8008ae6:	4680      	mov	r8, r0
 8008ae8:	4689      	mov	r9, r1
 8008aea:	b964      	cbnz	r4, 8008b06 <__ieee754_log+0x276>
 8008aec:	4602      	mov	r2, r0
 8008aee:	460b      	mov	r3, r1
 8008af0:	4630      	mov	r0, r6
 8008af2:	4639      	mov	r1, r7
 8008af4:	f7f7 fb38 	bl	8000168 <__aeabi_dsub>
 8008af8:	4602      	mov	r2, r0
 8008afa:	460b      	mov	r3, r1
 8008afc:	4650      	mov	r0, sl
 8008afe:	4659      	mov	r1, fp
 8008b00:	f7f7 fb32 	bl	8000168 <__aeabi_dsub>
 8008b04:	e6d7      	b.n	80088b6 <__ieee754_log+0x26>
 8008b06:	a322      	add	r3, pc, #136	; (adr r3, 8008b90 <__ieee754_log+0x300>)
 8008b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b10:	f7f7 fce2 	bl	80004d8 <__aeabi_dmul>
 8008b14:	a320      	add	r3, pc, #128	; (adr r3, 8008b98 <__ieee754_log+0x308>)
 8008b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1a:	4604      	mov	r4, r0
 8008b1c:	460d      	mov	r5, r1
 8008b1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b22:	f7f7 fcd9 	bl	80004d8 <__aeabi_dmul>
 8008b26:	4642      	mov	r2, r8
 8008b28:	464b      	mov	r3, r9
 8008b2a:	f7f7 fb1f 	bl	800016c <__adddf3>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	460b      	mov	r3, r1
 8008b32:	4630      	mov	r0, r6
 8008b34:	4639      	mov	r1, r7
 8008b36:	f7f7 fb17 	bl	8000168 <__aeabi_dsub>
 8008b3a:	4652      	mov	r2, sl
 8008b3c:	465b      	mov	r3, fp
 8008b3e:	f7f7 fb13 	bl	8000168 <__aeabi_dsub>
 8008b42:	4602      	mov	r2, r0
 8008b44:	460b      	mov	r3, r1
 8008b46:	4620      	mov	r0, r4
 8008b48:	4629      	mov	r1, r5
 8008b4a:	e7d9      	b.n	8008b00 <__ieee754_log+0x270>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	460b      	mov	r3, r1
 8008b50:	4650      	mov	r0, sl
 8008b52:	4659      	mov	r1, fp
 8008b54:	f7f7 fb08 	bl	8000168 <__aeabi_dsub>
 8008b58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b5c:	f7f7 fcbc 	bl	80004d8 <__aeabi_dmul>
 8008b60:	4606      	mov	r6, r0
 8008b62:	460f      	mov	r7, r1
 8008b64:	2c00      	cmp	r4, #0
 8008b66:	f43f af23 	beq.w	80089b0 <__ieee754_log+0x120>
 8008b6a:	a309      	add	r3, pc, #36	; (adr r3, 8008b90 <__ieee754_log+0x300>)
 8008b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b74:	f7f7 fcb0 	bl	80004d8 <__aeabi_dmul>
 8008b78:	a307      	add	r3, pc, #28	; (adr r3, 8008b98 <__ieee754_log+0x308>)
 8008b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7e:	4604      	mov	r4, r0
 8008b80:	460d      	mov	r5, r1
 8008b82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b86:	e727      	b.n	80089d8 <__ieee754_log+0x148>
 8008b88:	2000      	movs	r0, #0
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	e693      	b.n	80088b6 <__ieee754_log+0x26>
 8008b8e:	bf00      	nop
 8008b90:	fee00000 	.word	0xfee00000
 8008b94:	3fe62e42 	.word	0x3fe62e42
 8008b98:	35793c76 	.word	0x35793c76
 8008b9c:	3dea39ef 	.word	0x3dea39ef
 8008ba0:	55555555 	.word	0x55555555
 8008ba4:	3fd55555 	.word	0x3fd55555
 8008ba8:	df3e5244 	.word	0xdf3e5244
 8008bac:	3fc2f112 	.word	0x3fc2f112
 8008bb0:	96cb03de 	.word	0x96cb03de
 8008bb4:	3fc74664 	.word	0x3fc74664
 8008bb8:	94229359 	.word	0x94229359
 8008bbc:	3fd24924 	.word	0x3fd24924
 8008bc0:	55555593 	.word	0x55555593
 8008bc4:	3fe55555 	.word	0x3fe55555
 8008bc8:	d078c69f 	.word	0xd078c69f
 8008bcc:	3fc39a09 	.word	0x3fc39a09
 8008bd0:	1d8e78af 	.word	0x1d8e78af
 8008bd4:	3fcc71c5 	.word	0x3fcc71c5
 8008bd8:	9997fa04 	.word	0x9997fa04
 8008bdc:	3fd99999 	.word	0x3fd99999
 8008be0:	c3500000 	.word	0xc3500000
 8008be4:	43500000 	.word	0x43500000
 8008be8:	7fefffff 	.word	0x7fefffff
 8008bec:	3ff00000 	.word	0x3ff00000
 8008bf0:	3fe00000 	.word	0x3fe00000
 8008bf4:	00000000 	.word	0x00000000

08008bf8 <__ieee754_pow>:
 8008bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bfc:	b093      	sub	sp, #76	; 0x4c
 8008bfe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c02:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8008c06:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8008c0a:	4689      	mov	r9, r1
 8008c0c:	ea56 0102 	orrs.w	r1, r6, r2
 8008c10:	4680      	mov	r8, r0
 8008c12:	d111      	bne.n	8008c38 <__ieee754_pow+0x40>
 8008c14:	1803      	adds	r3, r0, r0
 8008c16:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8008c1a:	4152      	adcs	r2, r2
 8008c1c:	4299      	cmp	r1, r3
 8008c1e:	4b82      	ldr	r3, [pc, #520]	; (8008e28 <__ieee754_pow+0x230>)
 8008c20:	4193      	sbcs	r3, r2
 8008c22:	f080 84ba 	bcs.w	800959a <__ieee754_pow+0x9a2>
 8008c26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c2a:	4640      	mov	r0, r8
 8008c2c:	4649      	mov	r1, r9
 8008c2e:	f7f7 fa9d 	bl	800016c <__adddf3>
 8008c32:	4683      	mov	fp, r0
 8008c34:	468c      	mov	ip, r1
 8008c36:	e06f      	b.n	8008d18 <__ieee754_pow+0x120>
 8008c38:	4b7c      	ldr	r3, [pc, #496]	; (8008e2c <__ieee754_pow+0x234>)
 8008c3a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8008c3e:	429c      	cmp	r4, r3
 8008c40:	464d      	mov	r5, r9
 8008c42:	4682      	mov	sl, r0
 8008c44:	dc06      	bgt.n	8008c54 <__ieee754_pow+0x5c>
 8008c46:	d101      	bne.n	8008c4c <__ieee754_pow+0x54>
 8008c48:	2800      	cmp	r0, #0
 8008c4a:	d1ec      	bne.n	8008c26 <__ieee754_pow+0x2e>
 8008c4c:	429e      	cmp	r6, r3
 8008c4e:	dc01      	bgt.n	8008c54 <__ieee754_pow+0x5c>
 8008c50:	d10f      	bne.n	8008c72 <__ieee754_pow+0x7a>
 8008c52:	b172      	cbz	r2, 8008c72 <__ieee754_pow+0x7a>
 8008c54:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8008c58:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8008c5c:	ea55 050a 	orrs.w	r5, r5, sl
 8008c60:	d1e1      	bne.n	8008c26 <__ieee754_pow+0x2e>
 8008c62:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008c66:	18db      	adds	r3, r3, r3
 8008c68:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8008c6c:	4152      	adcs	r2, r2
 8008c6e:	429d      	cmp	r5, r3
 8008c70:	e7d5      	b.n	8008c1e <__ieee754_pow+0x26>
 8008c72:	2d00      	cmp	r5, #0
 8008c74:	da39      	bge.n	8008cea <__ieee754_pow+0xf2>
 8008c76:	4b6e      	ldr	r3, [pc, #440]	; (8008e30 <__ieee754_pow+0x238>)
 8008c78:	429e      	cmp	r6, r3
 8008c7a:	dc52      	bgt.n	8008d22 <__ieee754_pow+0x12a>
 8008c7c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008c80:	429e      	cmp	r6, r3
 8008c82:	f340 849d 	ble.w	80095c0 <__ieee754_pow+0x9c8>
 8008c86:	1533      	asrs	r3, r6, #20
 8008c88:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008c8c:	2b14      	cmp	r3, #20
 8008c8e:	dd0f      	ble.n	8008cb0 <__ieee754_pow+0xb8>
 8008c90:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008c94:	fa22 f103 	lsr.w	r1, r2, r3
 8008c98:	fa01 f303 	lsl.w	r3, r1, r3
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	f040 848f 	bne.w	80095c0 <__ieee754_pow+0x9c8>
 8008ca2:	f001 0101 	and.w	r1, r1, #1
 8008ca6:	f1c1 0302 	rsb	r3, r1, #2
 8008caa:	9300      	str	r3, [sp, #0]
 8008cac:	b182      	cbz	r2, 8008cd0 <__ieee754_pow+0xd8>
 8008cae:	e05d      	b.n	8008d6c <__ieee754_pow+0x174>
 8008cb0:	2a00      	cmp	r2, #0
 8008cb2:	d159      	bne.n	8008d68 <__ieee754_pow+0x170>
 8008cb4:	f1c3 0314 	rsb	r3, r3, #20
 8008cb8:	fa46 f103 	asr.w	r1, r6, r3
 8008cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8008cc0:	42b3      	cmp	r3, r6
 8008cc2:	f040 847a 	bne.w	80095ba <__ieee754_pow+0x9c2>
 8008cc6:	f001 0101 	and.w	r1, r1, #1
 8008cca:	f1c1 0302 	rsb	r3, r1, #2
 8008cce:	9300      	str	r3, [sp, #0]
 8008cd0:	4b58      	ldr	r3, [pc, #352]	; (8008e34 <__ieee754_pow+0x23c>)
 8008cd2:	429e      	cmp	r6, r3
 8008cd4:	d132      	bne.n	8008d3c <__ieee754_pow+0x144>
 8008cd6:	2f00      	cmp	r7, #0
 8008cd8:	f280 846b 	bge.w	80095b2 <__ieee754_pow+0x9ba>
 8008cdc:	4642      	mov	r2, r8
 8008cde:	464b      	mov	r3, r9
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	4954      	ldr	r1, [pc, #336]	; (8008e34 <__ieee754_pow+0x23c>)
 8008ce4:	f7f7 fd22 	bl	800072c <__aeabi_ddiv>
 8008ce8:	e7a3      	b.n	8008c32 <__ieee754_pow+0x3a>
 8008cea:	2300      	movs	r3, #0
 8008cec:	9300      	str	r3, [sp, #0]
 8008cee:	2a00      	cmp	r2, #0
 8008cf0:	d13c      	bne.n	8008d6c <__ieee754_pow+0x174>
 8008cf2:	4b4e      	ldr	r3, [pc, #312]	; (8008e2c <__ieee754_pow+0x234>)
 8008cf4:	429e      	cmp	r6, r3
 8008cf6:	d1eb      	bne.n	8008cd0 <__ieee754_pow+0xd8>
 8008cf8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008cfc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008d00:	ea53 030a 	orrs.w	r3, r3, sl
 8008d04:	f000 8449 	beq.w	800959a <__ieee754_pow+0x9a2>
 8008d08:	4b4b      	ldr	r3, [pc, #300]	; (8008e38 <__ieee754_pow+0x240>)
 8008d0a:	429c      	cmp	r4, r3
 8008d0c:	dd0b      	ble.n	8008d26 <__ieee754_pow+0x12e>
 8008d0e:	2f00      	cmp	r7, #0
 8008d10:	f2c0 8449 	blt.w	80095a6 <__ieee754_pow+0x9ae>
 8008d14:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8008d18:	4658      	mov	r0, fp
 8008d1a:	4661      	mov	r1, ip
 8008d1c:	b013      	add	sp, #76	; 0x4c
 8008d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d22:	2302      	movs	r3, #2
 8008d24:	e7e2      	b.n	8008cec <__ieee754_pow+0xf4>
 8008d26:	2f00      	cmp	r7, #0
 8008d28:	f04f 0b00 	mov.w	fp, #0
 8008d2c:	f04f 0c00 	mov.w	ip, #0
 8008d30:	daf2      	bge.n	8008d18 <__ieee754_pow+0x120>
 8008d32:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8008d36:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8008d3a:	e7ed      	b.n	8008d18 <__ieee754_pow+0x120>
 8008d3c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8008d40:	d106      	bne.n	8008d50 <__ieee754_pow+0x158>
 8008d42:	4642      	mov	r2, r8
 8008d44:	464b      	mov	r3, r9
 8008d46:	4640      	mov	r0, r8
 8008d48:	4649      	mov	r1, r9
 8008d4a:	f7f7 fbc5 	bl	80004d8 <__aeabi_dmul>
 8008d4e:	e770      	b.n	8008c32 <__ieee754_pow+0x3a>
 8008d50:	4b3a      	ldr	r3, [pc, #232]	; (8008e3c <__ieee754_pow+0x244>)
 8008d52:	429f      	cmp	r7, r3
 8008d54:	d10a      	bne.n	8008d6c <__ieee754_pow+0x174>
 8008d56:	2d00      	cmp	r5, #0
 8008d58:	db08      	blt.n	8008d6c <__ieee754_pow+0x174>
 8008d5a:	4640      	mov	r0, r8
 8008d5c:	4649      	mov	r1, r9
 8008d5e:	b013      	add	sp, #76	; 0x4c
 8008d60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d64:	f000 bd0a 	b.w	800977c <__ieee754_sqrt>
 8008d68:	2300      	movs	r3, #0
 8008d6a:	9300      	str	r3, [sp, #0]
 8008d6c:	4640      	mov	r0, r8
 8008d6e:	4649      	mov	r1, r9
 8008d70:	f000 fc58 	bl	8009624 <fabs>
 8008d74:	4683      	mov	fp, r0
 8008d76:	468c      	mov	ip, r1
 8008d78:	f1ba 0f00 	cmp.w	sl, #0
 8008d7c:	d128      	bne.n	8008dd0 <__ieee754_pow+0x1d8>
 8008d7e:	b124      	cbz	r4, 8008d8a <__ieee754_pow+0x192>
 8008d80:	4b2c      	ldr	r3, [pc, #176]	; (8008e34 <__ieee754_pow+0x23c>)
 8008d82:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d122      	bne.n	8008dd0 <__ieee754_pow+0x1d8>
 8008d8a:	2f00      	cmp	r7, #0
 8008d8c:	da07      	bge.n	8008d9e <__ieee754_pow+0x1a6>
 8008d8e:	465a      	mov	r2, fp
 8008d90:	4663      	mov	r3, ip
 8008d92:	2000      	movs	r0, #0
 8008d94:	4927      	ldr	r1, [pc, #156]	; (8008e34 <__ieee754_pow+0x23c>)
 8008d96:	f7f7 fcc9 	bl	800072c <__aeabi_ddiv>
 8008d9a:	4683      	mov	fp, r0
 8008d9c:	468c      	mov	ip, r1
 8008d9e:	2d00      	cmp	r5, #0
 8008da0:	daba      	bge.n	8008d18 <__ieee754_pow+0x120>
 8008da2:	9b00      	ldr	r3, [sp, #0]
 8008da4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008da8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008dac:	431c      	orrs	r4, r3
 8008dae:	d108      	bne.n	8008dc2 <__ieee754_pow+0x1ca>
 8008db0:	465a      	mov	r2, fp
 8008db2:	4663      	mov	r3, ip
 8008db4:	4658      	mov	r0, fp
 8008db6:	4661      	mov	r1, ip
 8008db8:	f7f7 f9d6 	bl	8000168 <__aeabi_dsub>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	e790      	b.n	8008ce4 <__ieee754_pow+0xec>
 8008dc2:	9b00      	ldr	r3, [sp, #0]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d1a7      	bne.n	8008d18 <__ieee754_pow+0x120>
 8008dc8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8008dcc:	469c      	mov	ip, r3
 8008dce:	e7a3      	b.n	8008d18 <__ieee754_pow+0x120>
 8008dd0:	0feb      	lsrs	r3, r5, #31
 8008dd2:	3b01      	subs	r3, #1
 8008dd4:	930c      	str	r3, [sp, #48]	; 0x30
 8008dd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008dd8:	9b00      	ldr	r3, [sp, #0]
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	d104      	bne.n	8008de8 <__ieee754_pow+0x1f0>
 8008dde:	4642      	mov	r2, r8
 8008de0:	464b      	mov	r3, r9
 8008de2:	4640      	mov	r0, r8
 8008de4:	4649      	mov	r1, r9
 8008de6:	e7e7      	b.n	8008db8 <__ieee754_pow+0x1c0>
 8008de8:	4b15      	ldr	r3, [pc, #84]	; (8008e40 <__ieee754_pow+0x248>)
 8008dea:	429e      	cmp	r6, r3
 8008dec:	f340 80f6 	ble.w	8008fdc <__ieee754_pow+0x3e4>
 8008df0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008df4:	429e      	cmp	r6, r3
 8008df6:	4b10      	ldr	r3, [pc, #64]	; (8008e38 <__ieee754_pow+0x240>)
 8008df8:	dd09      	ble.n	8008e0e <__ieee754_pow+0x216>
 8008dfa:	429c      	cmp	r4, r3
 8008dfc:	dc0c      	bgt.n	8008e18 <__ieee754_pow+0x220>
 8008dfe:	2f00      	cmp	r7, #0
 8008e00:	da0c      	bge.n	8008e1c <__ieee754_pow+0x224>
 8008e02:	2000      	movs	r0, #0
 8008e04:	b013      	add	sp, #76	; 0x4c
 8008e06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e0a:	f000 bcb2 	b.w	8009772 <__math_oflow>
 8008e0e:	429c      	cmp	r4, r3
 8008e10:	dbf5      	blt.n	8008dfe <__ieee754_pow+0x206>
 8008e12:	4b08      	ldr	r3, [pc, #32]	; (8008e34 <__ieee754_pow+0x23c>)
 8008e14:	429c      	cmp	r4, r3
 8008e16:	dd15      	ble.n	8008e44 <__ieee754_pow+0x24c>
 8008e18:	2f00      	cmp	r7, #0
 8008e1a:	dcf2      	bgt.n	8008e02 <__ieee754_pow+0x20a>
 8008e1c:	2000      	movs	r0, #0
 8008e1e:	b013      	add	sp, #76	; 0x4c
 8008e20:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e24:	f000 bca0 	b.w	8009768 <__math_uflow>
 8008e28:	fff00000 	.word	0xfff00000
 8008e2c:	7ff00000 	.word	0x7ff00000
 8008e30:	433fffff 	.word	0x433fffff
 8008e34:	3ff00000 	.word	0x3ff00000
 8008e38:	3fefffff 	.word	0x3fefffff
 8008e3c:	3fe00000 	.word	0x3fe00000
 8008e40:	41e00000 	.word	0x41e00000
 8008e44:	4661      	mov	r1, ip
 8008e46:	2200      	movs	r2, #0
 8008e48:	4658      	mov	r0, fp
 8008e4a:	4b5f      	ldr	r3, [pc, #380]	; (8008fc8 <__ieee754_pow+0x3d0>)
 8008e4c:	f7f7 f98c 	bl	8000168 <__aeabi_dsub>
 8008e50:	a355      	add	r3, pc, #340	; (adr r3, 8008fa8 <__ieee754_pow+0x3b0>)
 8008e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e56:	4604      	mov	r4, r0
 8008e58:	460d      	mov	r5, r1
 8008e5a:	f7f7 fb3d 	bl	80004d8 <__aeabi_dmul>
 8008e5e:	a354      	add	r3, pc, #336	; (adr r3, 8008fb0 <__ieee754_pow+0x3b8>)
 8008e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e64:	4606      	mov	r6, r0
 8008e66:	460f      	mov	r7, r1
 8008e68:	4620      	mov	r0, r4
 8008e6a:	4629      	mov	r1, r5
 8008e6c:	f7f7 fb34 	bl	80004d8 <__aeabi_dmul>
 8008e70:	2200      	movs	r2, #0
 8008e72:	4682      	mov	sl, r0
 8008e74:	468b      	mov	fp, r1
 8008e76:	4620      	mov	r0, r4
 8008e78:	4629      	mov	r1, r5
 8008e7a:	4b54      	ldr	r3, [pc, #336]	; (8008fcc <__ieee754_pow+0x3d4>)
 8008e7c:	f7f7 fb2c 	bl	80004d8 <__aeabi_dmul>
 8008e80:	4602      	mov	r2, r0
 8008e82:	460b      	mov	r3, r1
 8008e84:	a14c      	add	r1, pc, #304	; (adr r1, 8008fb8 <__ieee754_pow+0x3c0>)
 8008e86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e8a:	f7f7 f96d 	bl	8000168 <__aeabi_dsub>
 8008e8e:	4622      	mov	r2, r4
 8008e90:	462b      	mov	r3, r5
 8008e92:	f7f7 fb21 	bl	80004d8 <__aeabi_dmul>
 8008e96:	4602      	mov	r2, r0
 8008e98:	460b      	mov	r3, r1
 8008e9a:	2000      	movs	r0, #0
 8008e9c:	494c      	ldr	r1, [pc, #304]	; (8008fd0 <__ieee754_pow+0x3d8>)
 8008e9e:	f7f7 f963 	bl	8000168 <__aeabi_dsub>
 8008ea2:	4622      	mov	r2, r4
 8008ea4:	462b      	mov	r3, r5
 8008ea6:	4680      	mov	r8, r0
 8008ea8:	4689      	mov	r9, r1
 8008eaa:	4620      	mov	r0, r4
 8008eac:	4629      	mov	r1, r5
 8008eae:	f7f7 fb13 	bl	80004d8 <__aeabi_dmul>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	4640      	mov	r0, r8
 8008eb8:	4649      	mov	r1, r9
 8008eba:	f7f7 fb0d 	bl	80004d8 <__aeabi_dmul>
 8008ebe:	a340      	add	r3, pc, #256	; (adr r3, 8008fc0 <__ieee754_pow+0x3c8>)
 8008ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec4:	f7f7 fb08 	bl	80004d8 <__aeabi_dmul>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	460b      	mov	r3, r1
 8008ecc:	4650      	mov	r0, sl
 8008ece:	4659      	mov	r1, fp
 8008ed0:	f7f7 f94a 	bl	8000168 <__aeabi_dsub>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	4604      	mov	r4, r0
 8008eda:	460d      	mov	r5, r1
 8008edc:	4630      	mov	r0, r6
 8008ede:	4639      	mov	r1, r7
 8008ee0:	f7f7 f944 	bl	800016c <__adddf3>
 8008ee4:	2000      	movs	r0, #0
 8008ee6:	4632      	mov	r2, r6
 8008ee8:	463b      	mov	r3, r7
 8008eea:	4682      	mov	sl, r0
 8008eec:	468b      	mov	fp, r1
 8008eee:	f7f7 f93b 	bl	8000168 <__aeabi_dsub>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	4629      	mov	r1, r5
 8008efa:	f7f7 f935 	bl	8000168 <__aeabi_dsub>
 8008efe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008f02:	9b00      	ldr	r3, [sp, #0]
 8008f04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f06:	3b01      	subs	r3, #1
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	f04f 0600 	mov.w	r6, #0
 8008f0e:	f04f 0200 	mov.w	r2, #0
 8008f12:	bf0c      	ite	eq
 8008f14:	4b2f      	ldreq	r3, [pc, #188]	; (8008fd4 <__ieee754_pow+0x3dc>)
 8008f16:	4b2c      	ldrne	r3, [pc, #176]	; (8008fc8 <__ieee754_pow+0x3d0>)
 8008f18:	4604      	mov	r4, r0
 8008f1a:	460d      	mov	r5, r1
 8008f1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f20:	e9cd 2300 	strd	r2, r3, [sp]
 8008f24:	4632      	mov	r2, r6
 8008f26:	463b      	mov	r3, r7
 8008f28:	f7f7 f91e 	bl	8000168 <__aeabi_dsub>
 8008f2c:	4652      	mov	r2, sl
 8008f2e:	465b      	mov	r3, fp
 8008f30:	f7f7 fad2 	bl	80004d8 <__aeabi_dmul>
 8008f34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f38:	4680      	mov	r8, r0
 8008f3a:	4689      	mov	r9, r1
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	4629      	mov	r1, r5
 8008f40:	f7f7 faca 	bl	80004d8 <__aeabi_dmul>
 8008f44:	4602      	mov	r2, r0
 8008f46:	460b      	mov	r3, r1
 8008f48:	4640      	mov	r0, r8
 8008f4a:	4649      	mov	r1, r9
 8008f4c:	f7f7 f90e 	bl	800016c <__adddf3>
 8008f50:	4632      	mov	r2, r6
 8008f52:	463b      	mov	r3, r7
 8008f54:	4680      	mov	r8, r0
 8008f56:	4689      	mov	r9, r1
 8008f58:	4650      	mov	r0, sl
 8008f5a:	4659      	mov	r1, fp
 8008f5c:	f7f7 fabc 	bl	80004d8 <__aeabi_dmul>
 8008f60:	4604      	mov	r4, r0
 8008f62:	460d      	mov	r5, r1
 8008f64:	460b      	mov	r3, r1
 8008f66:	4602      	mov	r2, r0
 8008f68:	4649      	mov	r1, r9
 8008f6a:	4640      	mov	r0, r8
 8008f6c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008f70:	f7f7 f8fc 	bl	800016c <__adddf3>
 8008f74:	4b18      	ldr	r3, [pc, #96]	; (8008fd8 <__ieee754_pow+0x3e0>)
 8008f76:	4682      	mov	sl, r0
 8008f78:	4299      	cmp	r1, r3
 8008f7a:	460f      	mov	r7, r1
 8008f7c:	460e      	mov	r6, r1
 8008f7e:	f340 82e7 	ble.w	8009550 <__ieee754_pow+0x958>
 8008f82:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008f86:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008f8a:	4303      	orrs	r3, r0
 8008f8c:	f000 81e2 	beq.w	8009354 <__ieee754_pow+0x75c>
 8008f90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f94:	2200      	movs	r2, #0
 8008f96:	2300      	movs	r3, #0
 8008f98:	f7f7 fd10 	bl	80009bc <__aeabi_dcmplt>
 8008f9c:	3800      	subs	r0, #0
 8008f9e:	bf18      	it	ne
 8008fa0:	2001      	movne	r0, #1
 8008fa2:	e72f      	b.n	8008e04 <__ieee754_pow+0x20c>
 8008fa4:	f3af 8000 	nop.w
 8008fa8:	60000000 	.word	0x60000000
 8008fac:	3ff71547 	.word	0x3ff71547
 8008fb0:	f85ddf44 	.word	0xf85ddf44
 8008fb4:	3e54ae0b 	.word	0x3e54ae0b
 8008fb8:	55555555 	.word	0x55555555
 8008fbc:	3fd55555 	.word	0x3fd55555
 8008fc0:	652b82fe 	.word	0x652b82fe
 8008fc4:	3ff71547 	.word	0x3ff71547
 8008fc8:	3ff00000 	.word	0x3ff00000
 8008fcc:	3fd00000 	.word	0x3fd00000
 8008fd0:	3fe00000 	.word	0x3fe00000
 8008fd4:	bff00000 	.word	0xbff00000
 8008fd8:	408fffff 	.word	0x408fffff
 8008fdc:	4bd4      	ldr	r3, [pc, #848]	; (8009330 <__ieee754_pow+0x738>)
 8008fde:	2200      	movs	r2, #0
 8008fe0:	402b      	ands	r3, r5
 8008fe2:	b943      	cbnz	r3, 8008ff6 <__ieee754_pow+0x3fe>
 8008fe4:	4658      	mov	r0, fp
 8008fe6:	4661      	mov	r1, ip
 8008fe8:	4bd2      	ldr	r3, [pc, #840]	; (8009334 <__ieee754_pow+0x73c>)
 8008fea:	f7f7 fa75 	bl	80004d8 <__aeabi_dmul>
 8008fee:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008ff2:	4683      	mov	fp, r0
 8008ff4:	460c      	mov	r4, r1
 8008ff6:	1523      	asrs	r3, r4, #20
 8008ff8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008ffc:	4413      	add	r3, r2
 8008ffe:	930b      	str	r3, [sp, #44]	; 0x2c
 8009000:	4bcd      	ldr	r3, [pc, #820]	; (8009338 <__ieee754_pow+0x740>)
 8009002:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009006:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800900a:	429c      	cmp	r4, r3
 800900c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009010:	dd08      	ble.n	8009024 <__ieee754_pow+0x42c>
 8009012:	4bca      	ldr	r3, [pc, #808]	; (800933c <__ieee754_pow+0x744>)
 8009014:	429c      	cmp	r4, r3
 8009016:	f340 8164 	ble.w	80092e2 <__ieee754_pow+0x6ea>
 800901a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800901c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009020:	3301      	adds	r3, #1
 8009022:	930b      	str	r3, [sp, #44]	; 0x2c
 8009024:	2600      	movs	r6, #0
 8009026:	00f3      	lsls	r3, r6, #3
 8009028:	930d      	str	r3, [sp, #52]	; 0x34
 800902a:	4bc5      	ldr	r3, [pc, #788]	; (8009340 <__ieee754_pow+0x748>)
 800902c:	4658      	mov	r0, fp
 800902e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009032:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009036:	4629      	mov	r1, r5
 8009038:	461a      	mov	r2, r3
 800903a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800903e:	4623      	mov	r3, r4
 8009040:	f7f7 f892 	bl	8000168 <__aeabi_dsub>
 8009044:	46da      	mov	sl, fp
 8009046:	462b      	mov	r3, r5
 8009048:	4652      	mov	r2, sl
 800904a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800904e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009052:	f7f7 f88b 	bl	800016c <__adddf3>
 8009056:	4602      	mov	r2, r0
 8009058:	460b      	mov	r3, r1
 800905a:	2000      	movs	r0, #0
 800905c:	49b9      	ldr	r1, [pc, #740]	; (8009344 <__ieee754_pow+0x74c>)
 800905e:	f7f7 fb65 	bl	800072c <__aeabi_ddiv>
 8009062:	4602      	mov	r2, r0
 8009064:	460b      	mov	r3, r1
 8009066:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800906a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800906e:	f7f7 fa33 	bl	80004d8 <__aeabi_dmul>
 8009072:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009076:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800907a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800907e:	2300      	movs	r3, #0
 8009080:	2200      	movs	r2, #0
 8009082:	46ab      	mov	fp, r5
 8009084:	106d      	asrs	r5, r5, #1
 8009086:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800908a:	9304      	str	r3, [sp, #16]
 800908c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009090:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009094:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8009098:	4640      	mov	r0, r8
 800909a:	4649      	mov	r1, r9
 800909c:	4614      	mov	r4, r2
 800909e:	461d      	mov	r5, r3
 80090a0:	f7f7 fa1a 	bl	80004d8 <__aeabi_dmul>
 80090a4:	4602      	mov	r2, r0
 80090a6:	460b      	mov	r3, r1
 80090a8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80090ac:	f7f7 f85c 	bl	8000168 <__aeabi_dsub>
 80090b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80090b4:	4606      	mov	r6, r0
 80090b6:	460f      	mov	r7, r1
 80090b8:	4620      	mov	r0, r4
 80090ba:	4629      	mov	r1, r5
 80090bc:	f7f7 f854 	bl	8000168 <__aeabi_dsub>
 80090c0:	4602      	mov	r2, r0
 80090c2:	460b      	mov	r3, r1
 80090c4:	4650      	mov	r0, sl
 80090c6:	4659      	mov	r1, fp
 80090c8:	f7f7 f84e 	bl	8000168 <__aeabi_dsub>
 80090cc:	4642      	mov	r2, r8
 80090ce:	464b      	mov	r3, r9
 80090d0:	f7f7 fa02 	bl	80004d8 <__aeabi_dmul>
 80090d4:	4602      	mov	r2, r0
 80090d6:	460b      	mov	r3, r1
 80090d8:	4630      	mov	r0, r6
 80090da:	4639      	mov	r1, r7
 80090dc:	f7f7 f844 	bl	8000168 <__aeabi_dsub>
 80090e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80090e4:	f7f7 f9f8 	bl	80004d8 <__aeabi_dmul>
 80090e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80090ec:	4682      	mov	sl, r0
 80090ee:	468b      	mov	fp, r1
 80090f0:	4610      	mov	r0, r2
 80090f2:	4619      	mov	r1, r3
 80090f4:	f7f7 f9f0 	bl	80004d8 <__aeabi_dmul>
 80090f8:	a37b      	add	r3, pc, #492	; (adr r3, 80092e8 <__ieee754_pow+0x6f0>)
 80090fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fe:	4604      	mov	r4, r0
 8009100:	460d      	mov	r5, r1
 8009102:	f7f7 f9e9 	bl	80004d8 <__aeabi_dmul>
 8009106:	a37a      	add	r3, pc, #488	; (adr r3, 80092f0 <__ieee754_pow+0x6f8>)
 8009108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910c:	f7f7 f82e 	bl	800016c <__adddf3>
 8009110:	4622      	mov	r2, r4
 8009112:	462b      	mov	r3, r5
 8009114:	f7f7 f9e0 	bl	80004d8 <__aeabi_dmul>
 8009118:	a377      	add	r3, pc, #476	; (adr r3, 80092f8 <__ieee754_pow+0x700>)
 800911a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911e:	f7f7 f825 	bl	800016c <__adddf3>
 8009122:	4622      	mov	r2, r4
 8009124:	462b      	mov	r3, r5
 8009126:	f7f7 f9d7 	bl	80004d8 <__aeabi_dmul>
 800912a:	a375      	add	r3, pc, #468	; (adr r3, 8009300 <__ieee754_pow+0x708>)
 800912c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009130:	f7f7 f81c 	bl	800016c <__adddf3>
 8009134:	4622      	mov	r2, r4
 8009136:	462b      	mov	r3, r5
 8009138:	f7f7 f9ce 	bl	80004d8 <__aeabi_dmul>
 800913c:	a372      	add	r3, pc, #456	; (adr r3, 8009308 <__ieee754_pow+0x710>)
 800913e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009142:	f7f7 f813 	bl	800016c <__adddf3>
 8009146:	4622      	mov	r2, r4
 8009148:	462b      	mov	r3, r5
 800914a:	f7f7 f9c5 	bl	80004d8 <__aeabi_dmul>
 800914e:	a370      	add	r3, pc, #448	; (adr r3, 8009310 <__ieee754_pow+0x718>)
 8009150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009154:	f7f7 f80a 	bl	800016c <__adddf3>
 8009158:	4622      	mov	r2, r4
 800915a:	4606      	mov	r6, r0
 800915c:	460f      	mov	r7, r1
 800915e:	462b      	mov	r3, r5
 8009160:	4620      	mov	r0, r4
 8009162:	4629      	mov	r1, r5
 8009164:	f7f7 f9b8 	bl	80004d8 <__aeabi_dmul>
 8009168:	4602      	mov	r2, r0
 800916a:	460b      	mov	r3, r1
 800916c:	4630      	mov	r0, r6
 800916e:	4639      	mov	r1, r7
 8009170:	f7f7 f9b2 	bl	80004d8 <__aeabi_dmul>
 8009174:	4604      	mov	r4, r0
 8009176:	460d      	mov	r5, r1
 8009178:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800917c:	4642      	mov	r2, r8
 800917e:	464b      	mov	r3, r9
 8009180:	f7f6 fff4 	bl	800016c <__adddf3>
 8009184:	4652      	mov	r2, sl
 8009186:	465b      	mov	r3, fp
 8009188:	f7f7 f9a6 	bl	80004d8 <__aeabi_dmul>
 800918c:	4622      	mov	r2, r4
 800918e:	462b      	mov	r3, r5
 8009190:	f7f6 ffec 	bl	800016c <__adddf3>
 8009194:	4642      	mov	r2, r8
 8009196:	4606      	mov	r6, r0
 8009198:	460f      	mov	r7, r1
 800919a:	464b      	mov	r3, r9
 800919c:	4640      	mov	r0, r8
 800919e:	4649      	mov	r1, r9
 80091a0:	f7f7 f99a 	bl	80004d8 <__aeabi_dmul>
 80091a4:	4602      	mov	r2, r0
 80091a6:	460b      	mov	r3, r1
 80091a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80091ac:	2200      	movs	r2, #0
 80091ae:	4b66      	ldr	r3, [pc, #408]	; (8009348 <__ieee754_pow+0x750>)
 80091b0:	f7f6 ffdc 	bl	800016c <__adddf3>
 80091b4:	4632      	mov	r2, r6
 80091b6:	463b      	mov	r3, r7
 80091b8:	f7f6 ffd8 	bl	800016c <__adddf3>
 80091bc:	2400      	movs	r4, #0
 80091be:	460d      	mov	r5, r1
 80091c0:	4622      	mov	r2, r4
 80091c2:	460b      	mov	r3, r1
 80091c4:	4640      	mov	r0, r8
 80091c6:	4649      	mov	r1, r9
 80091c8:	f7f7 f986 	bl	80004d8 <__aeabi_dmul>
 80091cc:	2200      	movs	r2, #0
 80091ce:	4680      	mov	r8, r0
 80091d0:	4689      	mov	r9, r1
 80091d2:	4620      	mov	r0, r4
 80091d4:	4629      	mov	r1, r5
 80091d6:	4b5c      	ldr	r3, [pc, #368]	; (8009348 <__ieee754_pow+0x750>)
 80091d8:	f7f6 ffc6 	bl	8000168 <__aeabi_dsub>
 80091dc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80091e0:	f7f6 ffc2 	bl	8000168 <__aeabi_dsub>
 80091e4:	4602      	mov	r2, r0
 80091e6:	460b      	mov	r3, r1
 80091e8:	4630      	mov	r0, r6
 80091ea:	4639      	mov	r1, r7
 80091ec:	f7f6 ffbc 	bl	8000168 <__aeabi_dsub>
 80091f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80091f4:	f7f7 f970 	bl	80004d8 <__aeabi_dmul>
 80091f8:	4622      	mov	r2, r4
 80091fa:	4606      	mov	r6, r0
 80091fc:	460f      	mov	r7, r1
 80091fe:	462b      	mov	r3, r5
 8009200:	4650      	mov	r0, sl
 8009202:	4659      	mov	r1, fp
 8009204:	f7f7 f968 	bl	80004d8 <__aeabi_dmul>
 8009208:	4602      	mov	r2, r0
 800920a:	460b      	mov	r3, r1
 800920c:	4630      	mov	r0, r6
 800920e:	4639      	mov	r1, r7
 8009210:	f7f6 ffac 	bl	800016c <__adddf3>
 8009214:	2400      	movs	r4, #0
 8009216:	4606      	mov	r6, r0
 8009218:	460f      	mov	r7, r1
 800921a:	4602      	mov	r2, r0
 800921c:	460b      	mov	r3, r1
 800921e:	4640      	mov	r0, r8
 8009220:	4649      	mov	r1, r9
 8009222:	f7f6 ffa3 	bl	800016c <__adddf3>
 8009226:	a33c      	add	r3, pc, #240	; (adr r3, 8009318 <__ieee754_pow+0x720>)
 8009228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922c:	4620      	mov	r0, r4
 800922e:	460d      	mov	r5, r1
 8009230:	f7f7 f952 	bl	80004d8 <__aeabi_dmul>
 8009234:	4642      	mov	r2, r8
 8009236:	464b      	mov	r3, r9
 8009238:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800923c:	4620      	mov	r0, r4
 800923e:	4629      	mov	r1, r5
 8009240:	f7f6 ff92 	bl	8000168 <__aeabi_dsub>
 8009244:	4602      	mov	r2, r0
 8009246:	460b      	mov	r3, r1
 8009248:	4630      	mov	r0, r6
 800924a:	4639      	mov	r1, r7
 800924c:	f7f6 ff8c 	bl	8000168 <__aeabi_dsub>
 8009250:	a333      	add	r3, pc, #204	; (adr r3, 8009320 <__ieee754_pow+0x728>)
 8009252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009256:	f7f7 f93f 	bl	80004d8 <__aeabi_dmul>
 800925a:	a333      	add	r3, pc, #204	; (adr r3, 8009328 <__ieee754_pow+0x730>)
 800925c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009260:	4606      	mov	r6, r0
 8009262:	460f      	mov	r7, r1
 8009264:	4620      	mov	r0, r4
 8009266:	4629      	mov	r1, r5
 8009268:	f7f7 f936 	bl	80004d8 <__aeabi_dmul>
 800926c:	4602      	mov	r2, r0
 800926e:	460b      	mov	r3, r1
 8009270:	4630      	mov	r0, r6
 8009272:	4639      	mov	r1, r7
 8009274:	f7f6 ff7a 	bl	800016c <__adddf3>
 8009278:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800927a:	4b34      	ldr	r3, [pc, #208]	; (800934c <__ieee754_pow+0x754>)
 800927c:	4413      	add	r3, r2
 800927e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009282:	f7f6 ff73 	bl	800016c <__adddf3>
 8009286:	4680      	mov	r8, r0
 8009288:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800928a:	4689      	mov	r9, r1
 800928c:	f7f7 f8ba 	bl	8000404 <__aeabi_i2d>
 8009290:	4604      	mov	r4, r0
 8009292:	460d      	mov	r5, r1
 8009294:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009298:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800929a:	4b2d      	ldr	r3, [pc, #180]	; (8009350 <__ieee754_pow+0x758>)
 800929c:	4413      	add	r3, r2
 800929e:	e9d3 6700 	ldrd	r6, r7, [r3]
 80092a2:	4642      	mov	r2, r8
 80092a4:	464b      	mov	r3, r9
 80092a6:	f7f6 ff61 	bl	800016c <__adddf3>
 80092aa:	4632      	mov	r2, r6
 80092ac:	463b      	mov	r3, r7
 80092ae:	f7f6 ff5d 	bl	800016c <__adddf3>
 80092b2:	4622      	mov	r2, r4
 80092b4:	462b      	mov	r3, r5
 80092b6:	f7f6 ff59 	bl	800016c <__adddf3>
 80092ba:	2000      	movs	r0, #0
 80092bc:	4622      	mov	r2, r4
 80092be:	462b      	mov	r3, r5
 80092c0:	4682      	mov	sl, r0
 80092c2:	468b      	mov	fp, r1
 80092c4:	f7f6 ff50 	bl	8000168 <__aeabi_dsub>
 80092c8:	4632      	mov	r2, r6
 80092ca:	463b      	mov	r3, r7
 80092cc:	f7f6 ff4c 	bl	8000168 <__aeabi_dsub>
 80092d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092d4:	f7f6 ff48 	bl	8000168 <__aeabi_dsub>
 80092d8:	4602      	mov	r2, r0
 80092da:	460b      	mov	r3, r1
 80092dc:	4640      	mov	r0, r8
 80092de:	4649      	mov	r1, r9
 80092e0:	e60b      	b.n	8008efa <__ieee754_pow+0x302>
 80092e2:	2601      	movs	r6, #1
 80092e4:	e69f      	b.n	8009026 <__ieee754_pow+0x42e>
 80092e6:	bf00      	nop
 80092e8:	4a454eef 	.word	0x4a454eef
 80092ec:	3fca7e28 	.word	0x3fca7e28
 80092f0:	93c9db65 	.word	0x93c9db65
 80092f4:	3fcd864a 	.word	0x3fcd864a
 80092f8:	a91d4101 	.word	0xa91d4101
 80092fc:	3fd17460 	.word	0x3fd17460
 8009300:	518f264d 	.word	0x518f264d
 8009304:	3fd55555 	.word	0x3fd55555
 8009308:	db6fabff 	.word	0xdb6fabff
 800930c:	3fdb6db6 	.word	0x3fdb6db6
 8009310:	33333303 	.word	0x33333303
 8009314:	3fe33333 	.word	0x3fe33333
 8009318:	e0000000 	.word	0xe0000000
 800931c:	3feec709 	.word	0x3feec709
 8009320:	dc3a03fd 	.word	0xdc3a03fd
 8009324:	3feec709 	.word	0x3feec709
 8009328:	145b01f5 	.word	0x145b01f5
 800932c:	be3e2fe0 	.word	0xbe3e2fe0
 8009330:	7ff00000 	.word	0x7ff00000
 8009334:	43400000 	.word	0x43400000
 8009338:	0003988e 	.word	0x0003988e
 800933c:	000bb679 	.word	0x000bb679
 8009340:	08009de8 	.word	0x08009de8
 8009344:	3ff00000 	.word	0x3ff00000
 8009348:	40080000 	.word	0x40080000
 800934c:	08009e08 	.word	0x08009e08
 8009350:	08009df8 	.word	0x08009df8
 8009354:	a39c      	add	r3, pc, #624	; (adr r3, 80095c8 <__ieee754_pow+0x9d0>)
 8009356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935a:	4640      	mov	r0, r8
 800935c:	4649      	mov	r1, r9
 800935e:	f7f6 ff05 	bl	800016c <__adddf3>
 8009362:	4622      	mov	r2, r4
 8009364:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009368:	462b      	mov	r3, r5
 800936a:	4650      	mov	r0, sl
 800936c:	4639      	mov	r1, r7
 800936e:	f7f6 fefb 	bl	8000168 <__aeabi_dsub>
 8009372:	4602      	mov	r2, r0
 8009374:	460b      	mov	r3, r1
 8009376:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800937a:	f7f7 fb3d 	bl	80009f8 <__aeabi_dcmpgt>
 800937e:	2800      	cmp	r0, #0
 8009380:	f47f ae06 	bne.w	8008f90 <__ieee754_pow+0x398>
 8009384:	4aa2      	ldr	r2, [pc, #648]	; (8009610 <__ieee754_pow+0xa18>)
 8009386:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800938a:	4293      	cmp	r3, r2
 800938c:	f340 8100 	ble.w	8009590 <__ieee754_pow+0x998>
 8009390:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009394:	151b      	asrs	r3, r3, #20
 8009396:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800939a:	fa4a fa03 	asr.w	sl, sl, r3
 800939e:	44b2      	add	sl, r6
 80093a0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80093a4:	489b      	ldr	r0, [pc, #620]	; (8009614 <__ieee754_pow+0xa1c>)
 80093a6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80093aa:	4108      	asrs	r0, r1
 80093ac:	ea00 030a 	and.w	r3, r0, sl
 80093b0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80093b4:	f1c1 0114 	rsb	r1, r1, #20
 80093b8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80093bc:	fa4a fa01 	asr.w	sl, sl, r1
 80093c0:	2e00      	cmp	r6, #0
 80093c2:	f04f 0200 	mov.w	r2, #0
 80093c6:	4620      	mov	r0, r4
 80093c8:	4629      	mov	r1, r5
 80093ca:	bfb8      	it	lt
 80093cc:	f1ca 0a00 	rsblt	sl, sl, #0
 80093d0:	f7f6 feca 	bl	8000168 <__aeabi_dsub>
 80093d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093dc:	2400      	movs	r4, #0
 80093de:	4642      	mov	r2, r8
 80093e0:	464b      	mov	r3, r9
 80093e2:	f7f6 fec3 	bl	800016c <__adddf3>
 80093e6:	a37a      	add	r3, pc, #488	; (adr r3, 80095d0 <__ieee754_pow+0x9d8>)
 80093e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ec:	4620      	mov	r0, r4
 80093ee:	460d      	mov	r5, r1
 80093f0:	f7f7 f872 	bl	80004d8 <__aeabi_dmul>
 80093f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093f8:	4606      	mov	r6, r0
 80093fa:	460f      	mov	r7, r1
 80093fc:	4620      	mov	r0, r4
 80093fe:	4629      	mov	r1, r5
 8009400:	f7f6 feb2 	bl	8000168 <__aeabi_dsub>
 8009404:	4602      	mov	r2, r0
 8009406:	460b      	mov	r3, r1
 8009408:	4640      	mov	r0, r8
 800940a:	4649      	mov	r1, r9
 800940c:	f7f6 feac 	bl	8000168 <__aeabi_dsub>
 8009410:	a371      	add	r3, pc, #452	; (adr r3, 80095d8 <__ieee754_pow+0x9e0>)
 8009412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009416:	f7f7 f85f 	bl	80004d8 <__aeabi_dmul>
 800941a:	a371      	add	r3, pc, #452	; (adr r3, 80095e0 <__ieee754_pow+0x9e8>)
 800941c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009420:	4680      	mov	r8, r0
 8009422:	4689      	mov	r9, r1
 8009424:	4620      	mov	r0, r4
 8009426:	4629      	mov	r1, r5
 8009428:	f7f7 f856 	bl	80004d8 <__aeabi_dmul>
 800942c:	4602      	mov	r2, r0
 800942e:	460b      	mov	r3, r1
 8009430:	4640      	mov	r0, r8
 8009432:	4649      	mov	r1, r9
 8009434:	f7f6 fe9a 	bl	800016c <__adddf3>
 8009438:	4604      	mov	r4, r0
 800943a:	460d      	mov	r5, r1
 800943c:	4602      	mov	r2, r0
 800943e:	460b      	mov	r3, r1
 8009440:	4630      	mov	r0, r6
 8009442:	4639      	mov	r1, r7
 8009444:	f7f6 fe92 	bl	800016c <__adddf3>
 8009448:	4632      	mov	r2, r6
 800944a:	463b      	mov	r3, r7
 800944c:	4680      	mov	r8, r0
 800944e:	4689      	mov	r9, r1
 8009450:	f7f6 fe8a 	bl	8000168 <__aeabi_dsub>
 8009454:	4602      	mov	r2, r0
 8009456:	460b      	mov	r3, r1
 8009458:	4620      	mov	r0, r4
 800945a:	4629      	mov	r1, r5
 800945c:	f7f6 fe84 	bl	8000168 <__aeabi_dsub>
 8009460:	4642      	mov	r2, r8
 8009462:	4606      	mov	r6, r0
 8009464:	460f      	mov	r7, r1
 8009466:	464b      	mov	r3, r9
 8009468:	4640      	mov	r0, r8
 800946a:	4649      	mov	r1, r9
 800946c:	f7f7 f834 	bl	80004d8 <__aeabi_dmul>
 8009470:	a35d      	add	r3, pc, #372	; (adr r3, 80095e8 <__ieee754_pow+0x9f0>)
 8009472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009476:	4604      	mov	r4, r0
 8009478:	460d      	mov	r5, r1
 800947a:	f7f7 f82d 	bl	80004d8 <__aeabi_dmul>
 800947e:	a35c      	add	r3, pc, #368	; (adr r3, 80095f0 <__ieee754_pow+0x9f8>)
 8009480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009484:	f7f6 fe70 	bl	8000168 <__aeabi_dsub>
 8009488:	4622      	mov	r2, r4
 800948a:	462b      	mov	r3, r5
 800948c:	f7f7 f824 	bl	80004d8 <__aeabi_dmul>
 8009490:	a359      	add	r3, pc, #356	; (adr r3, 80095f8 <__ieee754_pow+0xa00>)
 8009492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009496:	f7f6 fe69 	bl	800016c <__adddf3>
 800949a:	4622      	mov	r2, r4
 800949c:	462b      	mov	r3, r5
 800949e:	f7f7 f81b 	bl	80004d8 <__aeabi_dmul>
 80094a2:	a357      	add	r3, pc, #348	; (adr r3, 8009600 <__ieee754_pow+0xa08>)
 80094a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a8:	f7f6 fe5e 	bl	8000168 <__aeabi_dsub>
 80094ac:	4622      	mov	r2, r4
 80094ae:	462b      	mov	r3, r5
 80094b0:	f7f7 f812 	bl	80004d8 <__aeabi_dmul>
 80094b4:	a354      	add	r3, pc, #336	; (adr r3, 8009608 <__ieee754_pow+0xa10>)
 80094b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ba:	f7f6 fe57 	bl	800016c <__adddf3>
 80094be:	4622      	mov	r2, r4
 80094c0:	462b      	mov	r3, r5
 80094c2:	f7f7 f809 	bl	80004d8 <__aeabi_dmul>
 80094c6:	4602      	mov	r2, r0
 80094c8:	460b      	mov	r3, r1
 80094ca:	4640      	mov	r0, r8
 80094cc:	4649      	mov	r1, r9
 80094ce:	f7f6 fe4b 	bl	8000168 <__aeabi_dsub>
 80094d2:	4604      	mov	r4, r0
 80094d4:	460d      	mov	r5, r1
 80094d6:	4602      	mov	r2, r0
 80094d8:	460b      	mov	r3, r1
 80094da:	4640      	mov	r0, r8
 80094dc:	4649      	mov	r1, r9
 80094de:	f7f6 fffb 	bl	80004d8 <__aeabi_dmul>
 80094e2:	2200      	movs	r2, #0
 80094e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80094ec:	4620      	mov	r0, r4
 80094ee:	4629      	mov	r1, r5
 80094f0:	f7f6 fe3a 	bl	8000168 <__aeabi_dsub>
 80094f4:	4602      	mov	r2, r0
 80094f6:	460b      	mov	r3, r1
 80094f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094fc:	f7f7 f916 	bl	800072c <__aeabi_ddiv>
 8009500:	4632      	mov	r2, r6
 8009502:	4604      	mov	r4, r0
 8009504:	460d      	mov	r5, r1
 8009506:	463b      	mov	r3, r7
 8009508:	4640      	mov	r0, r8
 800950a:	4649      	mov	r1, r9
 800950c:	f7f6 ffe4 	bl	80004d8 <__aeabi_dmul>
 8009510:	4632      	mov	r2, r6
 8009512:	463b      	mov	r3, r7
 8009514:	f7f6 fe2a 	bl	800016c <__adddf3>
 8009518:	4602      	mov	r2, r0
 800951a:	460b      	mov	r3, r1
 800951c:	4620      	mov	r0, r4
 800951e:	4629      	mov	r1, r5
 8009520:	f7f6 fe22 	bl	8000168 <__aeabi_dsub>
 8009524:	4642      	mov	r2, r8
 8009526:	464b      	mov	r3, r9
 8009528:	f7f6 fe1e 	bl	8000168 <__aeabi_dsub>
 800952c:	4602      	mov	r2, r0
 800952e:	460b      	mov	r3, r1
 8009530:	2000      	movs	r0, #0
 8009532:	4939      	ldr	r1, [pc, #228]	; (8009618 <__ieee754_pow+0xa20>)
 8009534:	f7f6 fe18 	bl	8000168 <__aeabi_dsub>
 8009538:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800953c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009540:	da29      	bge.n	8009596 <__ieee754_pow+0x99e>
 8009542:	4652      	mov	r2, sl
 8009544:	f000 f874 	bl	8009630 <scalbn>
 8009548:	e9dd 2300 	ldrd	r2, r3, [sp]
 800954c:	f7ff bbfd 	b.w	8008d4a <__ieee754_pow+0x152>
 8009550:	4b32      	ldr	r3, [pc, #200]	; (800961c <__ieee754_pow+0xa24>)
 8009552:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8009556:	429f      	cmp	r7, r3
 8009558:	f77f af14 	ble.w	8009384 <__ieee754_pow+0x78c>
 800955c:	4b30      	ldr	r3, [pc, #192]	; (8009620 <__ieee754_pow+0xa28>)
 800955e:	440b      	add	r3, r1
 8009560:	4303      	orrs	r3, r0
 8009562:	d009      	beq.n	8009578 <__ieee754_pow+0x980>
 8009564:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009568:	2200      	movs	r2, #0
 800956a:	2300      	movs	r3, #0
 800956c:	f7f7 fa26 	bl	80009bc <__aeabi_dcmplt>
 8009570:	3800      	subs	r0, #0
 8009572:	bf18      	it	ne
 8009574:	2001      	movne	r0, #1
 8009576:	e452      	b.n	8008e1e <__ieee754_pow+0x226>
 8009578:	4622      	mov	r2, r4
 800957a:	462b      	mov	r3, r5
 800957c:	f7f6 fdf4 	bl	8000168 <__aeabi_dsub>
 8009580:	4642      	mov	r2, r8
 8009582:	464b      	mov	r3, r9
 8009584:	f7f7 fa2e 	bl	80009e4 <__aeabi_dcmpge>
 8009588:	2800      	cmp	r0, #0
 800958a:	f43f aefb 	beq.w	8009384 <__ieee754_pow+0x78c>
 800958e:	e7e9      	b.n	8009564 <__ieee754_pow+0x96c>
 8009590:	f04f 0a00 	mov.w	sl, #0
 8009594:	e720      	b.n	80093d8 <__ieee754_pow+0x7e0>
 8009596:	4621      	mov	r1, r4
 8009598:	e7d6      	b.n	8009548 <__ieee754_pow+0x950>
 800959a:	f04f 0b00 	mov.w	fp, #0
 800959e:	f8df c078 	ldr.w	ip, [pc, #120]	; 8009618 <__ieee754_pow+0xa20>
 80095a2:	f7ff bbb9 	b.w	8008d18 <__ieee754_pow+0x120>
 80095a6:	f04f 0b00 	mov.w	fp, #0
 80095aa:	f04f 0c00 	mov.w	ip, #0
 80095ae:	f7ff bbb3 	b.w	8008d18 <__ieee754_pow+0x120>
 80095b2:	4640      	mov	r0, r8
 80095b4:	4649      	mov	r1, r9
 80095b6:	f7ff bb3c 	b.w	8008c32 <__ieee754_pow+0x3a>
 80095ba:	9200      	str	r2, [sp, #0]
 80095bc:	f7ff bb88 	b.w	8008cd0 <__ieee754_pow+0xd8>
 80095c0:	2300      	movs	r3, #0
 80095c2:	f7ff bb72 	b.w	8008caa <__ieee754_pow+0xb2>
 80095c6:	bf00      	nop
 80095c8:	652b82fe 	.word	0x652b82fe
 80095cc:	3c971547 	.word	0x3c971547
 80095d0:	00000000 	.word	0x00000000
 80095d4:	3fe62e43 	.word	0x3fe62e43
 80095d8:	fefa39ef 	.word	0xfefa39ef
 80095dc:	3fe62e42 	.word	0x3fe62e42
 80095e0:	0ca86c39 	.word	0x0ca86c39
 80095e4:	be205c61 	.word	0xbe205c61
 80095e8:	72bea4d0 	.word	0x72bea4d0
 80095ec:	3e663769 	.word	0x3e663769
 80095f0:	c5d26bf1 	.word	0xc5d26bf1
 80095f4:	3ebbbd41 	.word	0x3ebbbd41
 80095f8:	af25de2c 	.word	0xaf25de2c
 80095fc:	3f11566a 	.word	0x3f11566a
 8009600:	16bebd93 	.word	0x16bebd93
 8009604:	3f66c16c 	.word	0x3f66c16c
 8009608:	5555553e 	.word	0x5555553e
 800960c:	3fc55555 	.word	0x3fc55555
 8009610:	3fe00000 	.word	0x3fe00000
 8009614:	fff00000 	.word	0xfff00000
 8009618:	3ff00000 	.word	0x3ff00000
 800961c:	4090cbff 	.word	0x4090cbff
 8009620:	3f6f3400 	.word	0x3f6f3400

08009624 <fabs>:
 8009624:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009628:	4619      	mov	r1, r3
 800962a:	4770      	bx	lr
 800962c:	0000      	movs	r0, r0
	...

08009630 <scalbn>:
 8009630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009632:	4616      	mov	r6, r2
 8009634:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009638:	4604      	mov	r4, r0
 800963a:	460d      	mov	r5, r1
 800963c:	460b      	mov	r3, r1
 800963e:	b992      	cbnz	r2, 8009666 <scalbn+0x36>
 8009640:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009644:	4303      	orrs	r3, r0
 8009646:	d03c      	beq.n	80096c2 <scalbn+0x92>
 8009648:	4b31      	ldr	r3, [pc, #196]	; (8009710 <scalbn+0xe0>)
 800964a:	2200      	movs	r2, #0
 800964c:	f7f6 ff44 	bl	80004d8 <__aeabi_dmul>
 8009650:	4b30      	ldr	r3, [pc, #192]	; (8009714 <scalbn+0xe4>)
 8009652:	4604      	mov	r4, r0
 8009654:	429e      	cmp	r6, r3
 8009656:	460d      	mov	r5, r1
 8009658:	da0f      	bge.n	800967a <scalbn+0x4a>
 800965a:	a329      	add	r3, pc, #164	; (adr r3, 8009700 <scalbn+0xd0>)
 800965c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009660:	f7f6 ff3a 	bl	80004d8 <__aeabi_dmul>
 8009664:	e006      	b.n	8009674 <scalbn+0x44>
 8009666:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800966a:	42ba      	cmp	r2, r7
 800966c:	d109      	bne.n	8009682 <scalbn+0x52>
 800966e:	4602      	mov	r2, r0
 8009670:	f7f6 fd7c 	bl	800016c <__adddf3>
 8009674:	4604      	mov	r4, r0
 8009676:	460d      	mov	r5, r1
 8009678:	e023      	b.n	80096c2 <scalbn+0x92>
 800967a:	460b      	mov	r3, r1
 800967c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009680:	3a36      	subs	r2, #54	; 0x36
 8009682:	f24c 3150 	movw	r1, #50000	; 0xc350
 8009686:	428e      	cmp	r6, r1
 8009688:	dd0e      	ble.n	80096a8 <scalbn+0x78>
 800968a:	a31f      	add	r3, pc, #124	; (adr r3, 8009708 <scalbn+0xd8>)
 800968c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009690:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8009694:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8009698:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800969c:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80096a0:	481d      	ldr	r0, [pc, #116]	; (8009718 <scalbn+0xe8>)
 80096a2:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80096a6:	e7db      	b.n	8009660 <scalbn+0x30>
 80096a8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80096ac:	4432      	add	r2, r6
 80096ae:	428a      	cmp	r2, r1
 80096b0:	dceb      	bgt.n	800968a <scalbn+0x5a>
 80096b2:	2a00      	cmp	r2, #0
 80096b4:	dd08      	ble.n	80096c8 <scalbn+0x98>
 80096b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80096ba:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80096be:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80096c2:	4620      	mov	r0, r4
 80096c4:	4629      	mov	r1, r5
 80096c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096c8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80096cc:	da0c      	bge.n	80096e8 <scalbn+0xb8>
 80096ce:	a30c      	add	r3, pc, #48	; (adr r3, 8009700 <scalbn+0xd0>)
 80096d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80096d8:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80096dc:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80096e0:	480e      	ldr	r0, [pc, #56]	; (800971c <scalbn+0xec>)
 80096e2:	f041 011f 	orr.w	r1, r1, #31
 80096e6:	e7bb      	b.n	8009660 <scalbn+0x30>
 80096e8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80096ec:	3236      	adds	r2, #54	; 0x36
 80096ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80096f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80096f6:	4620      	mov	r0, r4
 80096f8:	4629      	mov	r1, r5
 80096fa:	2200      	movs	r2, #0
 80096fc:	4b08      	ldr	r3, [pc, #32]	; (8009720 <scalbn+0xf0>)
 80096fe:	e7af      	b.n	8009660 <scalbn+0x30>
 8009700:	c2f8f359 	.word	0xc2f8f359
 8009704:	01a56e1f 	.word	0x01a56e1f
 8009708:	8800759c 	.word	0x8800759c
 800970c:	7e37e43c 	.word	0x7e37e43c
 8009710:	43500000 	.word	0x43500000
 8009714:	ffff3cb0 	.word	0xffff3cb0
 8009718:	8800759c 	.word	0x8800759c
 800971c:	c2f8f359 	.word	0xc2f8f359
 8009720:	3c900000 	.word	0x3c900000

08009724 <with_errno>:
 8009724:	b570      	push	{r4, r5, r6, lr}
 8009726:	4604      	mov	r4, r0
 8009728:	460d      	mov	r5, r1
 800972a:	4616      	mov	r6, r2
 800972c:	f7fb fc40 	bl	8004fb0 <__errno>
 8009730:	4629      	mov	r1, r5
 8009732:	6006      	str	r6, [r0, #0]
 8009734:	4620      	mov	r0, r4
 8009736:	bd70      	pop	{r4, r5, r6, pc}

08009738 <xflow>:
 8009738:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800973a:	4615      	mov	r5, r2
 800973c:	461c      	mov	r4, r3
 800973e:	b180      	cbz	r0, 8009762 <xflow+0x2a>
 8009740:	4610      	mov	r0, r2
 8009742:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009746:	e9cd 0100 	strd	r0, r1, [sp]
 800974a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800974e:	4628      	mov	r0, r5
 8009750:	4621      	mov	r1, r4
 8009752:	f7f6 fec1 	bl	80004d8 <__aeabi_dmul>
 8009756:	2222      	movs	r2, #34	; 0x22
 8009758:	b003      	add	sp, #12
 800975a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800975e:	f7ff bfe1 	b.w	8009724 <with_errno>
 8009762:	4610      	mov	r0, r2
 8009764:	4619      	mov	r1, r3
 8009766:	e7ee      	b.n	8009746 <xflow+0xe>

08009768 <__math_uflow>:
 8009768:	2200      	movs	r2, #0
 800976a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800976e:	f7ff bfe3 	b.w	8009738 <xflow>

08009772 <__math_oflow>:
 8009772:	2200      	movs	r2, #0
 8009774:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009778:	f7ff bfde 	b.w	8009738 <xflow>

0800977c <__ieee754_sqrt>:
 800977c:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8009920 <__ieee754_sqrt+0x1a4>
 8009780:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009784:	ea3c 0c01 	bics.w	ip, ip, r1
 8009788:	460b      	mov	r3, r1
 800978a:	4606      	mov	r6, r0
 800978c:	460d      	mov	r5, r1
 800978e:	460a      	mov	r2, r1
 8009790:	4604      	mov	r4, r0
 8009792:	d10e      	bne.n	80097b2 <__ieee754_sqrt+0x36>
 8009794:	4602      	mov	r2, r0
 8009796:	f7f6 fe9f 	bl	80004d8 <__aeabi_dmul>
 800979a:	4602      	mov	r2, r0
 800979c:	460b      	mov	r3, r1
 800979e:	4630      	mov	r0, r6
 80097a0:	4629      	mov	r1, r5
 80097a2:	f7f6 fce3 	bl	800016c <__adddf3>
 80097a6:	4606      	mov	r6, r0
 80097a8:	460d      	mov	r5, r1
 80097aa:	4630      	mov	r0, r6
 80097ac:	4629      	mov	r1, r5
 80097ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b2:	2900      	cmp	r1, #0
 80097b4:	dc0d      	bgt.n	80097d2 <__ieee754_sqrt+0x56>
 80097b6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80097ba:	ea5c 0c00 	orrs.w	ip, ip, r0
 80097be:	d0f4      	beq.n	80097aa <__ieee754_sqrt+0x2e>
 80097c0:	b139      	cbz	r1, 80097d2 <__ieee754_sqrt+0x56>
 80097c2:	4602      	mov	r2, r0
 80097c4:	f7f6 fcd0 	bl	8000168 <__aeabi_dsub>
 80097c8:	4602      	mov	r2, r0
 80097ca:	460b      	mov	r3, r1
 80097cc:	f7f6 ffae 	bl	800072c <__aeabi_ddiv>
 80097d0:	e7e9      	b.n	80097a6 <__ieee754_sqrt+0x2a>
 80097d2:	1512      	asrs	r2, r2, #20
 80097d4:	f000 8089 	beq.w	80098ea <__ieee754_sqrt+0x16e>
 80097d8:	2500      	movs	r5, #0
 80097da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097de:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80097e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80097e6:	07d2      	lsls	r2, r2, #31
 80097e8:	bf5c      	itt	pl
 80097ea:	005b      	lslpl	r3, r3, #1
 80097ec:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80097f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80097f4:	bf58      	it	pl
 80097f6:	0064      	lslpl	r4, r4, #1
 80097f8:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80097fc:	0062      	lsls	r2, r4, #1
 80097fe:	2016      	movs	r0, #22
 8009800:	4629      	mov	r1, r5
 8009802:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8009806:	1076      	asrs	r6, r6, #1
 8009808:	190f      	adds	r7, r1, r4
 800980a:	429f      	cmp	r7, r3
 800980c:	bfde      	ittt	le
 800980e:	1bdb      	suble	r3, r3, r7
 8009810:	1939      	addle	r1, r7, r4
 8009812:	192d      	addle	r5, r5, r4
 8009814:	005b      	lsls	r3, r3, #1
 8009816:	3801      	subs	r0, #1
 8009818:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800981c:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009820:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009824:	d1f0      	bne.n	8009808 <__ieee754_sqrt+0x8c>
 8009826:	4604      	mov	r4, r0
 8009828:	2720      	movs	r7, #32
 800982a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800982e:	428b      	cmp	r3, r1
 8009830:	eb0c 0e00 	add.w	lr, ip, r0
 8009834:	dc02      	bgt.n	800983c <__ieee754_sqrt+0xc0>
 8009836:	d113      	bne.n	8009860 <__ieee754_sqrt+0xe4>
 8009838:	4596      	cmp	lr, r2
 800983a:	d811      	bhi.n	8009860 <__ieee754_sqrt+0xe4>
 800983c:	f1be 0f00 	cmp.w	lr, #0
 8009840:	eb0e 000c 	add.w	r0, lr, ip
 8009844:	da56      	bge.n	80098f4 <__ieee754_sqrt+0x178>
 8009846:	2800      	cmp	r0, #0
 8009848:	db54      	blt.n	80098f4 <__ieee754_sqrt+0x178>
 800984a:	f101 0801 	add.w	r8, r1, #1
 800984e:	1a5b      	subs	r3, r3, r1
 8009850:	4641      	mov	r1, r8
 8009852:	4596      	cmp	lr, r2
 8009854:	bf88      	it	hi
 8009856:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800985a:	eba2 020e 	sub.w	r2, r2, lr
 800985e:	4464      	add	r4, ip
 8009860:	005b      	lsls	r3, r3, #1
 8009862:	3f01      	subs	r7, #1
 8009864:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009868:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800986c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009870:	d1dd      	bne.n	800982e <__ieee754_sqrt+0xb2>
 8009872:	4313      	orrs	r3, r2
 8009874:	d01b      	beq.n	80098ae <__ieee754_sqrt+0x132>
 8009876:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8009924 <__ieee754_sqrt+0x1a8>
 800987a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009928 <__ieee754_sqrt+0x1ac>
 800987e:	e9da 0100 	ldrd	r0, r1, [sl]
 8009882:	e9db 2300 	ldrd	r2, r3, [fp]
 8009886:	f7f6 fc6f 	bl	8000168 <__aeabi_dsub>
 800988a:	e9da 8900 	ldrd	r8, r9, [sl]
 800988e:	4602      	mov	r2, r0
 8009890:	460b      	mov	r3, r1
 8009892:	4640      	mov	r0, r8
 8009894:	4649      	mov	r1, r9
 8009896:	f7f7 f89b 	bl	80009d0 <__aeabi_dcmple>
 800989a:	b140      	cbz	r0, 80098ae <__ieee754_sqrt+0x132>
 800989c:	e9da 0100 	ldrd	r0, r1, [sl]
 80098a0:	e9db 2300 	ldrd	r2, r3, [fp]
 80098a4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80098a8:	d126      	bne.n	80098f8 <__ieee754_sqrt+0x17c>
 80098aa:	463c      	mov	r4, r7
 80098ac:	3501      	adds	r5, #1
 80098ae:	106b      	asrs	r3, r5, #1
 80098b0:	0864      	lsrs	r4, r4, #1
 80098b2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80098b6:	07ea      	lsls	r2, r5, #31
 80098b8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80098bc:	bf48      	it	mi
 80098be:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 80098c2:	4620      	mov	r0, r4
 80098c4:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80098c8:	e76d      	b.n	80097a6 <__ieee754_sqrt+0x2a>
 80098ca:	0ae3      	lsrs	r3, r4, #11
 80098cc:	3915      	subs	r1, #21
 80098ce:	0564      	lsls	r4, r4, #21
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d0fa      	beq.n	80098ca <__ieee754_sqrt+0x14e>
 80098d4:	02d8      	lsls	r0, r3, #11
 80098d6:	d50a      	bpl.n	80098ee <__ieee754_sqrt+0x172>
 80098d8:	f1c2 0020 	rsb	r0, r2, #32
 80098dc:	fa24 f000 	lsr.w	r0, r4, r0
 80098e0:	1e55      	subs	r5, r2, #1
 80098e2:	4094      	lsls	r4, r2
 80098e4:	4303      	orrs	r3, r0
 80098e6:	1b4a      	subs	r2, r1, r5
 80098e8:	e776      	b.n	80097d8 <__ieee754_sqrt+0x5c>
 80098ea:	4611      	mov	r1, r2
 80098ec:	e7f0      	b.n	80098d0 <__ieee754_sqrt+0x154>
 80098ee:	005b      	lsls	r3, r3, #1
 80098f0:	3201      	adds	r2, #1
 80098f2:	e7ef      	b.n	80098d4 <__ieee754_sqrt+0x158>
 80098f4:	4688      	mov	r8, r1
 80098f6:	e7aa      	b.n	800984e <__ieee754_sqrt+0xd2>
 80098f8:	f7f6 fc38 	bl	800016c <__adddf3>
 80098fc:	e9da 8900 	ldrd	r8, r9, [sl]
 8009900:	4602      	mov	r2, r0
 8009902:	460b      	mov	r3, r1
 8009904:	4640      	mov	r0, r8
 8009906:	4649      	mov	r1, r9
 8009908:	f7f7 f858 	bl	80009bc <__aeabi_dcmplt>
 800990c:	b120      	cbz	r0, 8009918 <__ieee754_sqrt+0x19c>
 800990e:	1ca1      	adds	r1, r4, #2
 8009910:	bf08      	it	eq
 8009912:	3501      	addeq	r5, #1
 8009914:	3402      	adds	r4, #2
 8009916:	e7ca      	b.n	80098ae <__ieee754_sqrt+0x132>
 8009918:	3401      	adds	r4, #1
 800991a:	f024 0401 	bic.w	r4, r4, #1
 800991e:	e7c6      	b.n	80098ae <__ieee754_sqrt+0x132>
 8009920:	7ff00000 	.word	0x7ff00000
 8009924:	200001d8 	.word	0x200001d8
 8009928:	200001e0 	.word	0x200001e0

0800992c <_init>:
 800992c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800992e:	bf00      	nop
 8009930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009932:	bc08      	pop	{r3}
 8009934:	469e      	mov	lr, r3
 8009936:	4770      	bx	lr

08009938 <_fini>:
 8009938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993a:	bf00      	nop
 800993c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800993e:	bc08      	pop	{r3}
 8009940:	469e      	mov	lr, r3
 8009942:	4770      	bx	lr
